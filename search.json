[{"path":[]},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team hello@dynastyprocess.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Many hands make light work! ways can contribute project:","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"open-an-issue","dir":"","previous_headings":"","what":"Open an issue","title":"Contributing","text":"can open issue ’d like request specific function report bug/error.","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). can also bring changes nflverse discord team happy discuss!","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note usethis project released Contributor Code Conduct. contributing project agree abide terms. contribution guidelines inspired guidelines {usethis}","code":""},{"path":"https://nflseedr.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Lee Sharpe, Sebastian Carl Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Get started with nflseedR","text":"nflseedR essentially performs two tasks: Calculation NFL standings nfl_standings() based game results one seasons, especially taking account comprehensive sometimes complicated tie-breaking procedures division ranks, conference seeds draft order. Read article information implemented tie-breakers. Running thousands simulations (Monte Carlo style) NFL season nfl_simulations(). standings point 1 especially conference seeds needed determine playoff participants. Basically, first point exists need carry simulations. actual core simulation generation game results based information user deems important. nflseedR virtually extensible. default, simple ELO model implemented works initial starting ELO values updates week week based game results. However, user can write function calculating game results pass nflseedR together additional data may required.","code":""},{"path":[]},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"standings","dir":"Articles","previous_headings":"Usage","what":"Standings","title":"Get started with nflseedR","text":"need real simulated match data determine standings. required variables specified documentation function nfl_standings(). games data 2023 2024 seasons. can pass data directly nflseedR calculate standings. defaults compute division ranks well conference ranks teams applies tiebreakers strength schedule. nflseedR also provides functionality create “pretty” html table using gt package. Use nfl_standings_prettify() output nfl_standings() create table. allows grouping division, conference overall can sort division rank, conference rank (seed), draft rank. default groups division sorts division rank. can also things like ordering complete league draft rank. Please note nfl_standings_prettify() returns gt::gt() table can change according preferences.","code":"games <- nflreadr::load_schedules(2023:2024) standings <- nflseedR::nfl_standings(games, ranks = \"DRAFT\") #> ℹ 20:32:10 | Initiate Standings & Tiebreaking Data #> ℹ 20:32:10 | Compute Division Ranks #> ℹ 20:32:11 | Compute Conference Ranks #> ℹ 20:32:11 | Compute Draft Order # Let's view the structure of the output str(standings, max.level = 1, width = 50, strict.width = \"cut\") #> Classes 'data.table' and 'data.frame':   64 obs. of  24 variables: #>  $ season             : int  2023 2023 2023 2023.. #>  $ team               : chr  \"BUF\" \"MIA\" \"NYJ\" \".. #>  $ conf               : chr  \"AFC\" \"AFC\" \"AFC\" \".. #>  $ division           : chr  \"AFC East\" \"AFC Ea\".. #>  $ games              : int  17 17 17 17 17 17 1.. #>  $ wins               : num  11 11 7 4 13 11 10 .. #>  $ true_wins          : int  11 11 7 4 13 11 10 .. #>  $ losses             : int  6 6 10 13 4 6 7 8 7.. #>  $ ties               : int  0 0 0 0 0 0 0 0 0 0.. #>  $ pf                 : int  451 496 268 236 483.. #>  $ pa                 : int  311 391 355 366 280.. #>  $ pd                 : int  140 105 -87 -130 20.. #>  $ win_pct            : num  0.647 0.647 0.412 0.. #>  $ div_pct            : num  0.667 0.667 0.333 0.. #>  $ conf_pct           : num  0.583 0.583 0.333 0.. #>  $ sov                : num  0.471 0.358 0.454 0.. #>  $ sos                : num  0.471 0.45 0.502 0... #>  $ div_rank           : int  1 2 3 4 1 2 3 4 1 2.. #>  $ div_tie_broken_by  : chr  \"Head-To-Head Win \".. #>  $ conf_rank          : int  2 6 13 16 1 5 7 8 4.. #>  $ conf_tie_broken_by : chr  \"Head-To-Head Swee\".. #>  $ exit               : chr  \"DIV\" \"WC\" \"REG\" \"\".. #>  $ draft_rank         : int  28 21 10 3 30 23 20.. #>  $ draft_tie_broken_by: chr  NA NA NA NA ... #>  - attr(*, \".internal.selfref\")=<externalptr> # It doesn't allow more than one season s <- standings[season == 2024] nflseedR::nfl_standings_prettify(s) nflseedR::nfl_standings_prettify(s, grp_by = \"nfl\", order_by = \"draft_rank\")"},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"simulations","dir":"Articles","previous_headings":"Usage","what":"Simulations","title":"Get started with nflseedR","text":"nflseedR 2.0, rethought implemented execution simulations scratch. Particular attention paid flexibility performance. usage new function nfl_simulations() differs old function simulate_nfl(), keep variants time maintain two separate articles explaining use . strongly recommended switch nfl_simulations() far superior old implementation practically every respect, especially terms performance. Go article detailed explanation use nfl_simulations() Go article detailed explanation use simulate_nfl()","code":""},{"path":"https://nflseedr.com/articles/nflsim.html","id":"running-a-simulation","dir":"Articles","previous_headings":"","what":"Running a Simulation","title":"Simulating NFL seasons using nflseedR","text":"Loading package obligatory, done first (along dplyr data wrangling pipe): Note: guide, ’ll set initial random seed 4 beginning simulations = 100 purposes document can follow along entering code get results shown . ’ll also set fresh_season = TRUE blank existing results 2020 season, normally simulating incomplete season, wouldn’t things. output contains lot pre-aggregated information, well individual results game simulation. example, let’s look overall results Bears: can see Bears got 10.8 wins average. made playoffs 87% simulations, won division 39%, won Super Bowl 4%, 1% receive top five draft pick. teams section output show team simulated season. Let’s check playoff games first simulation, Bears went 10-6 got 6th seed. simulation, Bears beat Rams wildcard game 26 points, beat Cowboys divisional round 11 points, took Eagles field goal NFC Championship Game, finally defeated Patriots 6 Super Bowl. may gathered point, default simulation code picks random Elo every team, uses starting Elo ratings 32 teams. However, default code Elo adjust independently within simulation week simulated. (Elo model used loosely based FiveThirtyEight.)","code":"library(nflseedR) library(dplyr, warn.conflicts = FALSE) options(digits = 3) set.seed(4) sims <- simulate_nfl(   nfl_season = 2020,   fresh_season = TRUE,   simulations = 100 ) #> ℹ 20:35:43 | Loading games data #> ℹ 20:35:44 | Beginning simulation of 100 seasons in 1 round #> ℹ 20:35:57 | Combining simulation data #> ℹ 20:35:57 | Aggregating across simulations #> ℹ 20:35:57 | DONE! sims$overall |> dplyr::filter(team == \"CHI\") |> knitr::kable() sims$teams |>   dplyr::filter(team == \"CHI\") |>   dplyr::select(sim, team, wins, seed, draft_order) |>    utils::head(6) |>   knitr::kable() sims$games |> dplyr::filter(sim == 1, game_type != \"REG\") |> knitr::kable()"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"use-your-own-model","dir":"Articles","previous_headings":"Running a Simulation","what":"Use Your Own Model","title":"Simulating NFL seasons using nflseedR","text":"course real value nflseedR putting model simulator. accomplish , can write function determine output games instead. example, ’s stupid model makes team earlier alphabetically win 3 points 90% time, lose 3 points 10% time. create function, first two inputs data teams (one row per team per sim), data games (one row per game per sim). third argument week number currently simulated, one week processed time. function’s job - whatever means choose - update result column week’s games sims number points home team won (lost negative, 0 game ended tie). returns teams games data. way can store information new columns team game use next call. Make sure code accepts returns appropriate information, simulator break! example, default function updates team’s Elo game, stores teams data. simulator processes next week, uses updated Elo rating inform team’s next game. !! Also, make sure aren’t overriding completed games games aren’t current week w. simulator stop setting past, present, future game results function, whether meant . !! Let’s run simulation stupid_games_model see happens: might expect, earliest alphabetical teams win lot. Cardinals won Super Bowl 59% seasons! Meanwhile, teams bottom alphabetically virtually certain top draft order.","code":"stupid_games_model <- function(teams, games, week_num, ...) {   # make the earlier alphabetical team win 90% of the time   games <- games |>     dplyr::mutate(       result = dplyr::case_when(         !is.na(result) | week != week_num ~ result,         away_team < home_team ~ sample(c(-3, 3), n(), prob = c(0.9, 0.1), replace = TRUE),         away_team > home_team ~ sample(c(-3, 3), n(), prob = c(0.1, 0.9), replace = TRUE),         TRUE ~ 0       )     )      # return values   return(list(teams = teams, games = games)) } sims2 <- simulate_nfl(   nfl_season = 2020,   process_games = stupid_games_model,   fresh_season = TRUE,   simulations = 100 ) #> ℹ 20:35:58 | Loading games data #> ℹ 20:35:58 | Beginning simulation of 100 seasons in 1 round #> ℹ 20:36:09 | Combining simulation data #> ℹ 20:36:09 | Aggregating across simulations #> ℹ 20:36:09 | DONE!  sims2$overall |> dplyr::arrange(team) |> utils::head() |> knitr::kable() sims2$overall |> dplyr::arrange(team) |> utils::tail() |> knitr::kable()"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"adding-in-your-own-data","dir":"Articles","previous_headings":"Running a Simulation","what":"Adding In Your Own Data","title":"Simulating NFL seasons using nflseedR","text":"well good, might thinking, model works data simulator! can work? utilize R’s ability generic arguments. ... end function definition means function can called number additional arguments. can name whatever want, long ’re already name defined arguments. call simulate_nfl() function, uses ... syntax, allows pass number additional arguments function. simulator turn pass function processes games. example, let’s slightly modify last example: allows us define best worst, use information determine result (case, best team always win worst team always lose). best worst example single-length character vectors, can data frames R data type. Let’s simulate using : Now let nflseedR summarize simulation using summary() nflseedR simulation object. print gt table. shows exactly expect. defining Bears best team, always go 16-0, win division, win Super Bowl. Interestingly, always get #1 seed. makes sense, however, games without Bears Packers, alphabetically earlier teams still wins 90% time. Cardinals therefore expected go 16-0 simulations, thee tiebreakers Bears. However, even simulations, ’ll still lose Bears end meet playoffs. Similarly, Packers always go 0-16, never make playoffs. simulated seasons got #1 draft pick every time, aren’t guaranteed . Using logic , sometimes Washington Commanders go 0-16 , may beat Packers #1 pick tiebreakers.","code":"biased_games_model <- function(teams, games, week_num, ...) {      # arguments   args <- list(...)   best <- \"\"   worst <- \"\"      # best team?   if (\"best\" %in% names(args)) {     best <- args$best   }      # worst team?   if (\"worst\" %in% names(args)) {     worst <- args$worst   }    # make the best team always win and the worst team always lose   # otherwise, make the earlier alphabetical team win 90% of the time   games <- games |>     dplyr::mutate(       result = dplyr::case_when(         !is.na(result) | week != week_num ~ result,         away_team == best | home_team == worst ~ -3,         away_team == worst | home_team == best ~ 3,         away_team < home_team ~ sample(c(-3, 3), n(), prob = c(0.9, 0.1), replace = TRUE),         away_team > home_team ~ sample(c(-3, 3), n(), prob = c(0.1, 0.9), replace = TRUE),         TRUE ~ 0       )     )      # return values   return(list(teams = teams, games = games)) } sims3 <- simulate_nfl(   nfl_season = 2020,   process_games = biased_games_model,    fresh_season = TRUE,    simulations = 100,   best = \"CHI\",    worst = \"GB\" ) #> ℹ 20:36:09 | Loading games data #> ℹ 20:36:09 | Beginning simulation of 100 seasons in 1 round #> ℹ 20:36:21 | Combining simulation data #> ℹ 20:36:21 | Aggregating across simulations #> ℹ 20:36:21 | DONE! summary(sims3)"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"passing-data-in-from-one-week-to-the-next","dir":"Articles","previous_headings":"Running a Simulation","what":"Passing Data in from One Week to the Next","title":"Simulating NFL seasons using nflseedR","text":"Sometimes though want data keep updating simulation progresses. example, Elo-based model updates team’s Elo game. can pass starting Elo values per team, games simulated, update Elo values team store teams data. column part teams data passed function following week simulated function called. Read comments code specific tips good ones: can add columns teams /games want. joins , left joins make sure rows removed. Remove “helper” columns generate along way don’t actually need returning. Make sure column doesn’t get blindly joined .x .y versions Week 2 R throws error expected column name doesn’t exist. Make sure update games .na(result) & week == week_num! don’t want override completed games, games week current week simulated. Let’s generate initial random Elo values team. see works, ’ll supply test_week = 3 argument simulate_nfl() abort simulating Week 3, instead return result elo_model() function. Let’s look Bears’ Elo Week 3 top handful simulations: can see different simulations different Elo results Bears, simulated seasons different results games, Elos adjusted accordingly. Let’s examine Bears’ games first simulation: Note first three weeks result filled , others NA, indicating game hasn’t yet occurred simulated. test_week = 3 input aborted simulation Week 3, useful seeing Elo .","code":"elo_model <- function(teams, games, week_num, ...) {    # round out (away from zero)   # this way the simulator never simulates a tie   # the simulator will still allow ties to be simulated if you want   # ... but not on playoff games   round_out <- function(x) {     x[!is.na(x) & x < 0] <- floor(x[!is.na(x) & x < 0])     x[!is.na(x) & x > 0] <- ceiling(x[!is.na(x) & x > 0])     return(x)   }    # we're going to store elo as a new columns in the teams data   # it won't start off there of course, so we need to determine it   # from our arguments   if (!(\"elo\" %in% colnames(teams))) {     args <- list(...)     if (\"elo\" %in% names(args)) {       # pull the elo info from custom arguments       teams <- teams |>         dplyr::inner_join(args$elo |> dplyr::select(team, elo), by = c(\"team\" = \"team\"))     } else {       # error with a friendly error message if no elo data is passed in       stop(\"Pass in a tibble `elo` as an argument to `simulate_nfl()`\")     }   }    # isolate the ratings data by sim and by team only   # we will want to join to the games data later and don't want excess columns   ratings <- teams |> dplyr::select(sim, team, elo)    # simulate game outcomes   games <- games |>     # add in the away team's elo to the game data     # note we join on both `sim` and the team     # always join on `sim` to make sure each sim cares about only its data     dplyr::inner_join(ratings, by = c(\"sim\" = \"sim\", \"away_team\" = \"team\")) |>     dplyr::rename(away_elo = elo) |>     # repeat for the home team as well     dplyr::inner_join(ratings, by = c(\"sim\" = \"sim\", \"home_team\" = \"team\")) |>     dplyr::rename(home_elo = elo) |>     dplyr::mutate(       # calculate the elo difference       elo_diff = home_elo - away_elo,       # add in a small HFA amount if played at home       elo_diff = elo_diff + ifelse(location == \"Home\", 20, 0),       # make an adjustment for rest       elo_diff = elo_diff + (home_rest - away_rest) / 7 * 25,       # playoff games swing elo more       elo_diff = elo_diff * ifelse(game_type == \"REG\", 1, 1.2),       # from elo, we calculate the home team's win percentage       wp = 1 / (10^(-elo_diff / 400) + 1),       # we also can calculate the estimate (mean points home team wins by)       estimate = elo_diff / 25,       result = dplyr::case_when(         # !!! ALWAYS DO THIS NEXT LINE IN YOUR `result` CHANGES !!!         # you have to make sure you're only changing unfinished games in current week         # if you don't do this, it will usually error out on a friendly error message         is.na(result) & week == week_num ~            as.integer(round_out(rnorm(n(), estimate, 13))),         # if not this week or known result, leave as-is         TRUE ~ as.integer(result)       ),       # simplify to 1 = win, 0 = loss, 0.5 = tie to help calculate elo shift       outcome = dplyr::case_when(         is.na(result) ~ NA_real_,         result > 0 ~ 1,         result < 0 ~ 0,         TRUE ~ 0.5       ),       # calculate the amount to adjust home team's elo by       elo_input = dplyr::case_when(         is.na(result) ~ NA_real_,         result > 0 ~ elo_diff * 0.001 + 2.2,         result < 0 ~ -elo_diff * 0.001 + 2.2,         TRUE ~ 1.0,       ),       elo_mult = log(pmax(abs(result), 1) + 1.0) * 2.2 / elo_input,       elo_shift = 20 * elo_mult * (outcome - wp)     ) |>     # we don't want these columns in `games` any more     # remove any columns you don't need when you're done     # otherwise the next week they'll get joined as `col.x` and `col.y`     # which will almost certainly break your script     dplyr::select(       -away_elo, -home_elo, -elo_diff, -wp, -estimate,       -outcome, -elo_input, -elo_mult     )    # apply elo shifts   teams <- teams |>     # join games results from this week to away teams (within same sim!)     # note this is a LEFT join, we don't want to remove any teams rows     dplyr::left_join(games |>         dplyr::filter(week == week_num) |>         dplyr::select(sim, away_team, elo_shift),       by = c(\"sim\" = \"sim\", \"team\" = \"away_team\")     ) |>     # away team's elo gets subtracted by elo amount     # if the team wasn't an away team, do nothing     dplyr::mutate(elo = elo - ifelse(!is.na(elo_shift), elo_shift, 0)) |>     # we don't want to keep `elo_shift` in `teams` either, remove it     dplyr::select(-elo_shift) |>     # repeat the above except now do it for the home team     dplyr::left_join(games |>         dplyr::filter(week == week_num) |>         dplyr::select(sim, home_team, elo_shift),       by = c(\"sim\" = \"sim\", \"team\" = \"home_team\")     ) |>     # note that a team on a bye will have `elo_shift` as NA for both joins     # this means it won't change, which is what we want     dplyr::mutate(elo = elo + ifelse(!is.na(elo_shift), elo_shift, 0)) |>     dplyr::select(-elo_shift)    # we need to keep `elo_shift` out of `games` too and we're done with it   games <- games |>     dplyr::select(-elo_shift)    # return the updated teams and games information   # note that `teams` will now have an updated `elo` column which will   # be used for the next week's games   # note that starting `elo` values are the same per-team...    # ... but after that will differ per sim depending on that sim's results   return(list(teams = teams, games = games)) } initial_elo <- tibble::tibble(   team = unique(nflseedR::divisions$team),   elo = rnorm(length(unique(nflseedR::divisions$team)), 1500, 150) ) test <- simulate_nfl(   nfl_season = 2020,   process_games = elo_model,   elo = initial_elo,   fresh_season = TRUE,   test_week = 3 ) #> ℹ 20:36:22 | Loading games data #> ℹ 20:36:22 | Beginning simulation of 1000 seasons in 1 round #> ℹ 20:36:23 | Aborting and returning your `process_games` function's results #> from Week 3 test$teams |>   dplyr::filter(team == \"CHI\") |>   utils::head() |>   knitr::kable() test$games |>   filter(sim == 1) |>   filter(away_team == \"CHI\" | home_team == \"CHI\") #> ── nflverse games and schedules ──────────────────────────────────────────────── #> ℹ Data updated: 2025-03-25 20:36:22 UTC #> # A tibble: 16 × 9 #>      sim game_type  week away_team home_team away_rest home_rest location result #>    <dbl> <chr>     <int> <chr>     <chr>         <int>     <int> <chr>     <int> #>  1     1 REG           1 CHI       DET               7         7 Home         13 #>  2     1 REG           2 NYG       CHI               6         7 Home         18 #>  3     1 REG           3 CHI       ATL               7         7 Home         -1 #>  4     1 REG           4 IND       CHI               7         7 Home         NA #>  5     1 REG           5 TB        CHI               4         4 Home         NA #>  6     1 REG           6 CHI       CAR              10         7 Home         NA #>  7     1 REG           7 CHI       LA                8         8 Home         NA #>  8     1 REG           8 NO        CHI               7         6 Home         NA #>  9     1 REG           9 CHI       TEN               7         7 Home         NA #> 10     1 REG          10 MIN       CHI               8         8 Home         NA #> 11     1 REG          12 CHI       GB               13         7 Home         NA #> 12     1 REG          13 DET       CHI              10         7 Home         NA #> 13     1 REG          14 HOU       CHI               7         7 Home         NA #> 14     1 REG          15 CHI       MIN               7         7 Home         NA #> 15     1 REG          16 CHI       JAX               7         7 Home         NA #> 16     1 REG          17 GB        CHI               7         7 Home         NA"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"simulation-configuration","dir":"Articles","previous_headings":"Running a Simulation","what":"Simulation Configuration","title":"Simulating NFL seasons using nflseedR","text":"lot flexibility choose run simulation. parameters configure run simulate_nfl() function. nfl_season - NFL season simulating? default, simulates recent season regular season schedule available Lee Sharpe’s NFL game data. earliest season can simulate 2002. Note: schedule new season released, nflseedR may support simulating using fake schedule upcoming season. notify . opponents correct, weeks games occur match actual NFL schedule. actual schedule utilized instead released NFL. process_games - supply function ’ve written encompass model used determine simulated games results, like examples . default, generate random Elo every team per round simulations, use determine game data. playoff_seeds - many playoff seeds per conference used? default, 7 seasons 2020 later, 6 earlier seasons. if_ended_today - used running middle regular season. take completed games done, remove rest regular season games schedule, begin playoffs everything locked based regular season data exists far. fresh_season - ’ll see set TRUE examples . setting deletes playoff games clears results regular season games, everything generated fresh. default FALSE games completed real life treated locked , instead remaining games simulated. fresh_playoffs - Similar fresh_season, except instead set TRUE, regular season results remain playoff games deleted simulated. default FALSE case playoff games completed accepted occurred, 1: teams record ties broken randomly. 2: Instead evaluating common games step reached, break ties randomly. earlier tiebreakers handled correctly. 3: default. tiebreakers handled strength schedule processed (strength victory draft pick order). unlikely event tie, broken randomly. test_week - abort simulating week number simulator. simulate_nfl() instead return output process_games() function. useful input debugging code, left NULL (default) actual simulations. also means first round simulated. simulations - many simulations run? Defaults 1000. sims_per_round - simulator can break things chunks simulated seasons, process chunk (called round), aggregate everything together end. default value determines number locally available cores calculates number simulations per round equal half available cores (various benchmarks showed results optimal performance parallel processes). computer hanging forces restart running simulation, recommended lower number.","code":""},{"path":"https://nflseedr.com/articles/nflsim.html","id":"simulation-output","dir":"Articles","previous_headings":"Running a Simulation","what":"Simulation Output","title":"Simulating NFL seasons using nflseedR","text":"output simulate_nfl(), assuming don’t put test_week debug function, list class \"nflseedR_simulation\" holds four data frames simulation results well list parameters used simulation. contents : sim - ID number simulation. rows value sim teams games refer simulated season. team - abbreviation representing team conf - conference team (AFC) division - division team (NFC West) games - many regular season games team played wins - number games team won, counting ties 0.5 wins true_wins - number games team won, ignoring ties. win_pct - win rate team. Equal wins / games. div_pct - win rate teams games played teams division. conf_pct - win rate teams games played teams conference. sov - Strength Victory. combined win rate teams team beaten. sos - Strength Schedule. combined win rate teams team played. div_rank - place team finished division. seed - playoff seed number team earned. NA team make playoffs. exit - week team’s last game. Super Bowl winner’s value one higher week Super Bowl. draft_order - pick team earned following NFL Draft. Note value trades, forfeits, modifications draft picks. sim - ID number simulation. rows value sim teams games refer simulated season. REG - regular season game POST - playoff rounds earlier wildcard game (used simulating lots playoff teams) WC - wildcard playoff game DIV - divisional playoff game CON - conference championship game SB - Super Bowl week - numerical week game takes place . Continues incrementing regular season playoff round. away_team - abbreviation away team game home_team - abbreviation home team game away_rest - number days since away team’s last game. 7 team’s first game season. home_rest - number days since home team’s last game. 7 team’s first game season. location - Either Home played home team’s stadium, Neutral game played elsewhere result - amount points home team won (lost negative). 0 tied games. NA games aren’t yet complete simulated, ever returned used test_week. conf - conference team (AFC) division - division team (NFC West) team - abbreviation representing team wins - mean (average) number games won across simulations, counting ties 0.5 wins playoff - rate team made playoffs across simulations div1 - rate team won division across simulations seed1 - rate team first playoff seed across simulations won_conf - rate team won conference across simulations won_sb - rate team won Super Bowl across simulations draft1 - rate team received first pick next draft across simulations draft5 - rate team received top five pick next draft across simulations team - abbreviation representing team wins - number wins (either integer halfway two integers) over_prob - rate team wins number aggregated across simulations. Ties ignored. under_prob - rate team fewer wins number aggregated across simulations. Ties ignored. Note wins integer, 1-over_prob-under_prob represents rate team finished exactly many wins. REG - regular season game POST - playoff rounds earlier wildcard game (used simulating lots playoff teams) WC - wildcard playoff game DIV - divisional playoff game CON - conference championship game SB - Super Bowl week - numerical week game takes place . Continues incrementing regular season playoff round. away_team - abbreviation away team game home_team - abbreviation home team game away_wins - number times away team won game home_wins - number times home team won game ties - number times game ended tie result - amount points home team won (lost negative) average across simulations games_played - number times game played. game_type == \"REG\" equal number simulations. number playoff matchups differ. away_percentage - rate away team won game counting ties half win home_percentage - rate home team won game counting ties half win nfl_season playoff_seeds if_ended_today fresh_season fresh_playoffs tiebreaker_depth test_week simulations sims_per_round .debug print_summary","code":""},{"path":"https://nflseedr.com/articles/nflsim2.html","id":"function-api","dir":"Articles","previous_headings":"","what":"Function API","title":"Simulating NFL seasons using nflseedR 2.0","text":"detailed documentation function parameters can found directly function help page (click nfl_simulations()). section explains big picture. core, nflseedR requires 2 things run NFL simulations. games season missing results simulated. function compute_results games. Simulations performed weekly basis. reason Elo-based approaches proven successful NFL simulations. requires updating Elo values based one week’s results using new values next week’s simulation. nflseedR provides default function compute_results named nflseedR_compute_results simulator functional right start. provided user (’ll discuss later), function picks random Elo every team, uses starting Elo ratings teams. adjust Elo ratings within simulation week simulated. (Elo model used loosely based FiveThirtyEight.)","code":""},{"path":"https://nflseedr.com/articles/nflsim2.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick Start","title":"Simulating NFL seasons using nflseedR 2.0","text":"Let’s quick run-look output. first step use nflseedR’s compute_result function let function compute random Elo values beginning simulation. case, need list games. also example demonstration purposes. now invoke . example entire 2022 NFL regular season random results removed. Now use list games let nflseedR simulate missing results. regular season , determines playoff participants simulates playoffs. example, choose 4 simulations 2 chunks. course, 4 simulations realistic number. Commonly 10k simulations performed, author strongly recommends 10k simulations carried . least 25k, better 50k. Due efficiency new simulator, longer problem. take closer look contents simulation, first use example next section get overview output nflseedR simulation.","code":"all_games <- nflseedR::sims_games_example |> dplyr::filter(game_type == \"REG\") DT::datatable(all_games) sims <- nflseedR::nfl_simulations(   games = all_games,   simulations = 4,   chunks = 2 ) #> ℹ 20:38:11 | Start simulation of 4 seasons in 2 chunks with a chunk size of 2. #> ℹ 20:38:11 | CHUNK #1: Start simulation of regular season weeks \"1\", \"2\", \"3\", #> …, \"17\", and \"18\" #> ℹ 20:38:11 | Initiate Standings & Tiebreaking Data #> ℹ 20:38:11 | Compute Division Ranks #> ℹ 20:38:11 | Compute Conference Ranks #> ℹ 20:38:12 | CHUNK #1: Start simulation of post season weeks \"WC\", \"DIV\", #> \"CON\", and \"SB\" #> ℹ 20:38:12 | Compute Draft Order #> ℹ 20:38:11 | CHUNK #2: Start simulation of regular season weeks \"1\", \"2\", \"3\", #> …, \"17\", and \"18\" #> ℹ 20:38:11 | Initiate Standings & Tiebreaking Data #> ℹ 20:38:11 | Compute Division Ranks #> ℹ 20:38:12 | Compute Conference Ranks #> ℹ 20:38:12 | CHUNK #2: Start simulation of post season weeks \"WC\", \"DIV\", #> \"CON\", and \"SB\" #> ℹ 20:38:12 | Compute Draft Order #> ℹ 20:38:12 | Combine simulation data #> ℹ 20:38:12 | Aggregate across simulations #> ℹ 20:38:12 | DONE!"},{"path":"https://nflseedr.com/articles/nflsim2.html","id":"simulation-output","dir":"Articles","previous_headings":"","what":"Simulation Output","title":"Simulating NFL seasons using nflseedR 2.0","text":"output nfl_simulations() list class \"nflseedR_simulation\" holds five data frames simulation results well list parameters used simulation. contents : One row per team per simulation. Variable names descriptions provided table . One row per game per simulation. Variable names descriptions provided table . One row per team, aggregated across simulations. Sorted conf division team. good reference looking futures bets, since represent model’s chances various things happening team. Variable names descriptions provided table . team row 0 wins, 0.5 wins, 1 win, 1.5 wins, … , 15.5 wins, 16 wins. aggregated across simulations intending represent model’s probability teams certain win total, making excellent reference using model make win total bets. Variable names descriptions provided table . One row per game, aggregated across simulations. Sorted game_type week away_team home_team. Variable names descriptions provided table . list parameters used simulation. list contains following parameters described nfl_simulations() nfl_season playoff_seeds simulations chunks byes_per_conf tiebreaker_depth sim_include verbosity sims_per_round nflseedR_version finished_at","code":""},{"path":"https://nflseedr.com/articles/nflsim2.html","id":"realistic-example","dir":"Articles","previous_headings":"","what":"Realistic Example","title":"Simulating NFL seasons using nflseedR 2.0","text":"quick start example , simulated games 2022 season based randomly generated Elo values. Now let’s run slightly realistic example. time simulate complete 2024 season use market implied team ratings. First , need games. load 2024 season remove postseason, want simulate postseason well. also remove results nflseedR simulates missing results. Now need team ratings. following table shows market implied team spreads. August 2024 based look-ahead point spreads various sports books time just 2024 season started. number represents points corresponding team favored average team neutral field. use simple approach convert spreads Elo ratings. default compute_results function expects team ratings named vector. games Elo ratings going season. can now use simulate, choose 50k simulations turn user messaging verbosity argument maximum speed. Don’t afraid 50k simulations. time writing, code chunk takes less 90 seconds run 2022 MacBook Air M2 chip. Please pay attention pass team ratings simulation. function nfl_simulations() provides dots ... function argument. can pass R object argument dots long argument named. compute_results function search dots objects need. default function exactly . searches object named elo, object exists, values used initial Elo values updated week week. details can found source code function nflseedR_compute_results (see next chunk). output contains lot pre-aggregated information, well individual results game simulation. example, let’s look overall results Chargers: can see Chargers got 8.6 wins average. made playoffs 42% simulations, won division 22%, won Super Bowl 2%, 15% receive top five draft pick. teams section output show team simulated season. Now let nflseedR summarize simulation using summary() nflseedR simulation object. print gt table.","code":"games <- nflreadr::load_schedules(2024) |>    dplyr::filter(game_type == \"REG\") |>    dplyr::mutate(     result = NA_integer_,     away_score = NA_integer_,     home_score = NA_integer_   ) #>  ARI  ATL  BAL  BUF  CAR  CHI  CIN  CLE  DAL  DEN  DET   GB  HOU  IND  JAX   KC  #> -2.4  0.0  3.9  2.1 -5.0 -0.2  2.9  1.1  2.1 -4.0  2.6  1.8  1.8 -0.6  0.1  4.5  #>   LA  LAC   LV  MIA  MIN   NE   NO  NYG  NYJ  PHI  PIT  SEA   SF   TB  TEN  WAS  #>  0.9 -0.7 -2.7  1.6 -2.1 -4.5 -2.2 -3.5  2.1  2.0 -0.6 -1.5  5.2 -1.8 -3.2 -3.2 team_ratings$elo <- 1500 + 25 * team_ratings$spread team_ratings <- setNames(team_ratings$elo, team_ratings$team) print(team_ratings) #>  ARI  ATL  BAL  BUF  CAR  CHI  CIN  CLE  DAL  DEN  DET   GB  HOU  IND  JAX   KC  #> 1440 1500 1598 1552 1375 1495 1572 1528 1552 1400 1565 1545 1545 1485 1502 1612  #>   LA  LAC   LV  MIA  MIN   NE   NO  NYG  NYJ  PHI  PIT  SEA   SF   TB  TEN  WAS  #> 1522 1482 1432 1540 1448 1388 1445 1412 1552 1550 1485 1462 1630 1455 1420 1420 # We set a seed for reproducible results # Please see section \"Reproducible Random Number Generation (RNG)\" in the  # help page of nfl_simulations for more details on the seed type \"L'Ecuyer-CMRG\" set.seed(5, \"L'Ecuyer-CMRG\")  sims <- nflseedR::nfl_simulations(   games = games,   elo = team_ratings,   simulations = 50000,   chunks = 20,   verbosity = \"NONE\" ) #> ℹ 20:38:13 | Start simulation of 50 000 seasons in 20 chunks with a chunk size of 2 500. #> ℹ 20:42:55 | DONE! #> This is the source code of `nflseedR_compute_results`.  #> Note that it is written in data.table for maximum performance and  #> consistency with the rest of the simulation code.  #> You are not required to write your own function in data.table. #> function(teams, games, week_num, ...) { #>   # this example estimates at PK/0 and 50% #>   # estimate = is the median spread expected (positive = home team favored) #>   # wp = is the probability of the team winning the game #>   # #>   # only simulate games through week week_num #>   # only simulate games with is.na(result) #>   # result = how many points home team won by #>   # round out (away from zero) #>   round_out <- function(x) { #>     x <- x[!is.na(x)] #>     x[x < 0] <- floor(  x[x < 0]) #>     x[x > 0] <- ceiling(x[x > 0]) #>     as.integer(x) #>   } #>   if (!data.table::is.data.table(games)) data.table::setDT(games) #>   if (!data.table::is.data.table(teams)) data.table::setDT(teams) #>   games_indices <- data.table::indices(games) #>   if (is.null(games_indices) || !\"week\" %chin% games_indices){ #>     data.table::setindexv(games, c(\"week\", \"location\", \"game_type\")) #>   } #>   # get elo if not in teams data already #>   # elo is expected to be a named vector of elo ratings where #>   # names are NFL team abbreviations #>   if (!\"elo\" %chin% colnames(teams)) { #>     # Query arguments in dots and see if elo is in there #>     # if not, set it to random values #>     args <- list(...) #>     if (\"elo\" %chin% names(args)) { #>       # pull from custom arguments #>       ratings <- args$elo #>       teams[, elo := ratings[team]] #>     } else { #>       # if custom elo is missing in dots, start everyone at a random elo #>       ratings <- setNames( #>         rnorm(length(unique(teams$team)), 1500, 150), #>         unique(teams$team) #>       ) #>       teams[, elo := ratings[team]] #>     } #>   } #>   # At this point, there is a column named \"elo\" in the teams data #>   # We use that column to create a elo lookup vector that we use to #>   # add those elo ratings to home and away teams in the games data #>   # Names of that vector are built off sim and team to make sure #>   # we don't mix elo values of one team across simulations #>   ratings <- teams[, setNames(elo, paste(sim, team, sep = \"-\"))] #>   # fill elo values of home and away teams #>   games[list(week_num), away_elo := ratings[paste(sim, away_team, sep = \"-\")], on = \"week\"] #>   games[list(week_num), home_elo := ratings[paste(sim, home_team, sep = \"-\")], on = \"week\"] #>   # create elo diff #>   games[list(week_num), elo_diff := home_elo - away_elo + (home_rest - away_rest) / 7 * 25, on = \"week\"] #>   # adjust elo diff for location = HOME #>   games[list(week_num, \"Home\"), elo_diff := elo_diff + 20, on = c(\"week\", \"location\")] #>   # adjust elo_diff for postseason game types #>   games[list(week_num, c(\"WC\", \"DIV\", \"CON\", \"SB\")), elo_diff := elo_diff * 1.2, on = c(\"week\", \"game_type\")] #>   # create wp and estimate #>   games[list(week_num), `:=`(wp = 1 / (10^(-elo_diff / 400) + 1), #>                        estimate = elo_diff / 25), on = \"week\"] #>   # adjust result in current week #>   games[list(week_num) == week & is.na(result), #>         result := round_out(rnorm(.N, estimate, 13))] #>   # compute elo shift #>   games[list(week_num), `:=`( #>     outcome = data.table::fcase( #>       is.na(result), NA_real_, #>       result > 0, 1, #>       result < 0, 0, #>       default = 0.5 #>     ), #>     elo_input = data.table::fcase( #>       is.na(result), NA_real_, #>       result > 0, elo_diff * 0.001 + 2.2, #>       result < 0, -elo_diff * 0.001 + 2.2, #>       default = 1.0 #>     ) #>   ), on = \"week\"] #>   games[list(week_num), elo_mult := log(pmax(abs(result), 1) + 1.0) * 2.2 / elo_input, on = \"week\"] #>   games[list(week_num), elo_shift := 20 * elo_mult * (outcome - wp), on = \"week\"] #>   # Build elo_shift vector based on results if home and away teams #>   elo_change_away <- games[list(week_num), setNames(-elo_shift, paste(sim, away_team, sep = \"-\")), on = \"week\"] #>   elo_change_home <- games[list(week_num), setNames(elo_shift,  paste(sim, home_team, sep = \"-\")), on = \"week\"] #>   elo_change <- c(elo_change_away, elo_change_home) #>   # drop helper columns #>   drop_cols <- c(\"away_elo\", \"home_elo\", \"elo_diff\", \"wp\", \"estimate\", #>                  \"outcome\", \"elo_input\", \"elo_mult\", \"elo_shift\") #>   games[, (drop_cols) := NULL] #>   # apply elo shift in teams data to transport new elo values to next week #>   teams[, elo_shift := elo_change[paste(sim, team, sep = \"-\")]] #>   # teams that didn't play that week are missing in elo_change. Their shift #>   # value will be NA. We set it to 0 to be able to add the shift for all teams #>   teams[, elo_shift := data.table::fifelse(is.na(elo_shift), 0, elo_shift)] #>   teams[, elo := elo + elo_shift] #>   # remove the shift variable for this round #>   teams[, elo_shift := NULL] #>   list(\"teams\" = teams, \"games\" = games) #> } sims$overall |> dplyr::filter(team == \"LAC\") |> knitr::kable() summary(sims)"},{"path":[]},{"path":"https://nflseedr.com/articles/nflsim2.html","id":"user-defined-compute_results","dir":"Articles","previous_headings":"Use Your Own Model","what":"User-defined compute_results","title":"Simulating NFL seasons using nflseedR 2.0","text":"course real value nflseedR putting model simulator. accomplish , can write compute_results function determine outcome games instead. Now gets important: nflseedR use function simulations without checks. reason want maximum performance tests slow us . addition, repeated checks necessary checked advance function works nflseedR expects . exactly simulations_verify_fct() . want use compute_results function, need check works advance simulations_verify_fct(). errors, function works exactly nflseedR needs simulate. Please see documentation simulations_verify_fct() detailed description expected compute_results behavior. example custom compute_results function, ’s stupid model makes team earlier alphabetically win 3 points 90% time, lose 3 points 10% time. create function, first two inputs data teams (one row per team per sim), data games (one row per game per sim). third argument week number currently simulated, one week processed time. function’s job - whatever means choose - update result column week’s games sims number points home team won (lost negative, 0 game ended tie). returns teams games data. way can store information new columns team game use next call. example, default function updates team’s Elo game, stores teams data. simulator processes next week, uses updated Elo rating inform team’s next game. can verify function works required Let’s run simulation stupid_games_model see happens: might expect, earliest alphabetical teams win lot. Cardinals won Super Bowl 67% seasons! Meanwhile, teams bottom alphabetically virtually certain top draft order Commanders picking 1st overall 35% seasons.","code":"stupid_games_model <- function(teams, games, week_num, ...) {   # make the earlier alphabetical team win 90% of the time   games <- games |>      dplyr::mutate(       result = dplyr::case_when(         !is.na(result) | week != week_num ~ result,         away_team < home_team ~           sample(c(-3, 3), dplyr::n(), prob = c(0.9, 0.1), replace = TRUE),         away_team > home_team ~           sample(c(-3, 3), dplyr::n(), prob = c(0.1, 0.9), replace = TRUE),         TRUE ~ 0       )     )    # return values   list(teams = teams, games = games) } nflseedR::simulations_verify_fct(stupid_games_model) #> ✔ No problems found! sims2 <- nflseedR::nfl_simulations(   games = games,   compute_results = stupid_games_model,   simulations = 500,   chunks = 1,   verbosity = \"NONE\" ) #> ℹ You have provided your own function to `compute_results`, cool! #> ℹ To maximize performance, `nfl_simulations()` does not control the output of #>   your function during the simulation. Please use `simulations_verify_fct()` in #>   advance to ensure that you do not get any unexpected results or errors. #> ℹ 20:42:57 | Start simulation of 500 seasons in 1 chunk with a chunk size of 500. #>  #> ℹ 20:43:03 | DONE! #>  #> This message is displayed once every 8 hours.  sims2$overall |>    dplyr::arrange(team) |>    gt::gt_preview(top_n = 5, bottom_n = 5)"},{"path":"https://nflseedr.com/articles/nflsim2.html","id":"adding-in-your-own-data","dir":"Articles","previous_headings":"Use Your Own Model","what":"Adding In Your Own Data","title":"Simulating NFL seasons using nflseedR 2.0","text":"well good, might thinking, model works data simulator! can work? utilize R’s ability generic arguments. ... function definition means function can called number additional arguments. can name whatever want, long ’re already name defined arguments. call nfl_simulations() function, uses ... syntax, allows pass number additional arguments function. simulator turn pass function processes games. example, let’s slightly modify last example: allows us define best worst, use information determine result (case, best team always win worst team always lose). best worst example single-length character vectors, can data frames R data type. Let’s simulate using : shows exactly expect. defining Bears best team, always go 17-0, win division, win Super Bowl. Similarly, Packers always go 0-17, never make playoffs.","code":"library(rlang) biased_games_model <- function(teams, games, week_num, ...) {      # collect all arguments in dots   args <- list(...)      # if \"best\" or \"worst\" are in dots, assign them to best of worst   # if not, then args$best and args$worst will be NULL and we replace    # them with empty strings   best <- args$best %||% \"\"   worst <- args$worst %||% \"\"    # make the best team always win and the worst team always lose   # otherwise, make the earlier alphabetical team win 90% of the time   games <- games |>     dplyr::mutate(       result = dplyr::case_when(         !is.na(result) | week != week_num ~ result,         away_team == best | home_team == worst ~ -3,         away_team == worst | home_team == best ~ 3,         away_team < home_team ~           sample(c(-3, 3), dplyr::n(), prob = c(0.9, 0.1), replace = TRUE),         away_team > home_team ~           sample(c(-3, 3), dplyr::n(), prob = c(0.1, 0.9), replace = TRUE),         TRUE ~ 0       )     )      # return values   list(teams = teams, games = games) } sims3 <- nflseedR::nfl_simulations(   games = games,   compute_results = biased_games_model,    simulations = 500,   chunks = 1,   best = \"CHI\",    worst = \"GB\",   verbosity = \"NONE\" ) #> ℹ 20:43:03 | Start simulation of 500 seasons in 1 chunk with a chunk size of 500. #> ℹ 20:43:09 | DONE! sims3$overall |>    dplyr::arrange(-wins) |>    gt::gt_preview(top_n = 5, bottom_n = 5)"},{"path":"https://nflseedr.com/articles/nflsim2.html","id":"passing-data-in-from-one-week-to-the-next","dir":"Articles","previous_headings":"Use Your Own Model","what":"Passing Data in from One Week to the Next","title":"Simulating NFL seasons using nflseedR 2.0","text":"Sometimes though want data keep updating simulation progresses. example, Elo-based model nflseedR uses default updates team’s Elo game. can pass starting Elo values per team, games simulated, update Elo values team store teams data. column part teams data passed function following week simulated function called. Read code comments source nflseedR_compute_results specific tips good ones: can add columns teams /games want. joins , left joins make sure rows removed. Remove “helper” columns generate along way don’t actually need returning. Make sure column doesn’t get blindly joined .x .y versions week 2 R throws error expected column name doesn’t exist.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"break-a-tie-within-a-division","dir":"Articles","previous_headings":"","what":"Break a Tie Within a Division","title":"NFL Tiebreaking Procedures","text":"used calculate variable div_rank , end regular season, two clubs division finish identical won-lost-tied percentages, following steps taken champion determined.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"two-clubs","dir":"Articles","previous_headings":"Break a Tie Within a Division","what":"Two Clubs","title":"NFL Tiebreaking Procedures","text":"Head--head (best won-lost-tied percentage games clubs). Best won-lost-tied percentage games played within division. Best won-lost-tied percentage common games. Best won-lost-tied percentage games played within conference. Strength victory games. Strength schedule games Best combined ranking (see Tie-Breaking Procedures) among conference teams points scored points allowed games. Best combined ranking (see Tie-Breaking Procedures) among teams points scored points allowed games. Best net points common games. Best net points games. Best net touchdowns games. Coin toss.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"three-or-more-clubs","dir":"Articles","previous_headings":"Break a Tie Within a Division","what":"Three or More Clubs","title":"NFL Tiebreaking Procedures","text":"two clubs remain tied one clubs eliminated step, tiebreaker restarts Step 1 two-club format. three clubs remain tied fourth club eliminated step, tiebreaker restarts Step 1 three-club format. Head--head (best won-lost-tied percentage games among clubs). Best won-lost-tied percentage games played within division. Best won-lost-tied percentage common games. Best won-lost-tied percentage games played within conference. Strength victory games. Strength schedule games. Best combined ranking (see Tie-Breaking Procedures) among conference teams points scored points allowed games. Best combined ranking (see Tie-Breaking Procedures) among teams points scored points allowed games. Best net points common games. Best net points games. Best net touchdowns games. Coin toss.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"break-a-tie-for-conference-seeds","dir":"Articles","previous_headings":"","what":"Break a Tie for Conference Seeds","title":"NFL Tiebreaking Procedures","text":"used calculate variable conf_rank seven postseason participants conference seeded follows division champion best record. division champion second-best record. division champion third-best record. division champion fourth-best record. wild card club best record. wild card club second-best record. wild card club third-best record. following procedures used break standings ties postseason playoffs determine regular-season schedules. NOTE: Tie games count one-half win one-half loss clubs. necessary break ties determine three Wild Card clubs conference, following steps taken. tied clubs division, apply division tiebreaker. tied clubs different divisions, apply following steps.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"two-clubs-1","dir":"Articles","previous_headings":"Break a Tie for Conference Seeds","what":"Two Clubs","title":"NFL Tiebreaking Procedures","text":"Head--head, applicable. Best won-lost-tied percentage games played within conference. Best won-lost-tied percentage common games, minimum four. Strength victory games. Strength schedule games. Best combined ranking (see Tie-Breaking Procedures) among conference teams points scored points allowed games. Best combined ranking (see Tie-Breaking Procedures) among teams points scored points allowed games. Best net points conference games. Best net points games. Best net touchdowns games. Coin toss.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"three-or-more-clubs-1","dir":"Articles","previous_headings":"Break a Tie for Conference Seeds","what":"Three or More Clubs","title":"NFL Tiebreaking Procedures","text":"two clubs remain tied one clubs eliminated step, tiebreaker restarts Step 1 two-club format. three clubs remain tied fourth club eliminated step, tiebreaker restarts Step 2 three-club format. first Wild Card team identified, procedure repeated name second third Wild Card (.e., eliminate highest-ranked club division prior proceeding Step 2). situations three teams division involved procedure, original seeding teams remains subsequent applications tiebreaker top-ranked team division qualifies Wild Card berth. Apply division tiebreaker eliminate highest ranked club division prior proceeding step 2. original seeding within division upon application division tiebreaker remains subsequent applications procedure necessary identify two[sic!] three Wild-Card participants. Head--head sweep. (Applicable one club defeated others one club lost others.) Best won-lost-tied percentage games played within conference. Best won-lost-tied percentage common games, minimum four. Strength victory games. Strength schedule games. Best combined ranking (see Tie-Breaking Procedures) among conference teams points scored points allowed games. Best combined ranking (see Tie-Breaking Procedures) among teams points scored points allowed games. Best net points conference games. Best net points games. Best net touchdowns games. Coin toss.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"other-tie-breaking-procedures","dir":"Articles","previous_headings":"","what":"Other Tie-Breaking Procedures","title":"NFL Tiebreaking Procedures","text":"one club advances playoffs tie-breaking step. Remaining tied clubs revert first step applicable division Wild Card tie-breakers. example, two clubs remain tied tie-breaker step clubs eliminated, procedure reverts Step 1 two-club format determine winner. one club wins tiebreaker, clubs revert Step 1 applicable two-club three-club format. comparing records common opponents among tied teams, best won-lost-tied percentage deciding factor, since teams may played unequal number games. determine home field priority among division winners, apply Wild Card tiebreakers. determine home field priority Wild Card qualifiers, apply division tiebreakers (teams division) Wild Card tiebreakers (teams different divisions). determine best combined ranking among conference team’s points scored points allowed, add team’s position two categories, lowest score wins. example, Team first points scored second points allowed, combined ranking “3.” Team B third points scored first points allowed, combined ranking “4.” Team wins tiebreaker. two teams tied position, teams awarded ranking held solely. example, Team Team B tied first points scored, team assigned ranking “1” category, Team C third, ranking still “3.”","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"break-a-tie-for-the-draft-selection-meeting","dir":"Articles","previous_headings":"","what":"Break a Tie for the Draft (“Selection Meeting”)","title":"NFL Tiebreaking Procedures","text":"used calculate variable draft_rank order selection determined reverse order finish previous season. Barring trades clubs, round starts team finished worst record ends Super Bowl champions. Picks assigned win percentage ascending order follows: Clubs participating playoffs shall select first 18th positions. losers Wild Card games shall select 19th 24th positions. losers Divisional playoff games shall select 25th 28th positions. losers Conference Championship games shall select 29th 30th. winner Super Bowl game shall select last Super Bowl loser select next--last. situations teams finished previous season identical win percentage, determination draft position decided strength schedule — aggregate winning percentage team’s opponents. team played schedule lowest winning percentage awarded earlier pick. teams strength schedule, division conference tiebreakers applied first.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"divisional-draft-pick-tie","dir":"Articles","previous_headings":"Break a Tie for the Draft (“Selection Meeting”)","what":"Divisional Draft Pick Tie","title":"NFL Tiebreaking Procedures","text":"teams tied pick division, division rank used. lower division rank gets earlier pick.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"conference-draft-pick-tie","dir":"Articles","previous_headings":"Break a Tie for the Draft (“Selection Meeting”)","what":"Conference Draft Pick Tie","title":"NFL Tiebreaking Procedures","text":"teams tied pick conference, conference rank used. lower conference rank gets earlier pick.","code":""},{"path":"https://nflseedr.com/articles/tiebreaker.html","id":"inter-conference-draft-pick-tie","dir":"Articles","previous_headings":"Break a Tie for the Draft (“Selection Meeting”)","what":"Inter-Conference Draft Pick Tie","title":"NFL Tiebreaking Procedures","text":"divisional conference tiebreakers applicable, ties still exist teams different conferences, ties broken following procedure: Ties involving THREE clubs different conferences broken applying divisional tiebreakers determine lowest-ranked team division, conference tiebreakers determine lowest-ranked team within conference. process, can 2 inter-conference teams participating following steps (draft pick assignment reversed division conference ties. Worse teams get earlier picks): Head--head, applicable. loser gets earlier pick. Worst won-lost-tied percentage common games (minimum four). Worst Strength victory games. Worst combined ranking among teams points scored points allowed games. Worst net points games. Worst net touchdowns games. Coin toss.","code":""},{"path":"https://nflseedr.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Carl. Maintainer, author, copyright holder. Lee Sharpe. Author.","code":""},{"path":"https://nflseedr.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carl S, Sharpe L (2025). nflseedR: Functions Efficiently Simulate Evaluate NFL Seasons. R package version 2.0.0.9000, https://github.com/nflverse/nflseedR, https://nflseedr.com.","code":"@Manual{,   title = {nflseedR: Functions to Efficiently Simulate and Evaluate NFL Seasons},   author = {Sebastian Carl and Lee Sharpe},   year = {2025},   note = {R package version 2.0.0.9000, https://github.com/nflverse/nflseedR},   url = {https://nflseedr.com}, }"},{"path":[]},{"path":"https://nflseedr.com/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Functions to Efficiently Simulate and Evaluate NFL Seasons","text":"goal nflseedR allow NFL modelers simulate NFL seasons using models, taking plate work tracking schedule, navigating complex rules division ranking, playoff seeding, draft order. can also aid sports betting, betting futures win totals. package can run thousands Monte Carlo style simulations NFL regular season, based model input. Within simulated season, calculate division standings playoff seedings . also generate playoff games simulate well, calculate order next year’s NFL draft. can used examine probability team making playoffs winning Super Bowl, based model. season simulations take completed games account already, simulate forward, including run playoffs. season simulation code nflseedR 1.x developed Lee Sharpe (@LeeSharpeNFL) building package developed Sebastian Carl (@mrcaseb). nflseedR 2.0 introduced high efficient standings simulation functionality developed Sebastian Carl (@mrcaseb)","code":""},{"path":"https://nflseedr.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions to Efficiently Simulate and Evaluate NFL Seasons","text":"easiest way get nflseedR install CRAN : get bug fix use feature development version, can install development version nflseedR either GitHub prebuilt development repo :","code":"install.packages(\"nflseedR\") if (!requireNamespace(\"pak\")) install.packages(\"pak\") pak::pak(\"nflverse/nflseedR\") install.packages(\"nflseedR\", repos = c(\"https://nflverse.r-universe.dev\", getOption(\"repos\")))"},{"path":"https://nflseedr.com/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get Started","title":"Functions to Efficiently Simulate and Evaluate NFL Seasons","text":"nflseedR ’s possible calculate NFL standings including deep tie breakers simulate complete NFL seasons. info, please see “Getting started nflseedR”","code":""},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"Compute NFL Playoff Seedings using Game Results Divisional Rankings","code":""},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"","code":"compute_conference_seeds(   teams,   h2h = NULL,   tiebreaker_depth = 3,   .debug = FALSE,   playoff_seeds = 7 )"},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"teams division standings data frame computed compute_division_ranks h2h data frame used head--head tiebreakers across tie-breaking functions. computed function compute_division_ranks. tiebreaker_depth single value equal 1, 2, 3. default 3. value controls depth tiebreakers shall applied. deepest currently implemented tiebreaker strength schedule. following values valid: tiebreaker_depth = 1 Break ties coinflip. Fastest variant. tiebreaker_depth = 2 Apply head--head division win percentage tiebreakers. Random still tied. tiebreaker_depth = 3 Apply tiebreakers strength schedule. Random still tied. .debug Either TRUE FALSE. Controls whether additional messages printed console showing tie-breaking algorithms currently performing. playoff_seeds Number playoff teams per conference (increased 2020 6 7).","code":""},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"data frame division standings including playoff seeds week season ended respective team (exit). list two data frames: standings Division standings including playoff seeds. h2h data frame used head--head tiebreakers across tie-breaking functions.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"","code":"# \\donttest{ # Change some options for better output old <- options(list(digits = 3, tibble.print_min = 64)) library(dplyr, warn.conflicts = FALSE)  try({#to avoid CRAN test problems s <- nflseedR::load_sharpe_games() |>   dplyr::filter(season %in% 2019:2020) |>   dplyr::select(sim = season, game_type, week, away_team, home_team, result) |>   nflseedR::compute_division_ranks()   nflseedR::compute_conference_seeds(s, h2h = s$h2h) |>   purrr::pluck(\"standings\") }) #> Warning: `load_sharpe_games()` was deprecated in nflseedR 2.0.0. #> ℹ Please use `nflreadr::load_schedules()` instead. #> ℹ 20:31:44 | Calculating team data #> ℹ 20:31:44 | Calculating head to head #> ℹ 20:31:44 | Calculating division rank #1 #> ℹ 20:31:44 | Calculating division rank #2 #> ℹ 20:31:44 | Calculating division rank #3 #> ℹ 20:31:45 | Calculating division rank #4 #> ℹ 20:31:45 | Calculating seed #1 #> ℹ 20:31:45 | Calculating seed #2 #> ℹ 20:31:45 | Calculating seed #3 #> ℹ 20:31:45 | Calculating seed #4 #> ℹ 20:31:45 | Calculating seed #5 #> ℹ 20:31:45 | Calculating seed #6 #> ℹ 20:31:45 | Calculating seed #7 #> # A tibble: 64 × 17 #>      sim conf  division team  games  wins true_wins losses  ties win_pct div_pct #>    <int> <chr> <chr>    <chr> <int> <dbl>     <int>  <int> <int>   <dbl>   <dbl> #>  1  2019 AFC   AFC East BUF      16  10          10      6     0  0.625    0.5   #>  2  2019 AFC   AFC East MIA      16   5           5     11     0  0.312    0.333 #>  3  2019 AFC   AFC East NE       16  12          12      4     0  0.75     0.833 #>  4  2019 AFC   AFC East NYJ      16   7           7      9     0  0.438    0.333 #>  5  2019 AFC   AFC Nor… BAL      16  14          14      2     0  0.875    0.833 #>  6  2019 AFC   AFC Nor… CIN      16   2           2     14     0  0.125    0.167 #>  7  2019 AFC   AFC Nor… CLE      16   6           6     10     0  0.375    0.5   #>  8  2019 AFC   AFC Nor… PIT      16   8           8      8     0  0.5      0.5   #>  9  2019 AFC   AFC Sou… HOU      16  10          10      6     0  0.625    0.667 #> 10  2019 AFC   AFC Sou… IND      16   7           7      9     0  0.438    0.5   #> 11  2019 AFC   AFC Sou… JAX      16   6           6     10     0  0.375    0.333 #> 12  2019 AFC   AFC Sou… TEN      16   9           9      7     0  0.562    0.5   #> 13  2019 AFC   AFC West DEN      16   7           7      9     0  0.438    0.5   #> 14  2019 AFC   AFC West KC       16  12          12      4     0  0.75     1     #> 15  2019 AFC   AFC West LAC      16   5           5     11     0  0.312    0     #> 16  2019 AFC   AFC West OAK      16   7           7      9     0  0.438    0.5   #> 17  2019 NFC   NFC East DAL      16   8           8      8     0  0.5      0.833 #> 18  2019 NFC   NFC East NYG      16   4           4     12     0  0.25     0.333 #> 19  2019 NFC   NFC East PHI      16   9           9      7     0  0.562    0.833 #> 20  2019 NFC   NFC East WAS      16   3           3     13     0  0.188    0     #> 21  2019 NFC   NFC Nor… CHI      16   8           8      8     0  0.5      0.667 #> 22  2019 NFC   NFC Nor… DET      16   3.5         3     12     1  0.219    0     #> 23  2019 NFC   NFC Nor… GB       16  13          13      3     0  0.812    1     #> 24  2019 NFC   NFC Nor… MIN      16  10          10      6     0  0.625    0.333 #> 25  2019 NFC   NFC Sou… ATL      16   7           7      9     0  0.438    0.667 #> 26  2019 NFC   NFC Sou… CAR      16   5           5     11     0  0.312    0.167 #> 27  2019 NFC   NFC Sou… NO       16  13          13      3     0  0.812    0.833 #> 28  2019 NFC   NFC Sou… TB       16   7           7      9     0  0.438    0.333 #> 29  2019 NFC   NFC West ARI      16   5.5         5     10     1  0.344    0.167 #> 30  2019 NFC   NFC West LA       16   9           9      7     0  0.562    0.5   #> 31  2019 NFC   NFC West SEA      16  11          11      5     0  0.688    0.5   #> 32  2019 NFC   NFC West SF       16  13          13      3     0  0.812    0.833 #> 33  2020 AFC   AFC East BUF      16  13          13      3     0  0.812    1     #> 34  2020 AFC   AFC East MIA      16  10          10      6     0  0.625    0.5   #> 35  2020 AFC   AFC East NE       16   7           7      9     0  0.438    0.5   #> 36  2020 AFC   AFC East NYJ      16   2           2     14     0  0.125    0     #> 37  2020 AFC   AFC Nor… BAL      16  11          11      5     0  0.688    0.667 #> 38  2020 AFC   AFC Nor… CIN      16   4.5         4     11     1  0.281    0.167 #> 39  2020 AFC   AFC Nor… CLE      16  11          11      5     0  0.688    0.5   #> 40  2020 AFC   AFC Nor… PIT      16  12          12      4     0  0.75     0.667 #> 41  2020 AFC   AFC Sou… HOU      16   4           4     12     0  0.25     0.333 #> 42  2020 AFC   AFC Sou… IND      16  11          11      5     0  0.688    0.667 #> 43  2020 AFC   AFC Sou… JAX      16   1           1     15     0  0.0625   0.167 #> 44  2020 AFC   AFC Sou… TEN      16  11          11      5     0  0.688    0.833 #> 45  2020 AFC   AFC West DEN      16   5           5     11     0  0.312    0.167 #> 46  2020 AFC   AFC West KC       16  14          14      2     0  0.875    0.667 #> 47  2020 AFC   AFC West LAC      16   7           7      9     0  0.438    0.5   #> 48  2020 AFC   AFC West LV       16   8           8      8     0  0.5      0.667 #> 49  2020 NFC   NFC East DAL      16   6           6     10     0  0.375    0.333 #> 50  2020 NFC   NFC East NYG      16   6           6     10     0  0.375    0.667 #> 51  2020 NFC   NFC East PHI      16   4.5         4     11     1  0.281    0.333 #> 52  2020 NFC   NFC East WAS      16   7           7      9     0  0.438    0.667 #> 53  2020 NFC   NFC Nor… CHI      16   8           8      8     0  0.5      0.333 #> 54  2020 NFC   NFC Nor… DET      16   5           5     11     0  0.312    0.167 #> 55  2020 NFC   NFC Nor… GB       16  13          13      3     0  0.812    0.833 #> 56  2020 NFC   NFC Nor… MIN      16   7           7      9     0  0.438    0.667 #> 57  2020 NFC   NFC Sou… ATL      16   4           4     12     0  0.25     0.167 #> 58  2020 NFC   NFC Sou… CAR      16   5           5     11     0  0.312    0.167 #> 59  2020 NFC   NFC Sou… NO       16  12          12      4     0  0.75     1     #> 60  2020 NFC   NFC Sou… TB       16  11          11      5     0  0.688    0.667 #> 61  2020 NFC   NFC West ARI      16   8           8      8     0  0.5      0.333 #> 62  2020 NFC   NFC West LA       16  10          10      6     0  0.625    0.5   #> 63  2020 NFC   NFC West SEA      16  12          12      4     0  0.75     0.667 #> 64  2020 NFC   NFC West SF       16   6           6     10     0  0.375    0.5   #> # ℹ 6 more variables: conf_pct <dbl>, sov <dbl>, sos <dbl>, div_rank <dbl>, #> #   seed <dbl>, exit <dbl>  # Restore old options options(old) # }"},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NFL Division Rankings using Game Results — compute_division_ranks","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"Compute NFL Division Rankings using Game Results","code":""},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"","code":"compute_division_ranks(   games,   teams = NULL,   tiebreaker_depth = 3,   .debug = FALSE,   h2h = NULL )"},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"games data frame containing real simulated game scores. following variables required: sim simulation ID. Normally 1 - n simulated seasons. game_type One 'REG', 'WC', 'DIV', 'CON', 'SB' indicating game regular season game one playoff rounds. week week corresponding NFL season. away_team Team abbreviation away team (please see divisions valid team abbreviations). home_team Team abbreviation home team (please see divisions valid team abbreviations). result Equals home score - away score. teams parameter optional. NULL function compute internally, otherwise data frame teams contained games data frame repeated simulation ID (sim). following variables required: sim simulation ID. Normally 1 - n simulated seasons. team Team abbreviation team (please see divisions valid team abbreviations). conf Conference abbreviation team (please see divisions valid team abbreviations). division Division team (please see divisions valid division names). tiebreaker_depth single value equal 1, 2, 3. default 3. value controls depth tiebreakers shall applied. deepest currently implemented tiebreaker strength schedule. following values valid: tiebreaker_depth = 1 Break ties coinflip. Fastest variant. tiebreaker_depth = 2 Apply head--head division win percentage tiebreakers. Random still tied. tiebreaker_depth = 3 Apply tiebreakers strength schedule. Random still tied. .debug Either TRUE FALSE. Controls whether additional messages printed console showing tie-breaking algorithms currently performing. h2h data frame used head--head tiebreakers across tie-breaking functions. computed function compute_division_ranks.","code":""},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"list two data frames: standings Division standings. h2h data frame used head--head tiebreakers across tie-breaking functions.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"","code":"# \\donttest{ # Change some options for better output old <- options(list(digits = 3, tibble.print_min = 64)) library(dplyr, warn.conflicts = FALSE)  try({#to avoid CRAN test problems nflseedR::load_sharpe_games() |>   dplyr::filter(season %in% 2019:2020) |>   dplyr::select(sim = season, game_type, week, away_team, home_team, result) |>   nflseedR::compute_division_ranks() |>   purrr::pluck(\"standings\") }) #> ℹ 20:31:46 | Calculating team data #> ℹ 20:31:46 | Calculating head to head #> ℹ 20:31:46 | Calculating division rank #1 #> ℹ 20:31:46 | Calculating division rank #2 #> ℹ 20:31:46 | Calculating division rank #3 #> ℹ 20:31:46 | Calculating division rank #4 #> # A tibble: 64 × 16 #>      sim conf  division team  games  wins true_wins losses  ties win_pct div_pct #>    <int> <chr> <chr>    <chr> <int> <dbl>     <int>  <int> <int>   <dbl>   <dbl> #>  1  2019 AFC   AFC East BUF      16  10          10      6     0  0.625    0.5   #>  2  2019 AFC   AFC East MIA      16   5           5     11     0  0.312    0.333 #>  3  2019 AFC   AFC East NE       16  12          12      4     0  0.75     0.833 #>  4  2019 AFC   AFC East NYJ      16   7           7      9     0  0.438    0.333 #>  5  2019 AFC   AFC Nor… BAL      16  14          14      2     0  0.875    0.833 #>  6  2019 AFC   AFC Nor… CIN      16   2           2     14     0  0.125    0.167 #>  7  2019 AFC   AFC Nor… CLE      16   6           6     10     0  0.375    0.5   #>  8  2019 AFC   AFC Nor… PIT      16   8           8      8     0  0.5      0.5   #>  9  2019 AFC   AFC Sou… HOU      16  10          10      6     0  0.625    0.667 #> 10  2019 AFC   AFC Sou… IND      16   7           7      9     0  0.438    0.5   #> 11  2019 AFC   AFC Sou… JAX      16   6           6     10     0  0.375    0.333 #> 12  2019 AFC   AFC Sou… TEN      16   9           9      7     0  0.562    0.5   #> 13  2019 AFC   AFC West DEN      16   7           7      9     0  0.438    0.5   #> 14  2019 AFC   AFC West KC       16  12          12      4     0  0.75     1     #> 15  2019 AFC   AFC West LAC      16   5           5     11     0  0.312    0     #> 16  2019 AFC   AFC West OAK      16   7           7      9     0  0.438    0.5   #> 17  2019 NFC   NFC East DAL      16   8           8      8     0  0.5      0.833 #> 18  2019 NFC   NFC East NYG      16   4           4     12     0  0.25     0.333 #> 19  2019 NFC   NFC East PHI      16   9           9      7     0  0.562    0.833 #> 20  2019 NFC   NFC East WAS      16   3           3     13     0  0.188    0     #> 21  2019 NFC   NFC Nor… CHI      16   8           8      8     0  0.5      0.667 #> 22  2019 NFC   NFC Nor… DET      16   3.5         3     12     1  0.219    0     #> 23  2019 NFC   NFC Nor… GB       16  13          13      3     0  0.812    1     #> 24  2019 NFC   NFC Nor… MIN      16  10          10      6     0  0.625    0.333 #> 25  2019 NFC   NFC Sou… ATL      16   7           7      9     0  0.438    0.667 #> 26  2019 NFC   NFC Sou… CAR      16   5           5     11     0  0.312    0.167 #> 27  2019 NFC   NFC Sou… NO       16  13          13      3     0  0.812    0.833 #> 28  2019 NFC   NFC Sou… TB       16   7           7      9     0  0.438    0.333 #> 29  2019 NFC   NFC West ARI      16   5.5         5     10     1  0.344    0.167 #> 30  2019 NFC   NFC West LA       16   9           9      7     0  0.562    0.5   #> 31  2019 NFC   NFC West SEA      16  11          11      5     0  0.688    0.5   #> 32  2019 NFC   NFC West SF       16  13          13      3     0  0.812    0.833 #> 33  2020 AFC   AFC East BUF      16  13          13      3     0  0.812    1     #> 34  2020 AFC   AFC East MIA      16  10          10      6     0  0.625    0.5   #> 35  2020 AFC   AFC East NE       16   7           7      9     0  0.438    0.5   #> 36  2020 AFC   AFC East NYJ      16   2           2     14     0  0.125    0     #> 37  2020 AFC   AFC Nor… BAL      16  11          11      5     0  0.688    0.667 #> 38  2020 AFC   AFC Nor… CIN      16   4.5         4     11     1  0.281    0.167 #> 39  2020 AFC   AFC Nor… CLE      16  11          11      5     0  0.688    0.5   #> 40  2020 AFC   AFC Nor… PIT      16  12          12      4     0  0.75     0.667 #> 41  2020 AFC   AFC Sou… HOU      16   4           4     12     0  0.25     0.333 #> 42  2020 AFC   AFC Sou… IND      16  11          11      5     0  0.688    0.667 #> 43  2020 AFC   AFC Sou… JAX      16   1           1     15     0  0.0625   0.167 #> 44  2020 AFC   AFC Sou… TEN      16  11          11      5     0  0.688    0.833 #> 45  2020 AFC   AFC West DEN      16   5           5     11     0  0.312    0.167 #> 46  2020 AFC   AFC West KC       16  14          14      2     0  0.875    0.667 #> 47  2020 AFC   AFC West LAC      16   7           7      9     0  0.438    0.5   #> 48  2020 AFC   AFC West LV       16   8           8      8     0  0.5      0.667 #> 49  2020 NFC   NFC East DAL      16   6           6     10     0  0.375    0.333 #> 50  2020 NFC   NFC East NYG      16   6           6     10     0  0.375    0.667 #> 51  2020 NFC   NFC East PHI      16   4.5         4     11     1  0.281    0.333 #> 52  2020 NFC   NFC East WAS      16   7           7      9     0  0.438    0.667 #> 53  2020 NFC   NFC Nor… CHI      16   8           8      8     0  0.5      0.333 #> 54  2020 NFC   NFC Nor… DET      16   5           5     11     0  0.312    0.167 #> 55  2020 NFC   NFC Nor… GB       16  13          13      3     0  0.812    0.833 #> 56  2020 NFC   NFC Nor… MIN      16   7           7      9     0  0.438    0.667 #> 57  2020 NFC   NFC Sou… ATL      16   4           4     12     0  0.25     0.167 #> 58  2020 NFC   NFC Sou… CAR      16   5           5     11     0  0.312    0.167 #> 59  2020 NFC   NFC Sou… NO       16  12          12      4     0  0.75     1     #> 60  2020 NFC   NFC Sou… TB       16  11          11      5     0  0.688    0.667 #> 61  2020 NFC   NFC West ARI      16   8           8      8     0  0.5      0.333 #> 62  2020 NFC   NFC West LA       16  10          10      6     0  0.625    0.5   #> 63  2020 NFC   NFC West SEA      16  12          12      4     0  0.75     0.667 #> 64  2020 NFC   NFC West SF       16   6           6     10     0  0.375    0.5   #> # ℹ 5 more variables: conf_pct <dbl>, sov <dbl>, sos <dbl>, div_rank <dbl>, #> #   max_reg_week <int>  # Restore old options options(old) # }"},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"Compute NFL Draft Order using Game Results Divisional Rankings","code":""},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"","code":"compute_draft_order(   teams,   games,   h2h = NULL,   tiebreaker_depth = 3,   .debug = FALSE )"},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"teams division standings data frame including playoff seeds computed compute_conference_seeds games data frame containing real simulated game scores. following variables required: sim simulation ID. Normally 1 - n simulated seasons. game_type One 'REG', 'WC', 'DIV', 'CON', 'SB' indicating game regular season game one playoff rounds. week week corresponding NFL season. away_team Team abbreviation away team (please see divisions valid team abbreviations). home_team Team abbreviation home team (please see divisions valid team abbreviations). result Equals home score - away score. h2h data frame used head--head tiebreakers across tie-breaking functions. computed function compute_division_ranks. tiebreaker_depth single value equal 1, 2, 3. default 3. value controls depth tiebreakers shall applied. deepest currently implemented tiebreaker strength schedule. following values valid: tiebreaker_depth = 1 Break ties coinflip. Fastest variant. tiebreaker_depth = 2 Apply head--head division win percentage tiebreakers. Random still tied. tiebreaker_depth = 3 Apply tiebreakers strength schedule. Random still tied. .debug Either TRUE FALSE. Controls whether additional messages printed console showing tie-breaking algorithms currently performing.","code":""},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"data frame standings including final draft pick number variable exit indicates week number teams final game (Super Bowl Winner one week higher).","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"","code":"# \\donttest{ # Change some options for better output old <- options(list(digits = 3, tibble.print_min = 64)) library(dplyr, warn.conflicts = FALSE)  try({#to avoid CRAN test problems games <-   nflseedR::load_sharpe_games() |>   dplyr::filter(season %in% 2018:2019) |>   dplyr::select(sim = season, game_type, week, away_team, home_team, result)  s <- games |> nflseedR::compute_division_ranks() s <- nflseedR::compute_conference_seeds(s, h2h = s$h2h, playoff_seeds = 6) nflseedR::compute_draft_order(s, games = games, h2h = s$h2h) }) #> ℹ 20:31:46 | Calculating team data #> ℹ 20:31:46 | Calculating head to head #> ℹ 20:31:46 | Calculating division rank #1 #> ℹ 20:31:47 | Calculating division rank #2 #> ℹ 20:31:47 | Calculating division rank #3 #> ℹ 20:31:47 | Calculating division rank #4 #> ℹ 20:31:47 | Calculating seed #1 #> ℹ 20:31:47 | Calculating seed #2 #> ℹ 20:31:47 | Calculating seed #3 #> ℹ 20:31:47 | Calculating seed #4 #> ℹ 20:31:47 | Calculating seed #5 #> ℹ 20:31:47 | Calculating seed #6 #> ℹ 20:31:47 | Calculating draft order #32 #> ℹ 20:31:47 | Calculating draft order #31 #> ℹ 20:31:47 | Calculating draft order #30 #> ℹ 20:31:47 | Calculating draft order #29 #> ℹ 20:31:47 | Calculating draft order #28 #> ℹ 20:31:47 | Calculating draft order #27 #> ℹ 20:31:47 | Calculating draft order #26 #> ℹ 20:31:47 | Calculating draft order #25 #> ℹ 20:31:47 | Calculating draft order #24 #> ℹ 20:31:47 | Calculating draft order #23 #> ℹ 20:31:47 | Calculating draft order #22 #> ℹ 20:31:47 | Calculating draft order #21 #> ℹ 20:31:47 | Calculating draft order #20 #> ℹ 20:31:47 | Calculating draft order #19 #> ℹ 20:31:47 | Calculating draft order #18 #> ℹ 20:31:47 | Calculating draft order #17 #> ℹ 20:31:48 | Calculating draft order #16 #> ℹ 20:31:48 | Calculating draft order #15 #> ℹ 20:31:48 | Calculating draft order #14 #> ℹ 20:31:48 | Calculating draft order #13 #> ℹ 20:31:48 | Calculating draft order #12 #> ℹ 20:31:48 | Calculating draft order #11 #> ℹ 20:31:48 | Calculating draft order #10 #> ℹ 20:31:48 | Calculating draft order #9 #> ℹ 20:31:48 | Calculating draft order #8 #> ℹ 20:31:48 | Calculating draft order #7 #> ℹ 20:31:48 | Calculating draft order #6 #> ℹ 20:31:48 | Calculating draft order #5 #> ℹ 20:31:48 | Calculating draft order #4 #> ℹ 20:31:48 | Calculating draft order #3 #> ℹ 20:31:48 | Calculating draft order #2 #> ℹ 20:31:48 | Calculating draft order #1 #> # A tibble: 64 × 18 #>      sim team  conf  division games  wins true_wins losses  ties win_pct div_pct #>    <int> <chr> <chr> <chr>    <int> <dbl>     <int>  <int> <int>   <dbl>   <dbl> #>  1  2018 BUF   AFC   AFC East    16   6           6     10     0   0.375   0.333 #>  2  2018 MIA   AFC   AFC East    16   7           7      9     0   0.438   0.667 #>  3  2018 NE    AFC   AFC East    16  11          11      5     0   0.688   0.833 #>  4  2018 NYJ   AFC   AFC East    16   4           4     12     0   0.25    0.167 #>  5  2018 BAL   AFC   AFC Nor…    16  10          10      6     0   0.625   0.5   #>  6  2018 CIN   AFC   AFC Nor…    16   6           6     10     0   0.375   0.167 #>  7  2018 CLE   AFC   AFC Nor…    16   7.5         7      8     1   0.469   0.583 #>  8  2018 PIT   AFC   AFC Nor…    16   9.5         9      6     1   0.594   0.75  #>  9  2018 HOU   AFC   AFC Sou…    16  11          11      5     0   0.688   0.667 #> 10  2018 IND   AFC   AFC Sou…    16  10          10      6     0   0.625   0.667 #> 11  2018 JAX   AFC   AFC Sou…    16   5           5     11     0   0.312   0.167 #> 12  2018 TEN   AFC   AFC Sou…    16   9           9      7     0   0.562   0.5   #> 13  2018 DEN   AFC   AFC West    16   6           6     10     0   0.375   0.333 #> 14  2018 KC    AFC   AFC West    16  12          12      4     0   0.75    0.833 #> 15  2018 LAC   AFC   AFC West    16  12          12      4     0   0.75    0.667 #> 16  2018 OAK   AFC   AFC West    16   4           4     12     0   0.25    0.167 #> 17  2018 DAL   NFC   NFC East    16  10          10      6     0   0.625   0.833 #> 18  2018 NYG   NFC   NFC East    16   5           5     11     0   0.312   0.167 #> 19  2018 PHI   NFC   NFC East    16   9           9      7     0   0.562   0.667 #> 20  2018 WAS   NFC   NFC East    16   7           7      9     0   0.438   0.333 #> 21  2018 CHI   NFC   NFC Nor…    16  12          12      4     0   0.75    0.833 #> 22  2018 DET   NFC   NFC Nor…    16   6           6     10     0   0.375   0.333 #> 23  2018 GB    NFC   NFC Nor…    16   6.5         6      9     1   0.406   0.25  #> 24  2018 MIN   NFC   NFC Nor…    16   8.5         8      7     1   0.531   0.583 #> 25  2018 ATL   NFC   NFC Sou…    16   7           7      9     0   0.438   0.667 #> 26  2018 CAR   NFC   NFC Sou…    16   7           7      9     0   0.438   0.333 #> 27  2018 NO    NFC   NFC Sou…    16  13          13      3     0   0.812   0.667 #> 28  2018 TB    NFC   NFC Sou…    16   5           5     11     0   0.312   0.333 #> 29  2018 ARI   NFC   NFC West    16   3           3     13     0   0.188   0.333 #> 30  2018 LA    NFC   NFC West    16  13          13      3     0   0.812   1     #> 31  2018 SEA   NFC   NFC West    16  10          10      6     0   0.625   0.5   #> 32  2018 SF    NFC   NFC West    16   4           4     12     0   0.25    0.167 #> 33  2019 BUF   AFC   AFC East    16  10          10      6     0   0.625   0.5   #> 34  2019 MIA   AFC   AFC East    16   5           5     11     0   0.312   0.333 #> 35  2019 NE    AFC   AFC East    16  12          12      4     0   0.75    0.833 #> 36  2019 NYJ   AFC   AFC East    16   7           7      9     0   0.438   0.333 #> 37  2019 BAL   AFC   AFC Nor…    16  14          14      2     0   0.875   0.833 #> 38  2019 CIN   AFC   AFC Nor…    16   2           2     14     0   0.125   0.167 #> 39  2019 CLE   AFC   AFC Nor…    16   6           6     10     0   0.375   0.5   #> 40  2019 PIT   AFC   AFC Nor…    16   8           8      8     0   0.5     0.5   #> 41  2019 HOU   AFC   AFC Sou…    16  10          10      6     0   0.625   0.667 #> 42  2019 IND   AFC   AFC Sou…    16   7           7      9     0   0.438   0.5   #> 43  2019 JAX   AFC   AFC Sou…    16   6           6     10     0   0.375   0.333 #> 44  2019 TEN   AFC   AFC Sou…    16   9           9      7     0   0.562   0.5   #> 45  2019 DEN   AFC   AFC West    16   7           7      9     0   0.438   0.5   #> 46  2019 KC    AFC   AFC West    16  12          12      4     0   0.75    1     #> 47  2019 LAC   AFC   AFC West    16   5           5     11     0   0.312   0     #> 48  2019 OAK   AFC   AFC West    16   7           7      9     0   0.438   0.5   #> 49  2019 DAL   NFC   NFC East    16   8           8      8     0   0.5     0.833 #> 50  2019 NYG   NFC   NFC East    16   4           4     12     0   0.25    0.333 #> 51  2019 PHI   NFC   NFC East    16   9           9      7     0   0.562   0.833 #> 52  2019 WAS   NFC   NFC East    16   3           3     13     0   0.188   0     #> 53  2019 CHI   NFC   NFC Nor…    16   8           8      8     0   0.5     0.667 #> 54  2019 DET   NFC   NFC Nor…    16   3.5         3     12     1   0.219   0     #> 55  2019 GB    NFC   NFC Nor…    16  13          13      3     0   0.812   1     #> 56  2019 MIN   NFC   NFC Nor…    16  10          10      6     0   0.625   0.333 #> 57  2019 ATL   NFC   NFC Sou…    16   7           7      9     0   0.438   0.667 #> 58  2019 CAR   NFC   NFC Sou…    16   5           5     11     0   0.312   0.167 #> 59  2019 NO    NFC   NFC Sou…    16  13          13      3     0   0.812   0.833 #> 60  2019 TB    NFC   NFC Sou…    16   7           7      9     0   0.438   0.333 #> 61  2019 ARI   NFC   NFC West    16   5.5         5     10     1   0.344   0.167 #> 62  2019 LA    NFC   NFC West    16   9           9      7     0   0.562   0.5   #> 63  2019 SEA   NFC   NFC West    16  11          11      5     0   0.688   0.5   #> 64  2019 SF    NFC   NFC West    16  13          13      3     0   0.812   0.833 #> # ℹ 7 more variables: conf_pct <dbl>, sov <dbl>, sos <dbl>, div_rank <dbl>, #> #   seed <dbl>, exit <dbl>, draft_order <dbl>  # Restore old options options(old) # }"},{"path":"https://nflseedr.com/reference/dictionary_game_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Dictionary: Simulations | Game Summary — dictionary_game_summary","title":"Data Dictionary: Simulations | Game Summary — dictionary_game_summary","text":"dataframe containing data dictionary simulation output table \"game_summary\"","code":""},{"path":"https://nflseedr.com/reference/dictionary_game_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Dictionary: Simulations | Game Summary — dictionary_game_summary","text":"","code":"dictionary_game_summary"},{"path":"https://nflseedr.com/reference/dictionary_game_summary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Dictionary: Simulations | Game Summary — dictionary_game_summary","text":"object class data.frame 11 rows 2 columns.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/dictionary_games.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Dictionary: Simulations | Games — dictionary_games","title":"Data Dictionary: Simulations | Games — dictionary_games","text":"dataframe containing data dictionary simulation output table \"games\"","code":""},{"path":"https://nflseedr.com/reference/dictionary_games.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Dictionary: Simulations | Games — dictionary_games","text":"","code":"dictionary_games"},{"path":"https://nflseedr.com/reference/dictionary_games.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Dictionary: Simulations | Games — dictionary_games","text":"object class data.frame 9 rows 2 columns.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/dictionary_overall.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Dictionary: Simulations | Overall — dictionary_overall","title":"Data Dictionary: Simulations | Overall — dictionary_overall","text":"dataframe containing data dictionary simulation output table \"overall\"","code":""},{"path":"https://nflseedr.com/reference/dictionary_overall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Dictionary: Simulations | Overall — dictionary_overall","text":"","code":"dictionary_overall"},{"path":"https://nflseedr.com/reference/dictionary_overall.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Dictionary: Simulations | Overall — dictionary_overall","text":"object class data.frame 11 rows 2 columns.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/dictionary_standings.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Dictionary: Simulations | Standings — dictionary_standings","title":"Data Dictionary: Simulations | Standings — dictionary_standings","text":"dataframe containing data dictionary simulation output table \"standings\"","code":""},{"path":"https://nflseedr.com/reference/dictionary_standings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Dictionary: Simulations | Standings — dictionary_standings","text":"","code":"dictionary_standings"},{"path":"https://nflseedr.com/reference/dictionary_standings.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Dictionary: Simulations | Standings — dictionary_standings","text":"object class data.frame 21 rows 2 columns.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/dictionary_team_wins.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Dictionary: Simulations | Team Wins — dictionary_team_wins","title":"Data Dictionary: Simulations | Team Wins — dictionary_team_wins","text":"dataframe containing data dictionary simulation output table \"team_wins\"","code":""},{"path":"https://nflseedr.com/reference/dictionary_team_wins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Dictionary: Simulations | Team Wins — dictionary_team_wins","text":"","code":"dictionary_team_wins"},{"path":"https://nflseedr.com/reference/dictionary_team_wins.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data Dictionary: Simulations | Team Wins — dictionary_team_wins","text":"object class data.frame 4 rows 2 columns.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/divisions.html","id":null,"dir":"Reference","previous_headings":"","what":"NFL team names and the conferences and divisions they belong to — divisions","title":"NFL team names and the conferences and divisions they belong to — divisions","text":"NFL team names conferences divisions belong ","code":""},{"path":"https://nflseedr.com/reference/divisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NFL team names and the conferences and divisions they belong to — divisions","text":"","code":"divisions"},{"path":"https://nflseedr.com/reference/divisions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NFL team names and the conferences and divisions they belong to — divisions","text":"data frame 36 rows 4 variables containing NFL team level information, including franchises multiple cities: team Team abbreviation conf Conference abbreviation division Division name sdiv Division abbreviation data frame created using teams_colors_logos data frame nflfastR package. Please see data-raw/divisions.R code create data.","code":""},{"path":"https://nflseedr.com/reference/divisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NFL team names and the conferences and divisions they belong to — divisions","text":"","code":"str(divisions) #> tibble [36 × 4] (S3: tbl_df/tbl/data.frame) #>  $ team    : chr [1:36] \"ARI\" \"ATL\" \"BAL\" \"BUF\" ... #>  $ conf    : chr [1:36] \"NFC\" \"NFC\" \"AFC\" \"AFC\" ... #>  $ division: chr [1:36] \"NFC West\" \"NFC South\" \"AFC North\" \"AFC East\" ... #>  $ sdiv    : chr [1:36] \"NFCW\" \"NFCS\" \"AFCN\" \"AFCE\" ..."},{"path":"https://nflseedr.com/reference/fmt_pct_special.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Numerical Values to Special Percentage Strings — fmt_pct_special","title":"Format Numerical Values to Special Percentage Strings — fmt_pct_special","text":"function formats numeric vectors values 0 1 percentage strings special specifications. specifications : 0 1 converted \"0%\" \"100%\" respectively (takes machine precision account) values < 0.01 converted \"<1%\" values 0.01 0.995 rounded percentages without decimals values 0.995 0.999 rounded percentages 1 decimal values 0.999 1 converted \">99.9%\" unless closer 1 machine precision.","code":""},{"path":"https://nflseedr.com/reference/fmt_pct_special.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Numerical Values to Special Percentage Strings — fmt_pct_special","text":"","code":"fmt_pct_special(x)"},{"path":"https://nflseedr.com/reference/fmt_pct_special.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Numerical Values to Special Percentage Strings — fmt_pct_special","text":"x vector numerical values","code":""},{"path":"https://nflseedr.com/reference/fmt_pct_special.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Numerical Values to Special Percentage Strings — fmt_pct_special","text":"character vector","code":""},{"path":"https://nflseedr.com/reference/fmt_pct_special.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Numerical Values to Special Percentage Strings — fmt_pct_special","text":"","code":"x <- c(0, 0.004, 0.009, 0.011, 0.9, 0.98, 0.994,        .995, .9989, .999, .9991, .99999999) fmt <- fmt_pct_special(x) data.frame(x = x, fmt = fmt) #>         x    fmt #> 1  0.0000     0% #> 2  0.0040    <1% #> 3  0.0090    <1% #> 4  0.0110     1% #> 5  0.9000    90% #> 6  0.9800    98% #> 7  0.9940    99% #> 8  0.9950  99.5% #> 9  0.9989  99.9% #> 10 0.9990  99.9% #> 11 0.9991 >99.9% #> 12 1.0000   100%"},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Lee Sharpe's Games File — load_sharpe_games","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"Lee Sharpe maintains important data set contains broadly used information games National Football League. function convenient helper download file memory without remember correct url.","code":""},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"","code":"load_sharpe_games(...)"},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"... Arguments passed nflreadr::load_schedules seasons numeric vector seasons return, default TRUE returns available data.","code":""},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"data frame containing following variables NFL games since 1999: game_id ID game assigned nflverse. Note value matches game_id field nflfastR wish join data. season year NFL season. represents whole season, regular season games happen January well playoff games occur year number. game_type type game? One following values: REG regular season game WC wildcard playoff game DIV divisional round playoff game CON conference championship SB Super Bowl week week NFL season game occurs . Please note game_type differ weeks >= 18 season expansion 2021. Please use game_type filter regular season postseason. gameday date game occurred. weekday day week game occurred. gametime kickoff time game. represented 24-hour time Eastern time zone, regardless time zone game played . away_team away team. away_score number points away team scored. NA games yet played. home_team home team. Note contains designated home team games team playing home Super Bowls NFL International games. home_score number points home team scored. NA games yet played. location Either Home home team playing home stadium, Neutral game played neutral location. still shows Home games Giants Jets even though share home stadium. result Equals home_score - away_score. number points home team scored minus number points away team scored. NA games yet played. Convenient evaluating spread bets. total sum team's score game. Equals home_score + away_score. NA games yet played. Convenient evaluating /total bets. overtime Whether game went overtime (= 1) (= 0). old_game_id id game issued NFL Game Statistics & Information System. away_rest number days since away team's previous game (7 used team's first game season). home_rest number days since home team's previous game (7 used team's first game season). away_moneyline Odd away_team winning game. home_moneyline Odd home_team winning game. spread_line spread line game. positive number means home team favored many points, negative number means away team favored many points. lines result column. away_spread_odds Odd away_team covering spread_line. home_spread_odds Odd home_team covering spread_line. total_line total line game. under_odds Odd total total_line. over_odds Odd total total_line. div_game Whether game divisional game (= 1) (= 0). roof status stadium's roof? one following values: closed Stadium retractable roof closed dome indoor stadium open Stadium retractable roof open outdoors outdoor stadium surface type ground game played . temp temperature stadium (roof types outdoors open ). wind speed wind miles/hour (roof types outdoors open ). away_qb_id GSIS ID \"starting quarterback\" away team identified first quarterback (per roster data) listed passer (nflfastR play play data) 2+ plays game. final regular season game QB plays passer. home_qb_id GSIS ID \"starting quarterback\" home team identified first quarterback (per roster data) listed passer (nflfastR play play data) 2+ plays game. final regular season game QB plays passer. away_qb_name Full name \"starting quarterback\" away team identified first quarterback (per roster data) listed passer (nflfastR play play data) 2+ plays game. final regular season game QB plays passer. home_qb_name Full name \"starting quarterback\" home team identified first quarterback (per roster data) listed passer (nflfastR play play data) 2+ plays game. final regular season game QB plays passer. away_coach Name head coach away team. home_coach Name head coach home team. referee Name game's referee (head official). stadium_id Pro Football Reference ID stadium. stadium Name stadium.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"","code":"# \\donttest{ try({#to avoid CRAN test problems games <- load_sharpe_games() dplyr::glimpse(games) }) #> Rows: 6,991 #> Columns: 46 #> $ game_id          <chr> \"1999_01_MIN_ATL\", \"1999_01_KC_CHI\", \"1999_01_PIT_CLE… #> $ season           <int> 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999,… #> $ game_type        <chr> \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG… #> $ week             <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2,… #> $ gameday          <chr> \"1999-09-12\", \"1999-09-12\", \"1999-09-12\", \"1999-09-12… #> $ weekday          <chr> \"Sunday\", \"Sunday\", \"Sunday\", \"Sunday\", \"Sunday\", \"Su… #> $ gametime         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ away_team        <chr> \"MIN\", \"KC\", \"PIT\", \"OAK\", \"BUF\", \"SF\", \"CAR\", \"NE\", … #> $ away_score       <int> 17, 17, 43, 24, 14, 3, 10, 30, 25, 28, 10, 17, 35, 41… #> $ home_team        <chr> \"ATL\", \"CHI\", \"CLE\", \"GB\", \"IND\", \"JAX\", \"NO\", \"NYJ\",… #> $ home_score       <int> 14, 20, 0, 28, 31, 41, 19, 28, 24, 20, 27, 13, 36, 35… #> $ location         <chr> \"Home\", \"Home\", \"Home\", \"Home\", \"Home\", \"Home\", \"Home… #> $ result           <int> -3, 3, -43, 4, 17, 38, 9, -2, -1, -8, 17, -4, 1, -6, … #> $ total            <int> 31, 37, 43, 52, 45, 44, 29, 58, 49, 48, 37, 30, 71, 7… #> $ overtime         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,… #> $ old_game_id      <chr> \"1999091210\", \"1999091206\", \"1999091213\", \"1999091208… #> $ gsis             <int> 598, 597, 604, 602, 591, 603, 592, 600, 588, 596, 589… #> $ nfl_detail_id    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ pfr              <chr> \"199909120atl\", \"199909120chi\", \"199909120cle\", \"1999… #> $ pff              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ espn             <chr> \"190912001\", \"190912003\", \"190912005\", \"190912009\", \"… #> $ ftn              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ away_rest        <int> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,… #> $ home_rest        <int> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,… #> $ away_moneyline   <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ home_moneyline   <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ spread_line      <dbl> -4.0, -3.0, -6.0, 9.0, -3.0, 5.5, 3.5, 7.0, -3.0, 9.5… #> $ away_spread_odds <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ home_spread_odds <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ total_line       <dbl> 49.0, 38.0, 37.0, 43.0, 45.5, 49.0, 38.0, 44.5, 37.0,… #> $ under_odds       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ over_odds        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ div_game         <int> 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0,… #> $ roof             <chr> \"dome\", \"outdoors\", \"outdoors\", \"outdoors\", \"dome\", \"… #> $ surface          <chr> \"astroturf\", \"grass\", \"grass\", \"grass\", \"astroturf\", … #> $ temp             <int> NA, 80, 78, 67, NA, 76, NA, 73, 75, NA, NA, 88, 84, 7… #> $ wind             <int> NA, 12, 12, 10, NA, 8, NA, 5, 3, NA, NA, 8, 10, 0, 5,… #> $ away_qb_id       <chr> \"00-0003761\", \"00-0006300\", \"00-0015700\", \"00-0005741… #> $ home_qb_id       <chr> \"00-0002876\", \"00-0010560\", \"00-0004230\", \"00-0005106… #> $ away_qb_name     <chr> \"Randall Cunningham\", \"Elvis Grbac\", \"Kordell Stewart… #> $ home_qb_name     <chr> \"Chris Chandler\", \"Shane Matthews\", \"Ty Detmer\", \"Bre… #> $ away_coach       <chr> \"Dennis Green\", \"Gunther Cunningham\", \"Bill Cowher\", … #> $ home_coach       <chr> \"Dan Reeves\", \"Dick Jauron\", \"Chris Palmer\", \"Ray Rho… #> $ referee          <chr> \"Gerry Austin\", \"Phil Luckett\", \"Bob McElwee\", \"Tony … #> $ stadium_id       <chr> \"ATL00\", \"CHI98\", \"CLE00\", \"GNB00\", \"IND99\", \"JAX00\",… #> $ stadium          <chr> \"Georgia Dome\", \"Soldier Field\", \"Cleveland Browns St… # }"},{"path":"https://nflseedr.com/reference/nfl_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an NFL Season — nfl_simulations","title":"Simulate an NFL Season — nfl_simulations","text":"Simulate NFL games based user provided games/schedule object holds matchups without results. Missing results computed using argument compute_results possible arguments compute_results ... (please see simulations_verify_fct information.). possible let function calculate playoff participants simulate post-season. code also developed maximum performance allows parallel computation splitting number simulations chunks calling appropriate future::plan. Progress updates can activated calling progressr::handlers start simulations. Please see given section \"Details\" information.","code":""},{"path":"https://nflseedr.com/reference/nfl_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an NFL Season — nfl_simulations","text":"","code":"nfl_simulations(   games,   compute_results = nflseedR_compute_results,   ...,   playoff_seeds = 7L,   simulations = 10000L,   chunks = 8L,   byes_per_conf = 1L,   tiebreaker_depth = c(\"SOS\", \"PRE-SOV\", \"RANDOM\"),   sim_include = c(\"DRAFT\", \"REG\", \"POST\"),   verbosity = c(\"MIN\", \"MAX\", \"NONE\") )"},{"path":"https://nflseedr.com/reference/nfl_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an NFL Season — nfl_simulations","text":"games data frame containing real simulated game scores. Outside simulations, simply output nflreadr::load_schedules. following variables required minimum: sim season season simulation ID. Normally 1 - n simulated seasons. game_type One 'REG', 'WC', 'DIV', 'CON', 'SB' indicating game regular season game one playoff rounds. week week corresponding NFL season. away_team Team abbreviation away team (please see divisions valid team abbreviations). home_team Team abbreviation home team (please see divisions valid team abbreviations). result Equals home score - away score. tiebreakers beyond SOS used, actual scores home (home_score) away (away_score) teams must also available. compute_results Defaults nflseedR function nflseedR_compute_results. function compute results games. Uses team, schedule, week number arguments. Please see simulations_verify_fct information. ... Additional parameters passed function compute_results. playoff_seeds NULL (default), compute 16 conference ranks. means, function applies conference tiebreakers conference ranks. better performance, possible set value < 16 make function skip tiebreakers conference ranks. simulations Equals number times given NFL season shall simulated chunks number chunks simulations split potentially processed parallel. parameter controls number simulations per chunk. obvious way determine ideal number chunks advance many dependencies hardware. many chunks can just slow . therefore user determine optimum number . byes_per_conf number teams playoff bye week per conference. number influences number wildcard games simulated. tiebreaker_depth One \"SOS\", \"PRE-SOV\", \"POINTS\" \"RANDOM\". Controls tiebreakers applied. implemented tiebreakers documented https://nflseedr.com/articles/tiebreaker.html. values mean: \"SOS\" (default): Apply tiebreakers Strength Schedule. still remaining ties, break coin toss. \"PRE-SOV\": Apply tiebreakers Strength Victory. still remaining ties, break coin toss. Pre SOV? first tiebreaker requires knowledge teams played. \"POINTS\": Apply tiebreakers point differential. still remaining ties, break coin toss. go beyond SOS requires knowledge points scored points allowed. usually part season simulations, caution advised case. tiebreakers used scores real deliberately simulated. \"RANDOM\": Breaks tiebreakers coin toss. really know, allow ... sim_include One \"REG\", \"POST\", \"DRAFT\" (default). Simulation behave follows: \"REG\": Simulate regular season compute standings, division ranks, playoff seeds \"POST\": \"REG\" + simulate postseason \"DRAFT\" (default): \"POST\" + compute draft order verbosity One \"MIN\", \"MAX\", \"NONE\" allowing user set grade verbosity status reports. mean: \"MIN\" (default): Prints main steps process. \"MAX\": Prints steps complete tiebreaking process. \"NONE\": status reports . maximize performance.","code":""},{"path":"https://nflseedr.com/reference/nfl_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an NFL Season — nfl_simulations","text":"nflseedR_simulation object containing list 6 data frames results simulated games, final standings simulated season, summary statistics across simulated seasons, simulation parameters. full list, please see package website.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/nfl_simulations.html","id":"more-speed-using-parallel-processing","dir":"Reference","previous_headings":"","what":"More Speed Using Parallel Processing","title":"Simulate an NFL Season — nfl_simulations","text":"recommend choosing default parallel processing method saving environment variable R user profile make sure futures resolved chosen method default. can done following given steps. First, run line user profile opened automatically. saved environment variables yet, empty file.   opened file add next line, save file restart R session. Please note example sets \"multisession\" default. users appropriate plan please make sure truly .   session freshly restarted please check method worked running next line. output FALSE successfully set default non-sequential future::plan(). output TRUE functions behave like called purrr::map() multisession.   information possible plans please see future package Readme.","code":"usethis::edit_r_environ() R_FUTURE_PLAN=\"multisession\" inherits(future::plan(), \"sequential\")"},{"path":"https://nflseedr.com/reference/nfl_simulations.html","id":"get-progress-updates-while-functions-are-running","dir":"Reference","previous_headings":"","what":"Get Progress Updates while Functions are Running","title":"Simulate an NFL Season — nfl_simulations","text":"nflseedR able show progress updates using progressr::progressor() turned function called. least two basic ways either activating progress updates globally (current session)   piping function call progressr::with_progress():   information work progress handlers please see progressr::progressr.","code":"progressr::handlers(global = TRUE) nflseedR::nfl_simulations(   games = nflseedR::sims_games_example,   simulations = 4,   chunks = 2 ) |>   progressr::with_progress()"},{"path":"https://nflseedr.com/reference/nfl_simulations.html","id":"reproducible-random-number-generation-rng-","dir":"Reference","previous_headings":"","what":"Reproducible Random Number Generation (RNG)","title":"Simulate an NFL Season — nfl_simulations","text":"expected form random number generation required function argument compute_results. better performance, nflseedR uses furrr package parallelize chunks. furrr functions guaranteed generate exact sequence random numbers given initial seed , , initial seed type \"L'Ecuyer-CMRG\". want consistent seed used across chunks, must ensure correct type specified set.seed, e.g. following code   sufficient set seed nfl_simulations called. check type set correctly, can use following code.   information, please see section \"Reproducible random number generation (RNG)\" furrr::furrr_options.","code":"set.seed(5, \"L'Ecuyer-CMRG\") RNGkind() \"L'Ecuyer-CMRG\" \"Inversion\"     \"Rejection\"  # Should be a integer vector of length 7 .Random.seed 10407  1157214768 -1674567567 -1532971138 -1249749529  1302496508  -253670963"},{"path":[]},{"path":"https://nflseedr.com/reference/nfl_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an NFL Season — nfl_simulations","text":"","code":"# \\donttest{ library(nflseedR)  # Activate progress updates # progressr::handlers(global = TRUE)  # Parallel processing can be activated via the following line # future::plan(\"multisession\")  sim <- nflseedR::nfl_simulations(   games = nflseedR::sims_games_example,   simulations = 4,   chunks = 2 ) #> ℹ Computation in multiple chunks can be accelerated with parallel processing. #> ℹ You should consider calling a `future::plan()`. Please see the function #>   documentation for further information. #> ℹ Will go on sequentially... #> This message is displayed once every 8 hours. #> ℹ 20:31:50 | Start simulation of 4 seasons in 2 chunks with a chunk size of 2. #> ℹ 20:31:50 | CHUNK #1: Start simulation of regular season weeks \"1\", \"2\", \"3\", #> …, \"17\", and \"18\" #> ℹ 20:31:50 | Initiate Standings & Tiebreaking Data #> ℹ 20:31:50 | Compute Division Ranks #> ℹ 20:31:50 | Compute Conference Ranks #> ℹ 20:31:50 | CHUNK #1: Start simulation of post season weeks \"WC\" and \"SB\" #> ℹ 20:31:50 | Compute Draft Order #> ℹ 20:31:50 | CHUNK #2: Start simulation of regular season weeks \"1\", \"2\", \"3\", #> …, \"17\", and \"18\" #> ℹ 20:31:51 | Initiate Standings & Tiebreaking Data #> ℹ 20:31:51 | Compute Division Ranks #> ℹ 20:31:51 | Compute Conference Ranks #> ℹ 20:31:51 | CHUNK #2: Start simulation of post season weeks \"WC\" and \"SB\" #> ℹ 20:31:51 | Compute Draft Order #> ℹ 20:31:51 | Combine simulation data #> ℹ 20:31:51 | Aggregate across simulations #> ℹ 20:31:51 | DONE!  # Overview output str(sim, max.level = 3) #> List of 6 #>  $ standings   :'data.frame':\t128 obs. of  20 variables: #>   ..$ sim               : int [1:128] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ team              : chr [1:128] \"BUF\" \"NE\" \"MIA\" \"NYJ\" ... #>   ..$ conf              : chr [1:128] \"AFC\" \"AFC\" \"AFC\" \"AFC\" ... #>   ..$ division          : chr [1:128] \"AFC East\" \"AFC East\" \"AFC East\" \"AFC East\" ... #>   ..$ games             : int [1:128] 16 17 17 17 16 17 17 17 17 17 ... #>   ..$ wins              : num [1:128] 12 8 8 8 11 11 9 8 9 8 ... #>   ..$ true_wins         : int [1:128] 12 8 8 8 11 11 9 8 9 8 ... #>   ..$ losses            : int [1:128] 4 9 9 9 5 6 8 9 8 9 ... #>   ..$ ties              : int [1:128] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ win_pct           : num [1:128] 0.75 0.471 0.471 0.471 0.688 ... #>   ..$ div_pct           : num [1:128] 0.667 0.5 0.5 0.333 0.333 ... #>   ..$ conf_pct          : num [1:128] 0.727 0.5 0.417 0.5 0.636 ... #>   ..$ sov               : num [1:128] 0.466 0.438 0.489 0.444 0.492 ... #>   ..$ sos               : num [1:128] 0.489 0.495 0.537 0.524 0.529 ... #>   ..$ div_rank          : int [1:128] 1 2 3 4 1 2 3 4 1 2 ... #>   ..$ div_tie_broken_by : chr [1:128] NA \"Head-To-Head Win PCT (3)\" \"Head-To-Head Win PCT (3)\" \"Head-To-Head Win PCT (3)\" ... #>   ..$ conf_rank         : int [1:128] 2 9 11 12 3 5 7 10 4 8 ... #>   ..$ conf_tie_broken_by: chr [1:128] NA \"Head-To-Head Sweep (2)\" \"Division Tiebreaker\" \"Division Tiebreaker\" ... #>   ..$ exit              : chr [1:128] \"DIV\" \"REG\" \"REG\" \"REG\" ... #>   ..$ draft_rank        : int [1:128] 25 14 17 16 27 22 31 15 30 13 ... #>  $ games       :'data.frame':\t1136 obs. of  9 variables: #>   ..$ game_type: chr [1:1136] \"REG\" \"REG\" \"REG\" \"REG\" ... #>   ..$ week     : int [1:1136] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ away_team: chr [1:1136] \"BUF\" \"NO\" \"CLE\" \"SF\" ... #>   ..$ home_team: chr [1:1136] \"LA\" \"ATL\" \"CAR\" \"CHI\" ... #>   ..$ away_rest: int [1:1136] 7 7 7 7 7 7 7 7 7 7 ... #>   ..$ home_rest: int [1:1136] 7 7 7 7 7 7 7 7 7 7 ... #>   ..$ location : chr [1:1136] \"Home\" \"Home\" \"Home\" \"Home\" ... #>   ..$ result   : int [1:1136] -5 -1 -2 -11 -3 -3 0 8 -15 6 ... #>   ..$ sim      : int [1:1136] 1 1 1 1 1 1 1 1 1 1 ... #>  $ overall     :'data.frame':\t32 obs. of  11 variables: #>   ..$ conf    : chr [1:32] \"AFC\" \"AFC\" \"AFC\" \"AFC\" ... #>   ..$ division: chr [1:32] \"AFC East\" \"AFC East\" \"AFC East\" \"AFC East\" ... #>   ..$ team    : chr [1:32] \"BUF\" \"MIA\" \"NE\" \"NYJ\" ... #>   ..$ wins    : num [1:32] 11.2 8 8.5 8 10.5 ... #>   ..$ playoff : num [1:32] 1 0.25 0.25 0 1 1 0 0.5 0 0 ... #>   ..$ div1    : num [1:32] 1 0 0 0 0 1 0 0 0 0 ... #>   ..$ seed1   : num [1:32] 0 0 0 0 0 0.25 0 0 0 0 ... #>   ..$ won_conf: num [1:32] 0 0.25 0.25 0 0 0 0 0.5 0 0 ... #>   ..$ won_sb  : num [1:32] 0 0.25 0.25 0 0 0 0 0.5 0 0 ... #>   ..$ draft1  : num [1:32] 0 0 0 0 0 0 0 0 0.25 0 ... #>   ..$ draft5  : num [1:32] 0 0 0 0 0 0 0 0 1 1 ... #>  $ team_wins   :'data.frame':\t1120 obs. of  4 variables: #>   ..$ team      : chr [1:1120] \"ARI\" \"ARI\" \"ARI\" \"ARI\" ... #>   ..$ wins      : num [1:1120] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ over_prob : num [1:1120] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ under_prob: num [1:1120] 0 0 0 0 0 0 0 0 0 0 ... #>  $ game_summary:'data.frame':\t284 obs. of  11 variables: #>   ..$ game_type      : chr [1:284] \"CON\" \"CON\" \"DIV\" \"DIV\" ... #>   ..$ week           : int [1:284] 21 21 20 20 20 20 1 1 1 1 ... #>   ..$ away_team      : chr [1:284] \"CIN\" \"SF\" \"CIN\" \"DAL\" ... #>   ..$ home_team      : chr [1:284] \"KC\" \"PHI\" \"BUF\" \"SF\" ... #>   ..$ away_wins      : int [1:284] 0 0 4 0 0 0 4 3 4 0 ... #>   ..$ home_wins      : int [1:284] 4 4 0 4 4 4 0 1 0 4 ... #>   ..$ ties           : int [1:284] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ result         : num [1:284] 3 24 -17 7 7 31 -15 4 -2 1 ... #>   ..$ games_played   : int [1:284] 4 4 4 4 4 4 4 4 4 4 ... #>   ..$ away_percentage: num [1:284] 0 0 1 0 0 0 1 0.75 1 0 ... #>   ..$ home_percentage: num [1:284] 1 1 0 1 1 1 0 0.25 0 1 ... #>  $ sim_params  :List of 10 #>   ..$ nfl_season      : int 2022 #>   ..$ playoff_seeds   : int 7 #>   ..$ simulations     : num 4 #>   ..$ chunks          : num 2 #>   ..$ byes_per_conf   : int 1 #>   ..$ tiebreaker_depth: chr \"SOS\" #>   ..$ sim_include     : chr \"DRAFT\" #>   ..$ verbosity       : chr \"MIN\" #>   ..$ nflseedR_version:Classes 'package_version', 'numeric_version'  hidden list of 1 #>   .. ..$ : int [1:4] 2 0 0 9000 #>   ..$ finished_at     : POSIXct[1:1], format: \"2025-03-25 20:31:51\" #>  - attr(*, \"class\")= chr \"nflseedR_simulation\" # }"},{"path":"https://nflseedr.com/reference/nfl_standings.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NFL Standings — nfl_standings","title":"Compute NFL Standings — nfl_standings","text":"Compute NFL Standings","code":""},{"path":"https://nflseedr.com/reference/nfl_standings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NFL Standings — nfl_standings","text":"","code":"nfl_standings(   games,   ...,   ranks = c(\"CONF\", \"DIV\", \"DRAFT\", \"NONE\"),   tiebreaker_depth = c(\"SOS\", \"PRE-SOV\", \"POINTS\", \"RANDOM\"),   playoff_seeds = NULL,   verbosity = c(\"MIN\", \"MAX\", \"NONE\") )"},{"path":"https://nflseedr.com/reference/nfl_standings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NFL Standings — nfl_standings","text":"games data frame containing real simulated game scores. Outside simulations, simply output nflreadr::load_schedules. following variables required minimum: sim season season simulation ID. Normally 1 - n simulated seasons. game_type One 'REG', 'WC', 'DIV', 'CON', 'SB' indicating game regular season game one playoff rounds. week week corresponding NFL season. away_team Team abbreviation away team (please see divisions valid team abbreviations). home_team Team abbreviation home team (please see divisions valid team abbreviations). result Equals home score - away score. tiebreakers beyond SOS used, actual scores home (home_score) away (away_score) teams must also available. ... currently used ranks One \"DIV\", \"CONF\", \"DRAFT\", \"NONE\" specify ranks - thus associated tiebreakers - determined. \"DIV\": Adds division ranking variable div_rank \"CONF\" (default): \"DIV\" + conference variable conf_rank. better performance, possible set playoff_seeds value < 16 make function skip tiebreakers irrelevant conference ranks. \"DRAFT\": \"CONF\" + draft variable draft_rank. actual pick draft based game results. trades course. tiebreaker_depth One \"SOS\", \"PRE-SOV\", \"POINTS\" \"RANDOM\". Controls tiebreakers applied. implemented tiebreakers documented https://nflseedr.com/articles/tiebreaker.html. values mean: \"SOS\" (default): Apply tiebreakers Strength Schedule. still remaining ties, break coin toss. \"PRE-SOV\": Apply tiebreakers Strength Victory. still remaining ties, break coin toss. Pre SOV? first tiebreaker requires knowledge teams played. \"POINTS\": Apply tiebreakers point differential. still remaining ties, break coin toss. go beyond SOS requires knowledge points scored points allowed. usually part season simulations, caution advised case. tiebreakers used scores real deliberately simulated. \"RANDOM\": Breaks tiebreakers coin toss. really know, allow ... playoff_seeds NULL (default), compute 16 conference ranks. means, function applies conference tiebreakers conference ranks. better performance, possible set value < 16 make function skip tiebreakers conference ranks. verbosity One \"MIN\", \"MAX\", \"NONE\" allowing user set grade verbosity status reports. mean: \"MIN\" (default): Prints main steps process. \"MAX\": Prints steps complete tiebreaking process. \"NONE\": status reports . maximize performance.","code":""},{"path":"https://nflseedr.com/reference/nfl_standings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NFL Standings — nfl_standings","text":"data.table NFL standings including ranks selected argument ranks","code":""},{"path":"https://nflseedr.com/reference/nfl_standings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute NFL Standings — nfl_standings","text":"nflseedR support levels tie-breakers moment. deepest tie-breaker currently \"best net points games\". , decision made random. However, need last level (\"best net touchdowns games\") extremely unlikely practice. Deeper levels strength schedule never actually needed resolve season-end standings since NFL expanded 32 teams.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/nfl_standings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute NFL Standings — nfl_standings","text":"","code":"# \\donttest{ try({#to avoid CRAN test problems   games <- nflreadr::load_schedules(2021:2022) }) standings <- nflseedR::nfl_standings(games) #> ℹ 20:31:53 | Initiate Standings & Tiebreaking Data #> ℹ 20:31:53 | Compute Division Ranks #> ℹ 20:31:53 | Compute Conference Ranks print(standings, digits = 3) #>     season   team   conf  division games  wins true_wins losses  ties    pf #>      <int> <char> <char>    <char> <int> <num>     <int>  <int> <int> <int> #>  1:   2021    BUF    AFC  AFC East    17  11.0        11      6     0   483 #>  2:   2021     NE    AFC  AFC East    17  10.0        10      7     0   462 #>  3:   2021    MIA    AFC  AFC East    17   9.0         9      8     0   341 #>  4:   2021    NYJ    AFC  AFC East    17   4.0         4     13     0   310 #>  5:   2021    CIN    AFC AFC North    17  10.0        10      7     0   460 #>  6:   2021    PIT    AFC AFC North    17   9.5         9      7     1   343 #>  7:   2021    CLE    AFC AFC North    17   8.0         8      9     0   349 #>  8:   2021    BAL    AFC AFC North    17   8.0         8      9     0   387 #>  9:   2021    TEN    AFC AFC South    17  12.0        12      5     0   419 #> 10:   2021    IND    AFC AFC South    17   9.0         9      8     0   451 #> 11:   2021    HOU    AFC AFC South    17   4.0         4     13     0   280 #> 12:   2021    JAX    AFC AFC South    17   3.0         3     14     0   253 #> 13:   2021     KC    AFC  AFC West    17  12.0        12      5     0   480 #> 14:   2021     LV    AFC  AFC West    17  10.0        10      7     0   374 #> 15:   2021    LAC    AFC  AFC West    17   9.0         9      8     0   474 #> 16:   2021    DEN    AFC  AFC West    17   7.0         7     10     0   335 #> 17:   2021    DAL    NFC  NFC East    17  12.0        12      5     0   530 #> 18:   2021    PHI    NFC  NFC East    17   9.0         9      8     0   444 #> 19:   2021    WAS    NFC  NFC East    17   7.0         7     10     0   335 #> 20:   2021    NYG    NFC  NFC East    17   4.0         4     13     0   258 #> 21:   2021     GB    NFC NFC North    17  13.0        13      4     0   450 #> 22:   2021    MIN    NFC NFC North    17   8.0         8      9     0   425 #> 23:   2021    CHI    NFC NFC North    17   6.0         6     11     0   311 #> 24:   2021    DET    NFC NFC North    17   3.5         3     13     1   325 #> 25:   2021     TB    NFC NFC South    17  13.0        13      4     0   511 #> 26:   2021     NO    NFC NFC South    17   9.0         9      8     0   364 #> 27:   2021    ATL    NFC NFC South    17   7.0         7     10     0   313 #> 28:   2021    CAR    NFC NFC South    17   5.0         5     12     0   304 #> 29:   2021     LA    NFC  NFC West    17  12.0        12      5     0   460 #> 30:   2021    ARI    NFC  NFC West    17  11.0        11      6     0   449 #> 31:   2021     SF    NFC  NFC West    17  10.0        10      7     0   427 #> 32:   2021    SEA    NFC  NFC West    17   7.0         7     10     0   395 #> 33:   2022    BUF    AFC  AFC East    16  13.0        13      3     0   455 #> 34:   2022    MIA    AFC  AFC East    17   9.0         9      8     0   397 #> 35:   2022     NE    AFC  AFC East    17   8.0         8      9     0   364 #> 36:   2022    NYJ    AFC  AFC East    17   7.0         7     10     0   296 #> 37:   2022    CIN    AFC AFC North    16  12.0        12      4     0   418 #> 38:   2022    BAL    AFC AFC North    17  10.0        10      7     0   350 #> 39:   2022    PIT    AFC AFC North    17   9.0         9      8     0   308 #> 40:   2022    CLE    AFC AFC North    17   7.0         7     10     0   361 #> 41:   2022    JAX    AFC AFC South    17   9.0         9      8     0   404 #> 42:   2022    TEN    AFC AFC South    17   7.0         7     10     0   298 #> 43:   2022    IND    AFC AFC South    17   4.5         4     12     1   289 #> 44:   2022    HOU    AFC AFC South    17   3.5         3     13     1   289 #> 45:   2022     KC    AFC  AFC West    17  14.0        14      3     0   496 #> 46:   2022    LAC    AFC  AFC West    17  10.0        10      7     0   391 #> 47:   2022     LV    AFC  AFC West    17   6.0         6     11     0   395 #> 48:   2022    DEN    AFC  AFC West    17   5.0         5     12     0   287 #> 49:   2022    PHI    NFC  NFC East    17  14.0        14      3     0   477 #> 50:   2022    DAL    NFC  NFC East    17  12.0        12      5     0   467 #> 51:   2022    NYG    NFC  NFC East    17   9.5         9      7     1   365 #> 52:   2022    WAS    NFC  NFC East    17   8.5         8      8     1   321 #> 53:   2022    MIN    NFC NFC North    17  13.0        13      4     0   424 #> 54:   2022    DET    NFC NFC North    17   9.0         9      8     0   453 #> 55:   2022     GB    NFC NFC North    17   8.0         8      9     0   370 #> 56:   2022    CHI    NFC NFC North    17   3.0         3     14     0   326 #> 57:   2022     TB    NFC NFC South    17   8.0         8      9     0   313 #> 58:   2022    CAR    NFC NFC South    17   7.0         7     10     0   347 #> 59:   2022     NO    NFC NFC South    17   7.0         7     10     0   330 #> 60:   2022    ATL    NFC NFC South    17   7.0         7     10     0   365 #> 61:   2022     SF    NFC  NFC West    17  13.0        13      4     0   450 #> 62:   2022    SEA    NFC  NFC West    17   9.0         9      8     0   407 #> 63:   2022     LA    NFC  NFC West    17   5.0         5     12     0   307 #> 64:   2022    ARI    NFC  NFC West    17   4.0         4     13     0   340 #>     season   team   conf  division games  wins true_wins losses  ties    pf #>        pa    pd win_pct div_pct conf_pct   sov   sos div_rank #>     <int> <int>   <num>   <num>    <num> <num> <num>    <int> #>  1:   289   194   0.647   0.833   0.5833 0.428 0.472        1 #>  2:   303   159   0.588   0.500   0.6667 0.394 0.481        2 #>  3:   373   -32   0.529   0.667   0.5000 0.379 0.464        3 #>  4:   504  -194   0.235   0.000   0.3333 0.426 0.512        4 #>  5:   376    84   0.588   0.667   0.6667 0.462 0.472        1 #>  6:   398   -55   0.559   0.667   0.5833 0.490 0.521        2 #>  7:   371   -22   0.471   0.500   0.4167 0.415 0.514        3 #>  8:   392    -5   0.471   0.167   0.4167 0.460 0.531        4 #>  9:   354    65   0.706   0.833   0.6667 0.480 0.472        1 #> 10:   365    86   0.529   0.500   0.5833 0.431 0.495        2 #> 11:   452  -172   0.235   0.500   0.3333 0.397 0.498        3 #> 12:   457  -204   0.176   0.167   0.2500 0.569 0.512        4 #> 13:   364   116   0.706   0.833   0.5833 0.517 0.538        1 #> 14:   439   -65   0.588   0.500   0.6667 0.515 0.510        2 #> 15:   459    15   0.529   0.500   0.5000 0.500 0.510        3 #> 16:   322    13   0.412   0.167   0.2500 0.357 0.484        4 #> 17:   358   172   0.706   1.000   0.8333 0.431 0.488        1 #> 18:   385    59   0.529   0.500   0.5833 0.350 0.469        2 #> 19:   434   -99   0.412   0.333   0.5000 0.420 0.529        3 #> 20:   416  -158   0.235   0.167   0.2500 0.485 0.536        4 #> 21:   371    79   0.765   0.667   0.7500 0.480 0.479        1 #> 22:   426    -1   0.471   0.667   0.5000 0.434 0.507        2 #> 23:   407   -96   0.353   0.333   0.3333 0.373 0.524        3 #> 24:   467  -142   0.206   0.333   0.2500 0.627 0.528        4 #> 25:   353   158   0.765   0.667   0.6667 0.443 0.467        1 #> 26:   335    29   0.529   0.667   0.5833 0.516 0.512        2 #> 27:   459  -146   0.412   0.333   0.3333 0.315 0.472        3 #> 28:   404  -100   0.294   0.333   0.2500 0.412 0.509        4 #> 29:   372    88   0.706   0.500   0.6667 0.409 0.483        1 #> 30:   366    83   0.647   0.667   0.5833 0.492 0.490        2 #> 31:   365    62   0.588   0.333   0.5833 0.438 0.500        3 #> 32:   366    29   0.412   0.500   0.3333 0.424 0.519        4 #> 33:   286   169   0.812   0.667   0.8182 0.471 0.489        1 #> 34:   399    -2   0.529   0.500   0.5833 0.457 0.537        2 #> 35:   347    17   0.471   0.500   0.5000 0.415 0.502        3 #> 36:   316   -20   0.412   0.333   0.4167 0.458 0.538        4 #> 37:   322    96   0.750   0.500   0.7273 0.490 0.507        1 #> 38:   315    35   0.588   0.500   0.5000 0.456 0.509        2 #> 39:   346   -38   0.529   0.500   0.4167 0.451 0.519        3 #> 40:   381   -20   0.412   0.500   0.3333 0.492 0.524        4 #> 41:   350    54   0.529   0.667   0.6667 0.438 0.467        1 #> 42:   359   -61   0.412   0.500   0.4167 0.336 0.509        2 #> 43:   427  -138   0.265   0.250   0.3750 0.500 0.512        3 #> 44:   420  -131   0.206   0.583   0.2917 0.402 0.481        4 #> 45:   369   127   0.824   1.000   0.7500 0.422 0.453        1 #> 46:   384     7   0.588   0.333   0.5833 0.341 0.443        2 #> 47:   418   -23   0.353   0.500   0.4167 0.397 0.474        3 #> 48:   359   -72   0.294   0.167   0.2500 0.465 0.481        4 #> 49:   344   133   0.824   0.667   0.7500 0.460 0.474        1 #> 50:   342   125   0.706   0.667   0.6667 0.485 0.507        2 #> 51:   371    -6   0.559   0.250   0.3750 0.395 0.526        3 #> 52:   343   -22   0.500   0.417   0.4583 0.449 0.536        4 #> 53:   427    -3   0.765   0.667   0.6667 0.425 0.474        1 #> 54:   427    26   0.529   0.833   0.5833 0.451 0.535        2 #> 55:   371    -1   0.471   0.500   0.5000 0.449 0.524        3 #> 56:   463  -137   0.176   0.000   0.0833 0.480 0.571        4 #> 57:   358   -45   0.471   0.667   0.6667 0.426 0.503        1 #> 58:   374   -27   0.412   0.667   0.5000 0.437 0.474        2 #> 59:   345   -15   0.412   0.333   0.4167 0.462 0.507        3 #> 60:   386   -21   0.412   0.333   0.5000 0.429 0.467        4 #> 61:   277   173   0.765   1.000   0.8333 0.414 0.417        1 #> 62:   401     6   0.529   0.667   0.5000 0.382 0.462        2 #> 63:   384   -77   0.294   0.167   0.2500 0.341 0.517        3 #> 64:   449  -109   0.235   0.167   0.2500 0.368 0.529        4 #>        pa    pd win_pct div_pct conf_pct   sov   sos div_rank #>            div_tie_broken_by conf_rank       conf_tie_broken_by #>                       <char>     <int>                   <char> #>  1:                     <NA>         3                     <NA> #>  2:                     <NA>         6                     <NA> #>  3:                     <NA>         9 Common Games Win PCT (2) #>  4:                     <NA>        14   Head-To-Head Sweep (2) #>  5:                     <NA>         4                     <NA> #>  6:                     <NA>         7                     <NA> #>  7:     Division Win PCT (2)        11      Division Tiebreaker #>  8:     Division Win PCT (2)        12      Division Tiebreaker #>  9:                     <NA>         1   Head-To-Head Sweep (2) #> 10:                     <NA>         8   Conference Win PCT (3) #> 11:                     <NA>        15                     <NA> #> 12:                     <NA>        16                     <NA> #> 13:                     <NA>         2                     <NA> #> 14:                     <NA>         5 Common Games Win PCT (2) #> 15:                     <NA>        10                     <NA> #> 16:                     <NA>        13                     <NA> #> 17:                     <NA>         3   Conference Win PCT (2) #> 18:                     <NA>         7   Head-To-Head Sweep (2) #> 19:                     <NA>        10   Head-To-Head Sweep (3) #> 20:                     <NA>        15                     <NA> #> 21:                     <NA>         1   Conference Win PCT (2) #> 22:                     <NA>         9                     <NA> #> 23:                     <NA>        13                     <NA> #> 24:                     <NA>        16                     <NA> #> 25:                     <NA>         2                     <NA> #> 26:                     <NA>         8                     <NA> #> 27:                     <NA>        12                     <NA> #> 28:                     <NA>        14                     <NA> #> 29:                     <NA>         4                     <NA> #> 30:                     <NA>         5                     <NA> #> 31:                     <NA>         6                     <NA> #> 32:                     <NA>        11 Common Games Win PCT (2) #> 33:                     <NA>         2                     <NA> #> 34:                     <NA>         7   Head-To-Head Sweep (2) #> 35:                     <NA>         9                     <NA> #> 36:                     <NA>        10 Common Games Win PCT (2) #> 37:                     <NA>         3                     <NA> #> 38:                     <NA>         6                     <NA> #> 39:                     <NA>         8                     <NA> #> 40:                     <NA>        12                     <NA> #> 41:                     <NA>         4                     <NA> #> 42:                     <NA>        11   Conference Win PCT (2) #> 43:                     <NA>        15                     <NA> #> 44:                     <NA>        16                     <NA> #> 45:                     <NA>         1                     <NA> #> 46:                     <NA>         5   Conference Win PCT (2) #> 47:                     <NA>        13                     <NA> #> 48:                     <NA>        14                     <NA> #> 49:                     <NA>         1                     <NA> #> 50:                     <NA>         5                     <NA> #> 51:                     <NA>         6                     <NA> #> 52:                     <NA>         9                     <NA> #> 53:                     <NA>         3                     <NA> #> 54:                     <NA>         8                     <NA> #> 55:                     <NA>        10                     <NA> #> 56:                     <NA>        16                     <NA> #> 57:                     <NA>         4                     <NA> #> 58: Head-To-Head Win PCT (3)        11      Division Tiebreaker #> 59: Head-To-Head Win PCT (3)        12      Division Tiebreaker #> 60: Head-To-Head Win PCT (3)        13      Division Tiebreaker #> 61:                     <NA>         2   Conference Win PCT (2) #> 62:                     <NA>         7   Head-To-Head Sweep (2) #> 63:                     <NA>        14                     <NA> #> 64:                     <NA>        15                     <NA> #>            div_tie_broken_by conf_rank       conf_tie_broken_by # }"},{"path":"https://nflseedr.com/reference/nfl_standings_prettify.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pretty NFL Standings Table — nfl_standings_prettify","title":"Compute Pretty NFL Standings Table — nfl_standings_prettify","text":"Uses R package gt create pretty html table NFL standings.","code":""},{"path":"https://nflseedr.com/reference/nfl_standings_prettify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pretty NFL Standings Table — nfl_standings_prettify","text":"","code":"nfl_standings_prettify(   standings,   ...,   grp_by = c(\"div\", \"conf\", \"nfl\"),   order_by = c(\"div_rank\", \"conf_rank\", \"draft_rank\"),   reverse = FALSE )"},{"path":"https://nflseedr.com/reference/nfl_standings_prettify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pretty NFL Standings Table — nfl_standings_prettify","text":"standings table NFL standings. Usually computed nfl_standings() ... Currently unused. function errors objects passed dots, .e. unnamed arguments provided. grp_by Group output table Division (\"div\"), Conference (\"conf\"), complete league (\"nfl\") order_by Order teams division rank, conference rank, draft rank reverse Teams sorted argument order_by ascending order default. reverse set TRUE, order reversed.","code":""},{"path":"https://nflseedr.com/reference/nfl_standings_prettify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pretty NFL Standings Table — nfl_standings_prettify","text":"object class gt_tbl.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/nfl_standings_prettify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pretty NFL Standings Table — nfl_standings_prettify","text":"","code":"# \\donttest{ # Calculate standings s <- nflreadr::load_schedules(2024) |>   nflseedR::nfl_standings(ranks = \"DRAFT\") #> ℹ 20:31:53 | Initiate Standings & Tiebreaking Data #> ℹ 20:31:53 | Compute Division Ranks #> ℹ 20:31:53 | Compute Conference Ranks #> ℹ 20:31:53 | Compute Draft Order  # Create table tbl1 <- nfl_standings_prettify(s, grp_by = \"conf\", order_by = \"conf_rank\") tbl2 <- nfl_standings_prettify(s, grp_by = \"nfl\", order_by = \"draft_rank\")  # The output of tbl1 and tbl2 is given in the above images. # }"},{"path":"https://nflseedr.com/reference/nflseedR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nflseedR: Functions to Efficiently Simulate and Evaluate NFL Seasons — nflseedR-package","title":"nflseedR: Functions to Efficiently Simulate and Evaluate NFL Seasons — nflseedR-package","text":"set functions simulate National Football League seasons including sophisticated tie-breaking procedures.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/nflseedR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nflseedR: Functions to Efficiently Simulate and Evaluate NFL Seasons — nflseedR-package","text":"Maintainer: Sebastian Carl mrcaseb@gmail.com [copyright holder] Authors: Lee Sharpe","code":""},{"path":"https://nflseedr.com/reference/nflseedR_compute_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NFL Game Results in Season Simulations — nflseedR_compute_results","title":"Compute NFL Game Results in Season Simulations — nflseedR_compute_results","text":"default nflseedR function compute game results season simulations.","code":""},{"path":"https://nflseedr.com/reference/nflseedR_compute_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NFL Game Results in Season Simulations — nflseedR_compute_results","text":"","code":"nflseedR_compute_results(teams, games, week_num, ...)"},{"path":"https://nflseedr.com/reference/nflseedR_compute_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NFL Game Results in Season Simulations — nflseedR_compute_results","text":"teams list teams simulation number. usually calculated automatically user facing. can used \"transport\" team information like elo ratings one simulated week next. Defaults sims_teams_example. Please see example understand required data structure. games NFL schedule results missing. compute_results supposed compute results weekly base. Defaults sims_games_example. Please see example understand required data structure. week_num week NFL season function compute results. ... Additional parameters used function. possible pass argument elo function. must named vector names correspond team abbreviations values correspond initial elo ratings, updated week based results transported next week.","code":""},{"path":"https://nflseedr.com/reference/nflseedR_compute_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NFL Game Results in Season Simulations — nflseedR_compute_results","text":"list updated teams games tables.","code":""},{"path":"https://nflseedr.com/reference/nflseedR_compute_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute NFL Game Results in Season Simulations — nflseedR_compute_results","text":"function implements variant 538's elo model initially coded Lee Sharpe (nflseedR 1.0) performance rewritten Sebastian Carl (nflseedR 2.0).","code":""},{"path":"https://nflseedr.com/reference/nflseedR_compute_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute NFL Game Results in Season Simulations — nflseedR_compute_results","text":"","code":"g <- nflseedR::sims_games_example # The functions expects the variable \"sim\" instead of \"season\" g$sim <- g$season t <- nflseedR::sims_teams_example  out <- nflseedR_compute_results(   teams = t,   games = g,   week_num = 5L )  str(out, max.level = 2) #> List of 2 #>  $ teams:Classes ‘data.table’ and 'data.frame':\t64 obs. of  6 variables: #>   ..$ sim     : int [1:64] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ team    : chr [1:64] \"ARI\" \"ATL\" \"BAL\" \"BUF\" ... #>   ..$ conf    : chr [1:64] \"NFC\" \"NFC\" \"AFC\" \"AFC\" ... #>   ..$ division: chr [1:64] \"NFC West\" \"NFC South\" \"AFC North\" \"AFC East\" ... #>   ..$ sdiv    : chr [1:64] \"NFCW\" \"NFCS\" \"AFCN\" \"AFCE\" ... #>   ..$ elo     : num [1:64] 1376 1642 1404 1174 1467 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ games:Classes ‘data.table’ and 'data.frame':\t284 obs. of  10 variables: #>   ..$ season   : int [1:284] 2022 2022 2022 2022 2022 2022 2022 2022 2022 2022 ... #>   ..$ game_type: chr [1:284] \"REG\" \"REG\" \"REG\" \"REG\" ... #>   ..$ week     : int [1:284] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ away_team: chr [1:284] \"BUF\" \"NO\" \"CLE\" \"SF\" ... #>   ..$ home_team: chr [1:284] \"LA\" \"ATL\" \"CAR\" \"CHI\" ... #>   ..$ away_rest: int [1:284] 7 7 7 7 7 7 7 7 7 7 ... #>   ..$ home_rest: int [1:284] 7 7 7 7 7 7 7 7 7 7 ... #>   ..$ location : chr [1:284] \"Home\" \"Home\" \"Home\" \"Home\" ... #>   ..$ result   : int [1:284] NA -1 -2 NA -3 -3 0 NA -15 6 ... #>   ..$ sim      : int [1:284] 2022 2022 2022 2022 2022 2022 2022 2022 2022 2022 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>   ..- attr(*, \"index\")= int(0)  #>   .. ..- attr(*, \"__week__location__game_type\")= int [1:284] 1 2 3 4 5 6 7 8 9 10 ... #>   .. .. ..- attr(*, \"starts\")= int [1:27] 1 17 33 49 64 65 80 81 95 109 ... #>   .. .. ..- attr(*, \"maxgrpn\")= int 16 #>   .. .. ..- attr(*, \"anyna\")= int 0 #>   .. .. ..- attr(*, \"anyinfnan\")= int 0 #>   .. .. ..- attr(*, \"anynotascii\")= int 0 #>   .. .. ..- attr(*, \"anynotutf8\")= int 0"},{"path":"https://nflseedr.com/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. nflreadr load_schedules","code":""},{"path":"https://nflseedr.com/reference/sims_games_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Games Data used in NFL Simulations — sims_games_example","title":"Example Games Data used in NFL Simulations — sims_games_example","text":"Example Games Data used NFL Simulations","code":""},{"path":"https://nflseedr.com/reference/sims_games_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Games Data used in NFL Simulations — sims_games_example","text":"","code":"sims_games_example"},{"path":"https://nflseedr.com/reference/sims_games_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Games Data used in NFL Simulations — sims_games_example","text":"data frame 284 rows 9 variables containing NFL schedule information.","code":""},{"path":"https://nflseedr.com/reference/sims_games_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Games Data used in NFL Simulations — sims_games_example","text":"Please see data-raw/sim_examples.R code create data.","code":""},{"path":"https://nflseedr.com/reference/sims_games_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Games Data used in NFL Simulations — sims_games_example","text":"","code":"str(sims_games_example) #> Classes ‘data.table’ and 'data.frame':\t284 obs. of  9 variables: #>  $ season   : int  2022 2022 2022 2022 2022 2022 2022 2022 2022 2022 ... #>  $ game_type: chr  \"REG\" \"REG\" \"REG\" \"REG\" ... #>  $ week     : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ away_team: chr  \"BUF\" \"NO\" \"CLE\" \"SF\" ... #>  $ home_team: chr  \"LA\" \"ATL\" \"CAR\" \"CHI\" ... #>  $ away_rest: int  7 7 7 7 7 7 7 7 7 7 ... #>  $ home_rest: int  7 7 7 7 7 7 7 7 7 7 ... #>  $ location : chr  \"Home\" \"Home\" \"Home\" \"Home\" ... #>  $ result   : int  NA -1 -2 NA -3 -3 0 NA -15 6 ..."},{"path":"https://nflseedr.com/reference/sims_teams_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Teams Data used in NFL Simulations — sims_teams_example","title":"Example Teams Data used in NFL Simulations — sims_teams_example","text":"Example Teams Data used NFL Simulations","code":""},{"path":"https://nflseedr.com/reference/sims_teams_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Teams Data used in NFL Simulations — sims_teams_example","text":"","code":"sims_teams_example"},{"path":"https://nflseedr.com/reference/sims_teams_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Teams Data used in NFL Simulations — sims_teams_example","text":"data frame 64 rows 5 variables containing team name division information.","code":""},{"path":"https://nflseedr.com/reference/sims_teams_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Teams Data used in NFL Simulations — sims_teams_example","text":"Please see data-raw/sim_examples.R code create data.","code":""},{"path":"https://nflseedr.com/reference/sims_teams_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Teams Data used in NFL Simulations — sims_teams_example","text":"","code":"str(sims_teams_example) #> Classes ‘data.table’ and 'data.frame':\t64 obs. of  5 variables: #>  $ sim     : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ team    : chr  \"ARI\" \"ATL\" \"BAL\" \"BUF\" ... #>  $ conf    : chr  \"NFC\" \"NFC\" \"AFC\" \"AFC\" ... #>  $ division: chr  \"NFC West\" \"NFC South\" \"AFC North\" \"AFC East\" ... #>  $ sdiv    : chr  \"NFCW\" \"NFCS\" \"AFCN\" \"AFCE\" ..."},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an NFL Season — simulate_nfl","title":"Simulate an NFL Season — simulate_nfl","text":"function simulates given NFL season multiple times using custom functions estimate simulate game results computes outcome given season including playoffs draft order. possible run function parallel processes calling appropriate plan. Progress updates can activated calling handlers start simulations. Please see given section \"Details\" information.","code":""},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an NFL Season — simulate_nfl","text":"","code":"simulate_nfl(   nfl_season = NULL,   process_games = NULL,   ...,   playoff_seeds = ifelse(nfl_season >= 2020, 7, 6),   if_ended_today = FALSE,   fresh_season = FALSE,   fresh_playoffs = FALSE,   tiebreaker_depth = 3,   test_week = NULL,   simulations = 1000,   sims_per_round = max(ceiling(simulations/future::availableCores() * 2), 100),   .debug = FALSE,   print_summary = FALSE,   sim_include = c(\"DRAFT\", \"REG\", \"POST\") )"},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an NFL Season — simulate_nfl","text":"nfl_season Season simulate process_games function estimate simulate results games. Uses team, schedule, week number arguments. ... Additional parameters passed function process_games. playoff_seeds Number playoff teams per conference (increased 2020 6 7). if_ended_today Either TRUE FALSE. TRUE, ignore remaining regular season games cut playoffs based current regular season data. fresh_season Either TRUE FALSE. Whether blank game results simulate season scratch (TRUE) take game results far given simulate rest (FALSE). fresh_playoffs Either TRUE FALSE. Whether blank playoff game results simulate postseason scratch (TRUE) take game results far given simulate rest (FALSE). tiebreaker_depth single value equal 1, 2, 3. default 3. value controls depth tiebreakers shall applied. deepest currently implemented tiebreaker strength schedule. following values valid: tiebreaker_depth = 1 Break ties coinflip. Fastest variant. tiebreaker_depth = 2 Apply head--head division win percentage tiebreakers. Random still tied. tiebreaker_depth = 3 Apply tiebreakers strength schedule. Random still tied. test_week Aborts simulator reaches week returns results process games call. simulations Equals number times given NFL season shall simulated sims_per_round number simulations can split multiple rounds processed parallel. parameter controls number simulations per round. default value determines number locally available cores calculates number simulations per round equal half available cores (various benchmarks showed results optimal performance). .debug Either TRUE FALSE. Controls whether additional messages printed console showing tie-breaking algorithms currently performing. print_summary TRUE, prints summary statistics console. sim_include One \"REG\", \"POST\", \"DRAFT\" (default). Simulation behave follows: REG Simulate regular season compute standings, division ranks, playoff seeds POST REG + simulate postseason DRAFT POST + compute draft order","code":""},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an NFL Season — simulate_nfl","text":"nflseedR_simulation object containing list 6 data frames data frames results simulated games, final standings simulated season (incl. playoffs draft order), summary statistics across simulated seasons, simulation parameters. full list, please see package website.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"more-speed-using-parallel-processing","dir":"Reference","previous_headings":"","what":"More Speed Using Parallel Processing","title":"Simulate an NFL Season — simulate_nfl","text":"recommend choosing default parallel processing method saving environment variable R user profile make sure futures resolved chosen method default. can done following given steps. First, run following line user profile opened automatically. saved environment variables yet, empty file.   opened file add next line, save file restart R session. Please note example sets \"multisession\" default. users appropriate plan please make sure truly .   session freshly restarted please check method worked running next line. output FALSE successfully set default non-sequential future::plan(). output TRUE functions behave like called purrr::map() multisession.   information possible plans please see future package Readme.","code":"usethis::edit_r_environ() R_FUTURE_PLAN=\"multisession\" inherits(future::plan(), \"sequential\")"},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"get-progress-updates-while-functions-are-running","dir":"Reference","previous_headings":"","what":"Get Progress Updates while Functions are Running","title":"Simulate an NFL Season — simulate_nfl","text":"nflfastR functions able show progress updates using progressr::progressor() turned function called. least two basic ways either activating progress updates globally (current session)   piping function call progressr::with_progress():   information work progress handlers please see progressr::progressr.","code":"progressr::handlers(global = TRUE) simulate_nfl(2020, fresh_season = TRUE) |>   progressr::with_progress()"},{"path":[]},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an NFL Season — simulate_nfl","text":"","code":"# \\donttest{ library(nflseedR)  # Activate progress updates # progressr::handlers(global = TRUE)  # Parallel processing can be activated via the following line # future::plan(\"multisession\")  try({#to avoid CRAN test problems # Simulate the season 4 times in 2 rounds sim <- nflseedR::simulate_nfl(   nfl_season = 2020,   fresh_season = TRUE,   simulations = 4,   sims_per_round = 2 )  # Overview output dplyr::glimpse(sim) }) #> ℹ 20:31:55 | Loading games data #> ℹ Computation in multiple rounds can be accelerated with parallel processing. #> ℹ You should consider calling a `future::plan()`. Please see the function #>   documentation for further information. #> ℹ Will go on sequentially... #> ℹ 20:31:55 | Beginning simulation of 4 seasons in 2 rounds #> ℹ 20:32:00 | Combining simulation data #> ℹ 20:32:00 | Aggregating across simulations #> ℹ 20:32:00 | DONE! #> List of 6 #>  $ teams       :Classes ‘data.table’ and 'data.frame':\t128 obs. of  18 variables: #>   ..$ sim        : num [1:128] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ team       : chr [1:128] \"BUF\" \"MIA\" \"NE\" \"NYJ\" ... #>   ..$ conf       : chr [1:128] \"AFC\" \"AFC\" \"AFC\" \"AFC\" ... #>   ..$ division   : chr [1:128] \"AFC East\" \"AFC East\" \"AFC East\" \"AFC East\" ... #>   ..$ games      : int [1:128] 16 16 16 16 16 16 16 16 16 16 ... #>   ..$ wins       : num [1:128] 14 11 7 5 5 5 6 10 5 14 ... #>   ..$ true_wins  : int [1:128] 14 11 7 5 5 5 6 10 5 14 ... #>   ..$ losses     : int [1:128] 2 5 9 11 11 11 10 6 11 2 ... #>   ..$ ties       : int [1:128] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ win_pct    : num [1:128] 0.875 0.688 0.438 0.312 0.312 ... #>   ..$ div_pct    : num [1:128] 0.833 0.5 0.333 0.333 0.333 ... #>   ..$ conf_pct   : num [1:128] 0.833 0.583 0.5 0.333 0.333 ... #>   ..$ sov        : num [1:128] 0.469 0.426 0.455 0.388 0.4 ... #>   ..$ sos        : num [1:128] 0.469 0.488 0.492 0.547 0.512 ... #>   ..$ div_rank   : num [1:128] 1 2 3 4 3 4 2 1 4 1 ... #>   ..$ seed       : num [1:128] 2 6 NA NA NA NA NA 3 NA 1 ... #>   ..$ exit       : num [1:128] 19 19 17 17 17 17 17 18 17 20 ... #>   ..$ draft_order: num [1:128] 28 26 13 11 6 5 12 22 9 30 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ games       :Classes ‘data.table’ and 'data.frame':\t1076 obs. of  9 variables: #>   ..$ sim      : num [1:1076] 1 2 1 2 1 2 1 2 1 2 ... #>   ..$ game_type: chr [1:1076] \"REG\" \"REG\" \"REG\" \"REG\" ... #>   ..$ week     : int [1:1076] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ away_team: chr [1:1076] \"HOU\" \"HOU\" \"SEA\" \"SEA\" ... #>   ..$ home_team: chr [1:1076] \"KC\" \"KC\" \"ATL\" \"ATL\" ... #>   ..$ away_rest: num [1:1076] 7 7 7 7 7 7 7 7 7 7 ... #>   ..$ home_rest: num [1:1076] 7 7 7 7 7 7 7 7 7 7 ... #>   ..$ location : chr [1:1076] \"Home\" \"Home\" \"Home\" \"Home\" ... #>   ..$ result   : int [1:1076] 5 3 -6 -4 14 10 19 18 -12 -23 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ overall     : tibble [32 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ conf    : chr [1:32] \"AFC\" \"AFC\" \"AFC\" \"AFC\" ... #>   ..$ division: chr [1:32] \"AFC East\" \"AFC East\" \"AFC East\" \"AFC East\" ... #>   ..$ team    : chr [1:32] \"BUF\" \"MIA\" \"NE\" \"NYJ\" ... #>   ..$ wins    : num [1:32] 9.25 9.25 7 8.5 7.25 ... #>   ..$ playoff : num [1:32] 0.5 0.75 0 0.25 0.25 0.5 0.5 0.75 0 0.75 ... #>   ..$ div1    : num [1:32] 0.5 0.25 0 0.25 0.25 0 0.5 0.25 0 0.75 ... #>   ..$ seed1   : num [1:32] 0 0.25 0 0.25 0.25 0 0 0 0 0.25 ... #>   ..$ won_conf: num [1:32] 0.25 0.25 0 0.25 0 0 0 0 0 0 ... #>   ..$ won_sb  : num [1:32] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ draft1  : num [1:32] 0 0 0 0 0 0 0.25 0 0 0 ... #>   ..$ draft5  : num [1:32] 0 0.25 0 0 0 0.5 0.25 0 0.25 0 ... #>  $ team_wins   : tibble [1,056 × 4] (S3: tbl_df/tbl/data.frame) #>   ..$ team      : chr [1:1056] \"ARI\" \"ARI\" \"ARI\" \"ARI\" ... #>   ..$ wins      : num [1:1056] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ over_prob : num [1:1056] 1 1 1 1 1 1 0.5 0.5 0.5 0.5 ... #>   ..$ under_prob: num [1:1056] 0 0 0 0 0 0 0 0.5 0.5 0.5 ... #>  $ game_summary: tibble [308 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ game_type      : chr [1:308] \"REG\" \"REG\" \"REG\" \"REG\" ... #>   ..$ week           : int [1:308] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ away_team      : chr [1:308] \"ARI\" \"CHI\" \"CLE\" \"DAL\" ... #>   ..$ home_team      : chr [1:308] \"SF\" \"DET\" \"BAL\" \"LA\" ... #>   ..$ away_wins      : int [1:308] 2 4 2 0 1 1 3 1 2 2 ... #>   ..$ home_wins      : int [1:308] 2 0 2 4 3 3 1 3 2 2 ... #>   ..$ ties           : int [1:308] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ result         : num [1:308] 4.75 -19 -0.25 10.25 8.5 ... #>   ..$ games_played   : int [1:308] 4 4 4 4 4 4 4 4 4 4 ... #>   ..$ away_percentage: num [1:308] 0.5 1 0.5 0 0.25 0.25 0.75 0.25 0.5 0.5 ... #>   ..$ home_percentage: num [1:308] 0.5 0 0.5 1 0.75 0.75 0.25 0.75 0.5 0.5 ... #>  $ sim_params  :List of 14 #>   ..$ nfl_season      : num 2020 #>   ..$ playoff_seeds   : num 7 #>   ..$ if_ended_today  : logi FALSE #>   ..$ fresh_season    : logi TRUE #>   ..$ fresh_playoffs  : logi FALSE #>   ..$ tiebreaker_depth: num 3 #>   ..$ test_week       : NULL #>   ..$ simulations     : num 4 #>   ..$ sims_per_round  : num 2 #>   ..$ .debug          : logi FALSE #>   ..$ print_summary   : logi FALSE #>   ..$ sim_include     : chr \"DRAFT\" #>   ..$ nflseedR_version:Classes 'package_version', 'numeric_version'  hidden list of 1 #>   .. ..$ : int [1:4] 2 0 0 9000 #>   ..$ finished_at     : POSIXct[1:1], format: \"2025-03-25 20:32:00\" #>  - attr(*, \"class\")= chr \"nflseedR_simulation\" # }"},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"nflseedR supports custom functions compute results season simulations argument compute_results season simulation function nfl_simulations. ensure custom functions work nflseedR expects , recommended verify behavior. function first checks structure output whether game results changed expected. Whenever problem found, function error hint problem (means might required iterate problems function stops erroring). See detail section information expected behavior.","code":""},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"","code":"simulations_verify_fct(   compute_results,   ...,   games = nflseedR::sims_games_example,   teams = nflseedR::sims_teams_example )"},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"compute_results function compute results games. See detail section information expected behavior. ... arguments passed compute_results. games NFL schedule results missing. compute_results supposed compute results weekly base. Defaults sims_games_example. Please see example understand required data structure. teams list teams simulation number. usually calculated automatically user facing. can used \"transport\" team information like elo ratings one simulated week next. Defaults sims_teams_example. Please see example understand required data structure.","code":""},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"Returns TRUE invisibly problems found.","code":""},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"following sections detail requirements compute_results function. anything unclear, please see source code nflseedR's default function nflseedR_compute_results.","code":""},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":"required-function-arguments-of-compute-results","dir":"Reference","previous_headings":"","what":"Required Function Arguments of compute_results","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"function passed compute_results required support arguments \"teams\", \"games\", \"week_num\". two leading ones already described . latter factor length 1, identifies current week. Regular season weeks labeled \"1\", \"2\", etc. Playoff weeks labeled \"WC\", \"DIV\", \"CON\", \"SB\".","code":""},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":"required-output-structure-of-compute-results","dir":"Reference","previous_headings":"","what":"Required Output Structure of compute_results","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"function passed compute_results required return list two objects \"teams\" \"games\" passed arguments name. function must remove rows columns. last line compute_results usually looks like","code":"list(\"teams\" = teams, \"games\" = games)"},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":"required-behavior-of-compute-results-when-computing-game-results","dir":"Reference","previous_headings":"","what":"Required Behavior of compute_results when Computing Game Results","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"nflseedR calls compute_results every week result missing games. variable result defined point differential home team away team. home team loses, value therefore < 0, wins > 0 ties == 0. support elo-based simulations, done loop elo ratings can updated based results \"transported\" week week. can \"transport\" ratings information joining \"teams\" table. behavior requires compute_results changes results current week - called week_num. already result. compute_results must compute result   playoffs, also special case matches end tie (result == 0). cases, ties simulated anyway occur rarely. event simulated, must playoffs.","code":"week == week_num & is.na(result)"},{"path":"https://nflseedr.com/reference/simulations_verify_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify Custom NFL Result Simulation Function — simulations_verify_fct","text":"","code":"simulations_verify_fct(nflseedR_compute_results) #> Warning: A shallow copy of this data.table was taken so that := can add or remove 1 columns by reference. At an earlier point, this data.table was copied by R (or was created manually using structure() or similar). Avoid names<- and attr<- which in R currently (and oddly) may copy the whole data.table. Use set* syntax instead to avoid copying: ?set, ?setnames and ?setattr. It's also not unusual for data.table-agnostic packages to produce tables affected by this issue. If this message doesn't help, please report your use case to the data.table issue tracker so the root cause can be fixed or this message improved. #> ✔ No problems found!"},{"path":"https://nflseedr.com/reference/summary.nflseedR_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","title":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","text":"Uses R package gt create pretty html table nflseedR simulation summary data frame.","code":""},{"path":"https://nflseedr.com/reference/summary.nflseedR_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","text":"","code":"# S3 method for class 'nflseedR_simulation' summary(object, ...)"},{"path":"https://nflseedr.com/reference/summary.nflseedR_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","text":"object object summary desired. ... additional arguments passed methods (currently used).","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/summary.nflseedR_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","text":"","code":"# \\donttest{ library(nflseedR) # set seed for recreation, # internal parallelization requires a L'Ecuyer-CMRG random number generator set.seed(19980310, kind = \"L'Ecuyer-CMRG\")  # Simulate the season 20 times in 1 round sim <- nflseedR::simulate_nfl(   nfl_season = 2021,   fresh_season = TRUE,   simulations = 20 ) #> ℹ 20:32:03 | Loading games data #> ℹ 20:32:03 | Beginning simulation of 20 seasons in 1 round #> ℹ 20:32:08 | Combining simulation data #> ℹ 20:32:08 | Aggregating across simulations #> ℹ 20:32:08 | DONE!  # Create Summary Tables tbl <- summary(sim)  # The output of tbl is given in the above image. # }"},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-development-version","dir":"Changelog","previous_headings":"","what":"nflseedR (development version)","title":"nflseedR (development version)","text":"nflseedR_compute_results() correctly adjusts Elo difference postseason games. (#54) nfl_standings() returns exit value consistent nfl_simulations() argument ranks = \"DRAFT\". (#56) nfl_standings_prettify() shows exit (available). (#56)","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-200","dir":"Changelog","previous_headings":"","what":"nflseedR 2.0.0","title":"nflseedR 2.0.0","text":"CRAN release: 2025-03-24 major release introduces new generation high efficient standings simulation code","code":""},{"path":"https://nflseedr.com/news/index.html","id":"new-features-2-0-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nflseedR 2.0.0","text":"New function nfl_standings() high efficient standings calculation. functions compute_division_ranks(), compute_conference_seeds(), compute_draft_order() deprecated future release. (#45) New function nfl_simulations() new, highly efficient approach season simulations. completely new design simulator, aim achieving significantly faster run times eliminating weaknesses old approach (simulate_nfl()). introduction function supplemented two new utility functions nflseedR_compute_results(), simulations_verify_fct(). functions form new standard computing results (user function ) respectively allow verification functionality functions instead nflseedR_compute_results(). planned simulate_nfl() deprecated future release dependencies nflseedR can significantly reduced. (#47) New function nfl_standings_prettify() computes gt::gt() table output created nfl_standings(). (#49)","code":""},{"path":"https://nflseedr.com/news/index.html","id":"bug-fixes-and-minor-improvements-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes and Minor Improvements","title":"nflseedR 2.0.0","text":"nfl_standings() now supports tiebreaker_depth = \"POINTS\" breaks ties using combined point ranks point differentials. means tiebreakers except net touchdowns now implemented. (#47) Fixed bug nfl_standings() tie breaking procedure didn’t restart correctly teams eliminated others remained tied. (#47) summary method summary.nflseedR_simulation() explicitly sets columns width logo column columns hidden unclear scenarios. summary method summary.nflseedR_simulation() now requires gt version v0.9.0 higher avoid warnings deprecated arguments. Fixed error simulate_nfl() crashes “fake schedule” isn’t tibble. (#43) function load_sharpe_games deprecated. replaced fairly long time ago nflreadr::load_schedules(). (#47) nflseedR now requires R 4.1 allow package use R’s native pipe |> operator. follows Tidyverse R version support rules. (#48)","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-120","dir":"Changelog","previous_headings":"","what":"nflseedR 1.2.0","title":"nflseedR 1.2.0","text":"CRAN release: 2023-01-05 simulate_nfl() gained new argument sim_include allow access actually simulated. makes possible skip playoff simulation (possibly heavy) computation draft order. (#34) summary method summary.nflseedR_simulation() now hides columns values NA. useful simulate_nfl() skips postseason draft order. method also re-formats number simulations subtitle, e.g. “10000” “10k” (requires scales >= 1.2.0, good idea update scales anyways). (#35) simulate_nfl() now uses data.table combine simulation rounds data. significant performance improvement. returned list \"sim_params\" now includes package version nflseedR (debugging) current system time simulation finished. (#36) Lots internal improvements reduce package dependencies messaging. (#36) summary method summary.nflseedR_simulation() now uses fmt_pct_special() format probability strings avoid impression overconfidence rounding integer percentages. (#37)","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-110","dir":"Changelog","previous_headings":"","what":"nflseedR 1.1.0","title":"nflseedR 1.1.0","text":"CRAN release: 2022-07-07 Added data frame game_summary output simulate_nfl() aggregates matchups across simulated seasons (#24) Updated description variables load_sharpe_games() (#24) output simulate_nfl() now class nflseedR_simulation allows implementation summary() method computes gt() table simulation summary data frame. (#26) standings data frame calculated compute_division_ranks() now outputs losses ties well. (#27)","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-102","dir":"Changelog","previous_headings":"","what":"nflseedR 1.0.2","title":"nflseedR 1.0.2","text":"CRAN release: 2021-04-10 Improved error handling function load_sharpe_games() CRAN tests","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-101","dir":"Changelog","previous_headings":"","what":"nflseedR 1.0.1","title":"nflseedR 1.0.1","text":"CRAN release: 2021-03-31 Added support fake schedule simulating upcoming season NFL released official schedule. updated documentation function load_sharpe_games() new columns away_qb_id, home_qb_id, away_qb_name home_qb_name.","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-100","dir":"Changelog","previous_headings":"","what":"nflseedR 1.0.0","title":"nflseedR 1.0.0","text":"Initial release.","code":""}]
