[{"path":[]},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team hello@dynastyprocess.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://nflseedr.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Many hands make light work! ways can contribute project:","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"open-an-issue","dir":"","previous_headings":"","what":"Open an issue","title":"Contributing","text":"can open issue ’d like request specific function report bug/error.","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). can also bring changes nflverse discord team happy discuss!","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://nflseedr.com/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note usethis project released Contributor Code Conduct. contributing project agree abide terms. contribution guidelines inspired guidelines {usethis}","code":""},{"path":"https://nflseedr.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Lee Sharpe, Sebastian Carl Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Get started with nflseedR","text":"nflseedR designed efficiently take sophisticated complex rule set NFL regarding division ranks, postseason seeding draft order. intended used NFL season simulations help modelers focus models rather tie-breaking procedures. NFL’s official procedures breaking ties postseason playoffs can found site explains assigning draft picks. However, must mentioned nflseedR support levels tie-breakers moment. deepest tie-breaker possible moment strength schedule. , decision made random. noted, however, need additional levels extremely unlikely reality.","code":""},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"using-in-simulation-functions","dir":"Articles","previous_headings":"","what":"Using In-Simulation Functions","title":"Get started with nflseedR","text":"can get NFL game data function: load_sharpe_games() collect game information results prefer, can take generate set game outcomes let nflseedR handle NFL seeding tiebreaker math three -simulation functions (can handle thousands seasons ): compute_division_ranks() find division winners, compute_conference_seeds() get playoff participants, compute_draft_order() find resulting draft pick team. following sections demonstrate use input required. Loading package obligatory, done first (along dplyr data wrangling pipe):","code":"library(nflseedR) library(dplyr, warn.conflicts = FALSE) options(digits = 3) options(warn = -1)"},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"load-sharpe-games","dir":"Articles","previous_headings":"Using In-Simulation Functions","what":"Load Sharpe Games","title":"Get started with nflseedR","text":"pulls game information games.rds file (equivalent games.csv file) Lee Sharpe’s NFL Data Github","code":"games <- nflseedR::load_sharpe_games() games %>% utils::tail(20) %>% knitr::kable()"},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"find-division-ranks","dir":"Articles","previous_headings":"Using In-Simulation Functions","what":"Find Division Ranks","title":"Get started with nflseedR","text":"functions computes division ranks based data frame containing game results one NFL seasons. let’s load game data first (example uses game data 2012 2019 seasons): Please note required column names: sim : simulation ID. Normally 1 - n simulated seasons (like case) just year. game_type : One ‘REG’, ‘WC’, ‘DIV’, ‘CON’, ‘SB’ indicating game regular season game one playoff rounds. week : week corresponding NFL season. away_team : Team abbreviation away team. home_team : Team abbreviation home team. result : Equals home score - away score. Now games data frame can used compute division ranks (parameter .debug set TRUE show function ). Please note function outputs list data frames, actual division standings well data frame named h2h. latter important input functions (used break head--head ties) can computed compute_division_ranks(). resulting division standings data frame 2012 season season seconds division rank NFC South required three way tie-breaker Panthers, Saints Bucs. broken three-way Conference Record. can seen given console output: ...DIV (3): Common Record division rank number 2. Bucs lost tie-breaker 0.333 win percentage conference tie-breaking procedure goes 2-way head--head comparison.","code":"games <- nflseedR::load_sharpe_games() %>%   dplyr::filter(season %in% c(2012, 2019)) %>%   dplyr::select(sim = season, game_type, week, away_team, home_team, result)  dplyr::glimpse(games) #> Rows: 534 #> Columns: 6 #> $ sim       <int> 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, … #> $ game_type <chr> \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG… #> $ week      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, … #> $ away_team <chr> \"DAL\", \"IND\", \"PHI\", \"STL\", \"MIA\", \"ATL\", \"JAX\", \"WAS\", \"BUF… #> $ home_team <chr> \"NYG\", \"CHI\", \"CLE\", \"DET\", \"HOU\", \"KC\", \"MIN\", \"NO\", \"NYJ\",… #> $ result    <int> -7, 20, -1, 4, 20, -16, 3, -8, 20, -21, 4, -8, 6, 12, 31, -8… div_standings <- nflseedR::compute_division_ranks(games, .debug = TRUE) #> • 2022-07-07 09:58:27: Calculating team data #> • 2022-07-07 09:58:27: Calculating head to head #> • 2022-07-07 09:58:27: Calculating division rank #1 #> • 2022-07-07 09:58:27: DIV (2): Head-to-head #> • 2022-07-07 09:58:27: DIV (2): Division Record #> • 2022-07-07 09:58:27: Calculating division rank #2 #> • 2022-07-07 09:58:27: DIV (3): Head-to-head #> • 2022-07-07 09:58:27: DIV (3): Division Record #> • 2022-07-07 09:58:27: DIV (3): Common Record #> • 2022-07-07 09:58:27: DIV (2): Head-to-head #> • 2022-07-07 09:58:27: DIV (2): Division Record #> • 2022-07-07 09:58:27: DIV (2): Common Record #> • 2022-07-07 09:58:28: DIV (2): Conference Record #> • 2022-07-07 09:58:28: Calculating division rank #3 #> • 2022-07-07 09:58:28: DIV (2): Head-to-head #> • 2022-07-07 09:58:28: DIV (2): Division Record #> • 2022-07-07 09:58:28: DIV (2): Common Record #> • 2022-07-07 09:58:28: Calculating division rank #4 dplyr::glimpse(div_standings) #> List of 2 #>  $ standings: tibble [64 × 16] (S3: tbl_df/tbl/data.frame) #>   ..$ sim         : int [1:64] 2012 2012 2012 2012 2012 2012 2012 2012 2012 2012 ... #>   ..$ conf        : chr [1:64] \"AFC\" \"AFC\" \"AFC\" \"AFC\" ... #>   ..$ division    : chr [1:64] \"AFC East\" \"AFC East\" \"AFC East\" \"AFC East\" ... #>   ..$ team        : chr [1:64] \"BUF\" \"MIA\" \"NE\" \"NYJ\" ... #>   ..$ games       : int [1:64] 16 16 16 16 16 16 16 16 16 16 ... #>   ..$ wins        : num [1:64] 6 7 12 6 10 10 5 8 12 11 ... #>   ..$ true_wins   : int [1:64] 6 7 12 6 10 10 5 8 12 11 ... #>   ..$ losses      : int [1:64] 10 9 4 10 6 6 11 8 4 5 ... #>   ..$ ties        : int [1:64] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ win_pct     : num [1:64] 0.375 0.438 0.75 0.375 0.625 ... #>   ..$ div_pct     : num [1:64] 0.333 0.333 1 0.333 0.667 ... #>   ..$ conf_pct    : num [1:64] 0.417 0.417 0.917 0.333 0.667 ... #>   ..$ sov         : num [1:64] 0.281 0.415 0.466 0.401 0.438 ... #>   ..$ sos         : num [1:64] 0.48 0.5 0.496 0.512 0.496 ... #>   ..$ div_rank    : num [1:64] 4 2 1 3 1 2 4 3 1 2 ... #>   ..$ max_reg_week: int [1:64] 17 17 17 17 17 17 17 17 17 17 ... #>  $ h2h      : tibble [2,048 × 6] (S3: tbl_df/tbl/data.frame) #>   ..$ sim       : int [1:2048] 2012 2012 2012 2012 2012 2012 2012 2012 2012 2012 ... #>   ..$ team      : chr [1:2048] \"ARI\" \"ARI\" \"ARI\" \"ARI\" ... #>   ..$ opp       : chr [1:2048] \"ARI\" \"ATL\" \"BAL\" \"BUF\" ... #>   ..$ h2h_games : int [1:2048] 0 1 0 1 0 1 0 0 0 0 ... #>   ..$ h2h_wins  : num [1:2048] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ h2h_played: num [1:2048] 0 1 0 1 0 1 0 0 0 0 ... div_standings %>%    purrr::pluck(\"standings\") %>%    dplyr::filter(sim == 2012) %>%    dplyr::select(division:div_rank) %>%    knitr::kable()"},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"find-conference-seedings","dir":"Articles","previous_headings":"Using In-Simulation Functions","what":"Find Conference Seedings","title":"Get started with nflseedR","text":"functions computes conference seedings based computed division standings data frame. efficiency reasons computed h2h data frame passed function. easiest way pass list data frames computed first step can (please note number playoff seeds): Just like compute_division_ranks(), function returns list two data frames can use within pipe. resulting seeds 2012 season given .","code":"seeds <- div_standings %>%    nflseedR::compute_conference_seeds(h2h = .$h2h, playoff_seeds = 6, .debug = TRUE) #> • 2022-07-07 09:58:28: Calculating seed #1 #> • 2022-07-07 09:58:28: CONF (3): Head-to-head Sweep #> • 2022-07-07 09:58:28: Calculating seed #2 #> • 2022-07-07 09:58:28: CONF (2): Head-to-head Sweep #> • 2022-07-07 09:58:28: CONF (2): Conference Record #> • 2022-07-07 09:58:28: Calculating seed #3 #> • 2022-07-07 09:58:28: Calculating seed #4 #> • 2022-07-07 09:58:29: Calculating seed #5 #> • 2022-07-07 09:58:29: Calculating seed #6 #> • 2022-07-07 09:58:29: CONF (2): Best-in-division reduction dplyr::glimpse(seeds) #> List of 2 #>  $ standings: tibble [64 × 17] (S3: tbl_df/tbl/data.frame) #>   ..$ sim      : int [1:64] 2012 2012 2012 2012 2012 2012 2012 2012 2012 2012 ... #>   ..$ conf     : chr [1:64] \"AFC\" \"AFC\" \"AFC\" \"AFC\" ... #>   ..$ division : chr [1:64] \"AFC East\" \"AFC East\" \"AFC East\" \"AFC East\" ... #>   ..$ team     : chr [1:64] \"BUF\" \"MIA\" \"NE\" \"NYJ\" ... #>   ..$ games    : int [1:64] 16 16 16 16 16 16 16 16 16 16 ... #>   ..$ wins     : num [1:64] 6 7 12 6 10 10 5 8 12 11 ... #>   ..$ true_wins: int [1:64] 6 7 12 6 10 10 5 8 12 11 ... #>   ..$ losses   : int [1:64] 10 9 4 10 6 6 11 8 4 5 ... #>   ..$ ties     : int [1:64] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ win_pct  : num [1:64] 0.375 0.438 0.75 0.375 0.625 ... #>   ..$ div_pct  : num [1:64] 0.333 0.333 1 0.333 0.667 ... #>   ..$ conf_pct : num [1:64] 0.417 0.417 0.917 0.333 0.667 ... #>   ..$ sov      : num [1:64] 0.281 0.415 0.466 0.401 0.438 ... #>   ..$ sos      : num [1:64] 0.48 0.5 0.496 0.512 0.496 ... #>   ..$ div_rank : num [1:64] 4 2 1 3 1 2 4 3 1 2 ... #>   ..$ seed     : num [1:64] NA NA 2 NA 4 6 NA NA 3 5 ... #>   ..$ exit     : num [1:64] 17 17 NA 17 NA NA 17 17 NA NA ... #>  $ h2h      : tibble [2,048 × 6] (S3: tbl_df/tbl/data.frame) #>   ..$ sim       : int [1:2048] 2012 2012 2012 2012 2012 2012 2012 2012 2012 2012 ... #>   ..$ team      : chr [1:2048] \"ARI\" \"ARI\" \"ARI\" \"ARI\" ... #>   ..$ opp       : chr [1:2048] \"ARI\" \"ATL\" \"BAL\" \"BUF\" ... #>   ..$ h2h_games : int [1:2048] 0 1 0 1 0 1 0 0 0 0 ... #>   ..$ h2h_wins  : num [1:2048] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ h2h_played: num [1:2048] 0 1 0 1 0 1 0 0 0 0 ... seeds %>%    purrr::pluck(\"standings\") %>%    dplyr::filter(sim == 2012) %>%    dplyr::select(division:seed) %>%    knitr::kable()"},{"path":"https://nflseedr.com/articles/nflseedR.html","id":"find-draft-order","dir":"Articles","previous_headings":"Using In-Simulation Functions","what":"Find Draft Order","title":"Get started with nflseedR","text":"function computes draft order based playoff outcome regular season games. requires playoff results games data frame game_type Super Bowl \"SB\". efficiency reasons computed h2h data frame passed function well. easiest way pass list data frames computed steps: final step, function compute_draft_order output h2h . Instead directly outputs final standings including draft order variable exit indicates week number team’s final game (Super Bowl Winner’s exit equals 22):","code":"draft <- seeds %>%    nflseedR::compute_draft_order(games = games, h2h = .$h2h, .debug = TRUE) #> • 2022-07-07 09:58:29: Calculating draft order #32 #> • 2022-07-07 09:58:29: Calculating draft order #31 #> • 2022-07-07 09:58:29: Calculating draft order #30 #> • 2022-07-07 09:58:29: Calculating draft order #29 #> • 2022-07-07 09:58:29: Calculating draft order #28 #> • 2022-07-07 09:58:29: Calculating draft order #27 #> • 2022-07-07 09:58:30: Calculating draft order #26 #> • 2022-07-07 09:58:30: Calculating draft order #25 #> • 2022-07-07 09:58:30: Calculating draft order #24 #> • 2022-07-07 09:58:30: Calculating draft order #23 #> • 2022-07-07 09:58:30: Calculating draft order #22 #> • 2022-07-07 09:58:30: Calculating draft order #21 #> • 2022-07-07 09:58:30: Calculating draft order #20 #> • 2022-07-07 09:58:30: Calculating draft order #19 #> • 2022-07-07 09:58:30: Calculating draft order #18 #> • 2022-07-07 09:58:30: Calculating draft order #17 #> • 2022-07-07 09:58:30: Calculating draft order #16 #> • 2022-07-07 09:58:30: Calculating draft order #15 #> • 2022-07-07 09:58:30: Calculating draft order #14 #> • 2022-07-07 09:58:30: Calculating draft order #13 #> • 2022-07-07 09:58:30: Calculating draft order #12 #> • 2022-07-07 09:58:30: Calculating draft order #11 #> • 2022-07-07 09:58:30: Calculating draft order #10 #> • 2022-07-07 09:58:30: DRAFT: Divisional Rank #> • 2022-07-07 09:58:30: DRAFT: Conference Rank #> • 2022-07-07 09:58:30: CONF (2): Best-in-division reduction #> • 2022-07-07 09:58:30: CONF (2): Head-to-head Sweep #> • 2022-07-07 09:58:31: Calculating draft order #9 #> • 2022-07-07 09:58:31: Calculating draft order #8 #> • 2022-07-07 09:58:31: Calculating draft order #7 #> • 2022-07-07 09:58:31: Calculating draft order #6 #> • 2022-07-07 09:58:31: Calculating draft order #5 #> • 2022-07-07 09:58:31: Calculating draft order #4 #> • 2022-07-07 09:58:31: Calculating draft order #3 #> • 2022-07-07 09:58:31: Calculating draft order #2 #> • 2022-07-07 09:58:31: Calculating draft order #1 dplyr::glimpse(draft) #> Rows: 64 #> Columns: 18 #> $ sim         <int> 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012… #> $ team        <chr> \"BUF\", \"MIA\", \"NE\", \"NYJ\", \"BAL\", \"CIN\", \"CLE\", \"PIT\", \"HO… #> $ conf        <chr> \"AFC\", \"AFC\", \"AFC\", \"AFC\", \"AFC\", \"AFC\", \"AFC\", \"AFC\", \"A… #> $ division    <chr> \"AFC East\", \"AFC East\", \"AFC East\", \"AFC East\", \"AFC North… #> $ games       <int> 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16… #> $ wins        <dbl> 6, 7, 12, 6, 10, 10, 5, 8, 12, 11, 2, 6, 13, 2, 4, 7, 8, 9… #> $ true_wins   <int> 6, 7, 12, 6, 10, 10, 5, 8, 12, 11, 2, 6, 13, 2, 4, 7, 8, 9… #> $ losses      <int> 10, 9, 4, 10, 6, 6, 11, 8, 4, 5, 14, 10, 3, 14, 12, 9, 8, … #> $ ties        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… #> $ win_pct     <dbl> 0.375, 0.438, 0.750, 0.375, 0.625, 0.625, 0.312, 0.500, 0.… #> $ div_pct     <dbl> 0.333, 0.333, 1.000, 0.333, 0.667, 0.500, 0.333, 0.500, 0.… #> $ conf_pct    <dbl> 0.417, 0.417, 0.917, 0.333, 0.667, 0.583, 0.417, 0.417, 0.… #> $ sov         <dbl> 0.281, 0.415, 0.466, 0.401, 0.438, 0.381, 0.388, 0.438, 0.… #> $ sos         <dbl> 0.480, 0.500, 0.496, 0.512, 0.496, 0.438, 0.508, 0.465, 0.… #> $ div_rank    <dbl> 4, 2, 1, 3, 1, 2, 4, 3, 1, 2, 4, 3, 1, 4, 3, 2, 3, 2, 4, 1… #> $ seed        <dbl> NA, NA, 2, NA, 4, 6, NA, NA, 3, 5, NA, NA, 1, NA, NA, NA, … #> $ exit        <dbl> 17, 17, 20, 17, 22, 18, 17, 17, 19, 18, 17, 17, 19, 17, 17… #> $ draft_order <dbl> 8, 12, 29, 9, 32, 21, 6, 17, 27, 24, 2, 10, 28, 1, 3, 11, … draft %>%    dplyr::filter(sim == 2012) %>%    dplyr::select(division:draft_order) %>%    knitr::kable()"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"running-a-simulation","dir":"Articles","previous_headings":"","what":"Running a Simulation","title":"Simulating NFL seasons using nflseedR","text":"Loading package obligatory, done first (along dplyr data wrangling pipe): Note: guide, ’ll set initial random seed 4 beginning simulations = 100 purposes document can follow along entering code get results shown . ’ll also set fresh_season = TRUE blank existing results 2020 season, normally simulating incomplete season, wouldn’t things. output contains lot pre-aggregated information, well individual results game simulation. example, let’s look overall results Bears: can see Bears got 10.8 wins average. made playoffs 87% simulations, won division 39%, won Super Bowl 4%, 1% receive top five draft pick. teams section output show team simulated season. Let’s check playoff games first simulation, Bears went 10-6 got 6th seed. simulation, Bears beat Rams wildcard game 26 points, beat Cowboys divisional round 11 points, took Eagles field goal NFC Championship Game, finally defeated Patriots 6 Super Bowl. may gathered point, default simulation code picks random Elo every team, uses starting Elo ratings 32 teams. However, default code Elo adjust independently within simulation week simulated. (Elo model used loosely based FiveThirtyEight.)","code":"library(nflseedR) library(dplyr, warn.conflicts = FALSE) options(digits = 3) set.seed(4) sims <- simulate_nfl(   nfl_season = 2020,   fresh_season = TRUE,   simulations = 100 ) #> • 2022-07-07 09:58:34: Loading games data #> • 2022-07-07 09:58:34: Beginning simulation of 100 seasons in 1 round #> • 2022-07-07 09:58:57: Combining simulation data #> • 2022-07-07 09:58:57: Aggregating across simulations sims$overall %>% dplyr::filter(team == \"CHI\") %>% knitr::kable() sims$teams %>%   dplyr::filter(team == \"CHI\") %>%   dplyr::select(sim, team, wins, seed, draft_order) %>%    utils::head(6) %>%   knitr::kable() sims$games %>% dplyr::filter(sim == 1, game_type != \"REG\") %>% knitr::kable()"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"use-your-own-model","dir":"Articles","previous_headings":"Running a Simulation","what":"Use Your Own Model","title":"Simulating NFL seasons using nflseedR","text":"course real value nflseedR putting model simulator. accomplish , can write function determine output games instead. example, ’s stupid model makes team earlier alphabetically win 3 points 90% time, lose 3 points 10% time. create function, first two inputs data teams (one row per team per sim), data games (one row per game per sim). third argument week number currently simulated, one week processed time. function’s job - whatever means choose - update result column week’s games sims number points home team won (lost negative, 0 game ended tie). returns teams games data. way can store information new columns team game use next call. Make sure code accepts returns appropriate information, simulator break! example, default function updates team’s Elo game, stores teams data. simulator processes next week, uses updated Elo rating inform team’s next game. !! Also, make sure aren’t overriding completed games games aren’t current week w. simulator stop setting past, present, future game results function, whether meant . !! Let’s run simulation stupid_games_model see happens: might expect, earliest alphabetical teams win lot. Cardinals won Super Bowl 59% seasons! Meanwhile, teams bottom alphabetically virtually certain top draft order.","code":"stupid_games_model <- function(teams, games, week_num, ...) {   # make the earlier alphabetical team win 90% of the time   games <- games %>%     dplyr::mutate(       result = dplyr::case_when(         !is.na(result) | week != week_num ~ result,         away_team < home_team ~ sample(c(-3, 3), n(), prob = c(0.9, 0.1), replace = TRUE),         away_team > home_team ~ sample(c(-3, 3), n(), prob = c(0.1, 0.9), replace = TRUE),         TRUE ~ 0       )     )      # return values   return(list(teams = teams, games = games)) } sims2 <- simulate_nfl(   nfl_season = 2020,   process_games = stupid_games_model,   fresh_season = TRUE,   simulations = 100 ) #> • 2022-07-07 09:58:58: Loading games data #> • 2022-07-07 09:58:58: Beginning simulation of 100 seasons in 1 round #> • 2022-07-07 09:59:18: Combining simulation data #> • 2022-07-07 09:59:18: Aggregating across simulations  sims2$overall %>% dplyr::arrange(team) %>% utils::head() %>% knitr::kable() sims2$overall %>% dplyr::arrange(team) %>% utils::tail() %>% knitr::kable()"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"adding-in-your-own-data","dir":"Articles","previous_headings":"Running a Simulation","what":"Adding In Your Own Data","title":"Simulating NFL seasons using nflseedR","text":"well good, might thinking, model works data simulator! can work? utilize R’s ability generic arguments. ... end function definition means function can called number additional arguments. can name whatever want, long ’re already name defined arguments. call simulate_nfl() function, uses ... syntax, allows pass number additional arguments function. simulator turn pass function processes games. example, let’s slightly modify last example: allows us define best worst, use information determine result (case, best team always win worst team always lose). best worst example single-length character vectors, can data frames R data type. Let’s simulate using : Now let nflseedR summarize simulation using summary() nflseedR simulation object. print gt table. shows exactly expect. defining Bears best team, always go 16-0, win division, win Super Bowl. Interestingly, always get #1 seed. makes sense, however, games without Bears Packers, alphabetically earlier teams still wins 90% time. Cardinals therefore expected go 16-0 simulations, thee tiebreakers Bears. However, even simulations, ’ll still lose Bears end meet playoffs. Similarly, Packers always go 0-16, never make playoffs. simulated seasons got #1 draft pick every time, aren’t guaranteed . Using logic , sometimes Washington Commanders go 0-16 , may beat Packers #1 pick tiebreakers.","code":"biased_games_model <- function(teams, games, week_num, ...) {      # arguments   args <- list(...)   best <- \"\"   worst <- \"\"      # best team?   if (\"best\" %in% names(args)) {     best <- args$best   }      # worst team?   if (\"worst\" %in% names(args)) {     worst <- args$worst   }    # make the best team always win and the worst team always lose   # otherwise, make the earlier alphabetical team win 90% of the time   games <- games %>%     dplyr::mutate(       result = dplyr::case_when(         !is.na(result) | week != week_num ~ result,         away_team == best | home_team == worst ~ -3,         away_team == worst | home_team == best ~ 3,         away_team < home_team ~ sample(c(-3, 3), n(), prob = c(0.9, 0.1), replace = TRUE),         away_team > home_team ~ sample(c(-3, 3), n(), prob = c(0.1, 0.9), replace = TRUE),         TRUE ~ 0       )     )      # return values   return(list(teams = teams, games = games)) } sims3 <- simulate_nfl(   nfl_season = 2020,   process_games = biased_games_model,    fresh_season = TRUE,    simulations = 100,   best = \"CHI\",    worst = \"GB\" ) #> • 2022-07-07 09:59:18: Loading games data #> • 2022-07-07 09:59:18: Beginning simulation of 100 seasons in 1 round #> • 2022-07-07 09:59:39: Combining simulation data #> • 2022-07-07 09:59:39: Aggregating across simulations summary(sims3)"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"passing-data-in-from-one-week-to-the-next","dir":"Articles","previous_headings":"Running a Simulation","what":"Passing Data in from One Week to the Next","title":"Simulating NFL seasons using nflseedR","text":"Sometimes though want data keep updating simulation progresses. example, Elo-based model updates team’s Elo game. can pass starting Elo values per team, games simulated, update Elo values team store teams data. column part teams data passed function following week simulated function called. Read comments code specific tips good ones: can add columns teams /games want. joins , left joins make sure rows removed. Remove “helper” columns generate along way don’t actually need returning. Make sure column doesn’t get blindly joined .x .y versions Week 2 R throws error expected column name doesn’t exist. Make sure update games .na(result) & week == week_num! don’t want override completed games, games week current week simulated. Let’s generate initial random Elo values team. see works, ’ll supply test_week = 3 argument simulate_nfl() abort simulating Week 3, instead return result elo_model() function. Let’s look Bears’ Elo Week 3 top handful simulations: can see different simulations different Elo results Bears, simulated seasons different results games, Elos adjusted accordingly. Let’s examine Bears’ games first simulation: Note first three weeks result filled , others NA, indicating game hasn’t yet occurred simulated. test_week = 3 input aborted simulation Week 3, useful seeing Elo .","code":"elo_model <- function(teams, games, week_num, ...) {    # round out (away from zero)   # this way the simulator never simulates a tie   # the simulator will still allow ties to be simulated if you want   # ... but not on playoff games   round_out <- function(x) {     x[!is.na(x) & x < 0] <- floor(x[!is.na(x) & x < 0])     x[!is.na(x) & x > 0] <- ceiling(x[!is.na(x) & x > 0])     return(x)   }    # we're going to store elo as a new columns in the teams data   # it won't start off there of course, so we need to determine it   # from our arguments   if (!(\"elo\" %in% colnames(teams))) {     args <- list(...)     if (\"elo\" %in% names(args)) {       # pull the elo info from custom arguments       teams <- teams %>%         dplyr::inner_join(args$elo %>% dplyr::select(team, elo), by = c(\"team\" = \"team\"))     } else {       # error with a friendly error message if no elo data is passed in       stop(\"Pass in a tibble `elo` as an argument to `simulate_nfl()`\")     }   }    # isolate the ratings data by sim and by team only   # we will want to join to the games data later and don't want excess columns   ratings <- teams %>% dplyr::select(sim, team, elo)    # simulate game outcomes   games <- games %>%     # add in the away team's elo to the game data     # note we join on both `sim` and the team     # always join on `sim` to make sure each sim cares about only its data     dplyr::inner_join(ratings, by = c(\"sim\" = \"sim\", \"away_team\" = \"team\")) %>%     dplyr::rename(away_elo = elo) %>%     # repeat for the home team as well     dplyr::inner_join(ratings, by = c(\"sim\" = \"sim\", \"home_team\" = \"team\")) %>%     dplyr::rename(home_elo = elo) %>%     dplyr::mutate(       # calculate the elo difference       elo_diff = home_elo - away_elo,       # add in a small HFA amount if played at home       elo_diff = elo_diff + ifelse(location == \"Home\", 20, 0),       # make an adjustment for rest       elo_diff = elo_diff + (home_rest - away_rest) / 7 * 25,       # playoff games swing elo more       elo_diff = elo_diff * ifelse(game_type == \"REG\", 1, 1.2),       # from elo, we calculate the home team's win percentage       wp = 1 / (10^(-elo_diff / 400) + 1),       # we also can calculate the estimate (mean points home team wins by)       estimate = elo_diff / 25,       result = dplyr::case_when(         # !!! ALWAYS DO THIS NEXT LINE IN YOUR `result` CHANGES !!!         # you have to make sure you're only changing unfinished games in current week         # if you don't do this, it will usually error out on a friendly error message         is.na(result) & week == week_num ~            as.integer(round_out(rnorm(n(), estimate, 13))),         # if not this week or known result, leave as-is         TRUE ~ as.integer(result)       ),       # simplify to 1 = win, 0 = loss, 0.5 = tie to help calculate elo shift       outcome = dplyr::case_when(         is.na(result) ~ NA_real_,         result > 0 ~ 1,         result < 0 ~ 0,         TRUE ~ 0.5       ),       # calculate the amount to adjust home team's elo by       elo_input = dplyr::case_when(         is.na(result) ~ NA_real_,         result > 0 ~ elo_diff * 0.001 + 2.2,         result < 0 ~ -elo_diff * 0.001 + 2.2,         TRUE ~ 1.0,       ),       elo_mult = log(pmax(abs(result), 1) + 1.0) * 2.2 / elo_input,       elo_shift = 20 * elo_mult * (outcome - wp)     ) %>%     # we don't want these columns in `games` any more     # remove any columns you don't need when you're done     # otherwise the next week they'll get joined as `col.x` and `col.y`     # which will almost certainly break your script     dplyr::select(       -away_elo, -home_elo, -elo_diff, -wp, -estimate,       -outcome, -elo_input, -elo_mult     )    # apply elo shifts   teams <- teams %>%     # join games results from this week to away teams (within same sim!)     # note this is a LEFT join, we don't want to remove any teams rows     dplyr::left_join(games %>%         dplyr::filter(week == week_num) %>%         dplyr::select(sim, away_team, elo_shift),       by = c(\"sim\" = \"sim\", \"team\" = \"away_team\")     ) %>%     # away team's elo gets subtracted by elo amount     # if the team wasn't an away team, do nothing     dplyr::mutate(elo = elo - ifelse(!is.na(elo_shift), elo_shift, 0)) %>%     # we don't want to keep `elo_shift` in `teams` either, remove it     dplyr::select(-elo_shift) %>%     # repeat the above except now do it for the home team     dplyr::left_join(games %>%         dplyr::filter(week == week_num) %>%         dplyr::select(sim, home_team, elo_shift),       by = c(\"sim\" = \"sim\", \"team\" = \"home_team\")     ) %>%     # note that a team on a bye will have `elo_shift` as NA for both joins     # this means it won't change, which is what we want     dplyr::mutate(elo = elo + ifelse(!is.na(elo_shift), elo_shift, 0)) %>%     dplyr::select(-elo_shift)    # we need to keep `elo_shift` out of `games` too and we're done with it   games <- games %>%     dplyr::select(-elo_shift)    # return the updated teams and games information   # note that `teams` will now have an updated `elo` column which will   # be used for the next week's games   # note that starting `elo` values are the same per-team...    # ... but after that will differ per sim depending on that sim's results   return(list(teams = teams, games = games)) } initial_elo <- tibble::tibble(   team = unique(nflseedR::divisions$team),   elo = rnorm(length(unique(nflseedR::divisions$team)), 1500, 150) ) test <- simulate_nfl(   nfl_season = 2020,   process_games = elo_model,   elo = initial_elo,   fresh_season = TRUE,   test_week = 3 ) #> • 2022-07-07 09:59:42: Loading games data #> • 2022-07-07 09:59:42: Beginning simulation of 1000 seasons in 1 round #> • 2022-07-07 09:59:44: Aborting and returning your `process_games` function's results from Week 3 test$teams %>%   dplyr::filter(team == \"CHI\") %>%   utils::head() %>%   knitr::kable() test$games %>%   filter(sim == 1) %>%   filter(away_team == \"CHI\" | home_team == \"CHI\") #> # A tibble: 16 × 9 #>      sim game_type  week away_team home_team away_rest home_rest location result #>    <dbl> <chr>     <int> <chr>     <chr>         <int>     <int> <chr>     <int> #>  1     1 REG           1 CHI       DET               7         7 Home        -13 #>  2     1 REG           2 NYG       CHI               6         7 Home         20 #>  3     1 REG           3 CHI       ATL               7         7 Home         20 #>  4     1 REG           4 IND       CHI               7         7 Home         NA #>  5     1 REG           5 TB        CHI               4         4 Home         NA #>  6     1 REG           6 CHI       CAR              10         7 Home         NA #>  7     1 REG           7 CHI       LA                8         8 Home         NA #>  8     1 REG           8 NO        CHI               7         6 Home         NA #>  9     1 REG           9 CHI       TEN               7         7 Home         NA #> 10     1 REG          10 MIN       CHI               8         8 Home         NA #> 11     1 REG          12 CHI       GB               13         7 Home         NA #> 12     1 REG          13 DET       CHI              10         7 Home         NA #> 13     1 REG          14 HOU       CHI               7         7 Home         NA #> 14     1 REG          15 CHI       MIN               7         7 Home         NA #> 15     1 REG          16 CHI       JAX               7         7 Home         NA #> 16     1 REG          17 GB        CHI               7         7 Home         NA"},{"path":"https://nflseedr.com/articles/nflsim.html","id":"simulation-configuration","dir":"Articles","previous_headings":"Running a Simulation","what":"Simulation Configuration","title":"Simulating NFL seasons using nflseedR","text":"lot flexibility choose run simulation. parameters configure run simulate_nfl() function. nfl_season - NFL season simulating? default, simulates recent season regular season schedule available Lee Sharpe’s NFL game data. earliest season can simulate 2002. Note: schedule new season released, nflseedR may support simulating using fake schedule upcoming season. notify . opponents correct, weeks games occur match actual NFL schedule. actual schedule utilized instead released NFL. process_games - supply function ’ve written encompass model used determine simulated games results, like examples . default, generate random Elo every team per round simulations, use determine game data. playoff_seeds - many playoff seeds per conference used? default, 7 seasons 2020 later, 6 earlier seasons. if_ended_today - used running middle regular season. take completed games done, remove rest regular season games schedule, begin playoffs everything locked based regular season data exists far. fresh_season - ’ll see set TRUE examples . setting deletes playoff games clears results regular season games, everything generated fresh. default FALSE games completed real life treated locked , instead remaining games simulated. fresh_playoffs - Similar fresh_season, except instead set TRUE, regular season results remain playoff games deleted simulated. default FALSE case playoff games completed accepted occurred, 1: teams record ties broken randomly. 2: Instead evaluating common games step reached, break ties randomly. earlier tiebreakers handled correctly. 3: default. tiebreakers handled strength schedule processed (strength victory draft pick order). unlikely event tie, broken randomly. test_week - abort simulating week number simulator. simulate_nfl() instead return output process_games() function. useful input debugging code, left NULL (default) actual simulations. also means first round simulated. simulations - many simulations run? Defaults 1000. sims_per_round - simulator can break things chunks simulated seasons, process chunk (called round), aggregate everything together end. default value determines number locally available cores calculates number simulations per round equal half available cores (various benchmarks showed results optimal performance parallel processes). computer hanging forces restart running simulation, recommended lower number.","code":""},{"path":"https://nflseedr.com/articles/nflsim.html","id":"simulation-output","dir":"Articles","previous_headings":"Running a Simulation","what":"Simulation Output","title":"Simulating NFL seasons using nflseedR","text":"output simulate_nfl(), assuming don’t put test_week debug function, list class \"nflseedR_simulation\" holds four data frames simulation results well list parameters used simulation. contents : sim - ID number simulation. rows value sim teams games refer simulated season. team - abbreviation representing team conf - conference team (AFC) division - division team (NFC West) games - many regular season games team played wins - number games team won, counting ties 0.5 wins true_wins - number games team won, ignoring ties. win_pct - win rate team. Equal wins / games. div_pct - win rate teams games played teams division. conf_pct - win rate teams games played teams conference. sov - Strength Victory. combined win rate teams team beaten. sos - Strength Schedule. combined win rate teams team played. div_rank - place team finished division. seed - playoff seed number team earned. NA team make playoffs. exit - week team’s last game. Super Bowl winner’s value one higher week Super Bowl. draft_order - pick team earned following NFL Draft. Note value trades, forfeits, modifications draft picks. sim - ID number simulation. rows value sim teams games refer simulated season. REG - regular season game POST - playoff rounds earlier wildcard game (used simulating lots playoff teams) WC - wildcard playoff game DIV - divisional playoff game CON - conference championship game SB - Super Bowl week - numerical week game takes place . Continues incrementing regular season playoff round. away_team - abbreviation away team game home_team - abbreviation home team game away_rest - number days since away team’s last game. 7 team’s first game season. home_rest - number days since home team’s last game. 7 team’s first game season. location - Either Home played home team’s stadium, Neutral game played elsewhere result - amount points home team won (lost negative). 0 tied games. NA games aren’t yet complete simulated, ever returned used test_week. conf - conference team (AFC) division - division team (NFC West) team - abbreviation representing team wins - mean (average) number games won across simulations, counting ties 0.5 wins playoff - rate team made playoffs across simulations div1 - rate team won division across simulations seed1 - rate team first playoff seed across simulations won_conf - rate team won conference across simulations won_sb - rate team won Super Bowl across simulations draft1 - rate team received first pick next draft across simulations draft5 - rate team received top five pick next draft across simulations team - abbreviation representing team wins - number wins (either integer halfway two integers) over_prob - rate team wins number aggregated across simulations. Ties ignored. under_prob - rate team fewer wins number aggregated across simulations. Ties ignored. Note wins integer, 1-over_prob-under_prob represents rate team finished exactly many wins. REG - regular season game POST - playoff rounds earlier wildcard game (used simulating lots playoff teams) WC - wildcard playoff game DIV - divisional playoff game CON - conference championship game SB - Super Bowl week - numerical week game takes place . Continues incrementing regular season playoff round. away_team - abbreviation away team game home_team - abbreviation home team game away_wins - number times away team won game home_wins - number times home team won game ties - number times game ended tie result - amount points home team won (lost negative) average across simulations games_played - number times game played. game_type == \"REG\" equal number simulations. number playoff matchups differ. away_percentage - rate away team won game counting ties half win home_percentage - rate home team won game counting ties half win nfl_season playoff_seeds if_ended_today fresh_season fresh_playoffs tiebreaker_depth test_week simulations sims_per_round .debug print_summary","code":""},{"path":"https://nflseedr.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lee Sharpe. Author, copyright holder. Sebastian Carl. Maintainer, author.","code":""},{"path":"https://nflseedr.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sharpe L, Carl S (2022). nflseedR: Functions Efficiently Simulate Evaluate NFL Seasons. https://nflseedr.com, https://github.com/nflverse/nflseedR.","code":"@Manual{,   title = {nflseedR: Functions to Efficiently Simulate and Evaluate NFL Seasons},   author = {Lee Sharpe and Sebastian Carl},   year = {2022},   note = {https://nflseedr.com, https://github.com/nflverse/nflseedR}, }"},{"path":[]},{"path":"https://nflseedr.com/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Functions to Efficiently Simulate and Evaluate NFL\n    Seasons","text":"goal nflseedR allow NFL modelers simulate NFL seasons using models, taking plate work tracking schedule, navigating complex rules division ranking, playoff seeding, draft order. can also aid sports betting, betting futures win totals. package can run thousands Monte Carlo style simulations NFL regular season, based model input. Within simulated season, calculate division standings playoff seedings . also generate playoff games simulate well, calculate order next year’s NFL draft. can used examine probability team making playoffs winning Super Bowl, based model. season simulations take completed games account already, simulate forward, including run playoffs. can also run fresh season, wiping away results simulating scratch. season simulation code nflseedR developed Lee Sharpe (@LeeSharpeNFL) building package developed Sebastian Carl (@mrcaseb).","code":""},{"path":"https://nflseedr.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions to Efficiently Simulate and Evaluate NFL\n    Seasons","text":"easiest way get nflseedR install CRAN : get bug fix use feature development version, can install development version nflseedR either GitHub prebuilt development repo :","code":"install.packages(\"nflseedR\") if (!require(\"pak\")) install.packages(\"pak\") pak::pak(\"nflverse/nflseedR\") install.packages(\"nflseedR\", repos = \"https://nflverse.r-universe.dev\")"},{"path":"https://nflseedr.com/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get Started","title":"Functions to Efficiently Simulate and Evaluate NFL\n    Seasons","text":"nflseedR ’s possible simulate complete seasons use ’s seeding functions custom simulations.","code":""},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"Compute NFL Playoff Seedings using Game Results Divisional Rankings","code":""},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"","code":"compute_conference_seeds(   teams,   h2h = NULL,   tiebreaker_depth = 3,   .debug = FALSE,   playoff_seeds = 7 )"},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"teams division standings data frame computed compute_division_ranks h2h data frame used head--head tiebreakers across tie-breaking functions. computed function compute_division_ranks. tiebreaker_depth single value equal 1, 2, 3. default 3. value controls depth tiebreakers shall applied. deepest currently implemented tiebreaker strength schedule. following values valid: tiebreaker_depth = 1 Break ties coinflip. Fastest variant. tiebreaker_depth = 2 Apply head--head division win percentage tiebreakers. Random still tied. tiebreaker_depth = 3 Apply tiebreakers strength schedule. Random still tied. .debug Either TRUE FALSE. Controls whether additional messages printed console showing tie-breaking algorithms currently performing. playoff_seeds Number playoff teams per conference (increased 2020 6 7).","code":""},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"data frame division standings including playoff seeds week season ended respective team (exit). list two data frames: standings Division standings including playoff seeds. h2h data frame used head--head tiebreakers across tie-breaking functions.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/compute_conference_seeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute NFL Playoff Seedings using Game Results and Divisional Rankings — compute_conference_seeds","text":"","code":"# \\donttest{ # Change some options for better output old <- options(list(digits = 3, tibble.print_min = 64)) library(dplyr, warn.conflicts = FALSE)  nflseedR::load_sharpe_games() %>%   dplyr::filter(season %in% 2019:2020) %>%   dplyr::select(sim = season, game_type, week, away_team, home_team, result) %>%   nflseedR::compute_division_ranks() %>%   nflseedR::compute_conference_seeds(h2h = .$h2h) %>%   purrr::pluck(\"standings\") #> • 2022-07-07 09:57:51: Calculating team data #> • 2022-07-07 09:57:51: Calculating head to head #> • 2022-07-07 09:57:51: Calculating division rank #1 #> • 2022-07-07 09:57:51: Calculating division rank #2 #> • 2022-07-07 09:57:51: Calculating division rank #3 #> • 2022-07-07 09:57:51: Calculating division rank #4 #> • 2022-07-07 09:57:51: Calculating seed #1 #> • 2022-07-07 09:57:51: Calculating seed #2 #> • 2022-07-07 09:57:52: Calculating seed #3 #> • 2022-07-07 09:57:52: Calculating seed #4 #> • 2022-07-07 09:57:52: Calculating seed #5 #> • 2022-07-07 09:57:52: Calculating seed #6 #> • 2022-07-07 09:57:52: Calculating seed #7 #> # A tibble: 64 × 17 #>      sim conf  division team  games  wins true_wins losses  ties win_pct div_pct #>    <int> <chr> <chr>    <chr> <int> <dbl>     <int>  <int> <int>   <dbl>   <dbl> #>  1  2019 AFC   AFC East BUF      16  10          10      6     0  0.625    0.5   #>  2  2019 AFC   AFC East MIA      16   5           5     11     0  0.312    0.333 #>  3  2019 AFC   AFC East NE       16  12          12      4     0  0.75     0.833 #>  4  2019 AFC   AFC East NYJ      16   7           7      9     0  0.438    0.333 #>  5  2019 AFC   AFC Nor… BAL      16  14          14      2     0  0.875    0.833 #>  6  2019 AFC   AFC Nor… CIN      16   2           2     14     0  0.125    0.167 #>  7  2019 AFC   AFC Nor… CLE      16   6           6     10     0  0.375    0.5   #>  8  2019 AFC   AFC Nor… PIT      16   8           8      8     0  0.5      0.5   #>  9  2019 AFC   AFC Sou… HOU      16  10          10      6     0  0.625    0.667 #> 10  2019 AFC   AFC Sou… IND      16   7           7      9     0  0.438    0.5   #> 11  2019 AFC   AFC Sou… JAX      16   6           6     10     0  0.375    0.333 #> 12  2019 AFC   AFC Sou… TEN      16   9           9      7     0  0.562    0.5   #> 13  2019 AFC   AFC West DEN      16   7           7      9     0  0.438    0.5   #> 14  2019 AFC   AFC West KC       16  12          12      4     0  0.75     1     #> 15  2019 AFC   AFC West LAC      16   5           5     11     0  0.312    0     #> 16  2019 AFC   AFC West OAK      16   7           7      9     0  0.438    0.5   #> 17  2019 NFC   NFC East DAL      16   8           8      8     0  0.5      0.833 #> 18  2019 NFC   NFC East NYG      16   4           4     12     0  0.25     0.333 #> 19  2019 NFC   NFC East PHI      16   9           9      7     0  0.562    0.833 #> 20  2019 NFC   NFC East WAS      16   3           3     13     0  0.188    0     #> 21  2019 NFC   NFC Nor… CHI      16   8           8      8     0  0.5      0.667 #> 22  2019 NFC   NFC Nor… DET      16   3.5         3     12     1  0.219    0     #> 23  2019 NFC   NFC Nor… GB       16  13          13      3     0  0.812    1     #> 24  2019 NFC   NFC Nor… MIN      16  10          10      6     0  0.625    0.333 #> 25  2019 NFC   NFC Sou… ATL      16   7           7      9     0  0.438    0.667 #> 26  2019 NFC   NFC Sou… CAR      16   5           5     11     0  0.312    0.167 #> 27  2019 NFC   NFC Sou… NO       16  13          13      3     0  0.812    0.833 #> 28  2019 NFC   NFC Sou… TB       16   7           7      9     0  0.438    0.333 #> 29  2019 NFC   NFC West ARI      16   5.5         5     10     1  0.344    0.167 #> 30  2019 NFC   NFC West LA       16   9           9      7     0  0.562    0.5   #> 31  2019 NFC   NFC West SEA      16  11          11      5     0  0.688    0.5   #> 32  2019 NFC   NFC West SF       16  13          13      3     0  0.812    0.833 #> 33  2020 AFC   AFC East BUF      16  13          13      3     0  0.812    1     #> 34  2020 AFC   AFC East MIA      16  10          10      6     0  0.625    0.5   #> 35  2020 AFC   AFC East NE       16   7           7      9     0  0.438    0.5   #> 36  2020 AFC   AFC East NYJ      16   2           2     14     0  0.125    0     #> 37  2020 AFC   AFC Nor… BAL      16  11          11      5     0  0.688    0.667 #> 38  2020 AFC   AFC Nor… CIN      16   4.5         4     11     1  0.281    0.167 #> 39  2020 AFC   AFC Nor… CLE      16  11          11      5     0  0.688    0.5   #> 40  2020 AFC   AFC Nor… PIT      16  12          12      4     0  0.75     0.667 #> 41  2020 AFC   AFC Sou… HOU      16   4           4     12     0  0.25     0.333 #> 42  2020 AFC   AFC Sou… IND      16  11          11      5     0  0.688    0.667 #> 43  2020 AFC   AFC Sou… JAX      16   1           1     15     0  0.0625   0.167 #> 44  2020 AFC   AFC Sou… TEN      16  11          11      5     0  0.688    0.833 #> 45  2020 AFC   AFC West DEN      16   5           5     11     0  0.312    0.167 #> 46  2020 AFC   AFC West KC       16  14          14      2     0  0.875    0.667 #> 47  2020 AFC   AFC West LAC      16   7           7      9     0  0.438    0.5   #> 48  2020 AFC   AFC West LV       16   8           8      8     0  0.5      0.667 #> 49  2020 NFC   NFC East DAL      16   6           6     10     0  0.375    0.333 #> 50  2020 NFC   NFC East NYG      16   6           6     10     0  0.375    0.667 #> 51  2020 NFC   NFC East PHI      16   4.5         4     11     1  0.281    0.333 #> 52  2020 NFC   NFC East WAS      16   7           7      9     0  0.438    0.667 #> 53  2020 NFC   NFC Nor… CHI      16   8           8      8     0  0.5      0.333 #> 54  2020 NFC   NFC Nor… DET      16   5           5     11     0  0.312    0.167 #> 55  2020 NFC   NFC Nor… GB       16  13          13      3     0  0.812    0.833 #> 56  2020 NFC   NFC Nor… MIN      16   7           7      9     0  0.438    0.667 #> 57  2020 NFC   NFC Sou… ATL      16   4           4     12     0  0.25     0.167 #> 58  2020 NFC   NFC Sou… CAR      16   5           5     11     0  0.312    0.167 #> 59  2020 NFC   NFC Sou… NO       16  12          12      4     0  0.75     1     #> 60  2020 NFC   NFC Sou… TB       16  11          11      5     0  0.688    0.667 #> 61  2020 NFC   NFC West ARI      16   8           8      8     0  0.5      0.333 #> 62  2020 NFC   NFC West LA       16  10          10      6     0  0.625    0.5   #> 63  2020 NFC   NFC West SEA      16  12          12      4     0  0.75     0.667 #> 64  2020 NFC   NFC West SF       16   6           6     10     0  0.375    0.5   #> # … with 6 more variables: conf_pct <dbl>, sov <dbl>, sos <dbl>, #> #   div_rank <dbl>, seed <dbl>, exit <dbl>  # Restore old options options(old) # }"},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NFL Division Rankings using Game Results — compute_division_ranks","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"Compute NFL Division Rankings using Game Results","code":""},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"","code":"compute_division_ranks(   games,   teams = NULL,   tiebreaker_depth = 3,   .debug = FALSE,   h2h = NULL )"},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"games data frame containing real simulated game scores. following variables required: sim simulation ID. Normally 1 - n simulated seasons. game_type One 'REG', 'WC', 'DIV', 'CON', 'SB' indicating game regular season game one playoff rounds. week week corresponding NFL season. away_team Team abbreviation away team (please see divisions valid team abbreviations). home_team Team abbreviation home team (please see divisions valid team abbreviations). result Equals home score - away score. teams parameter optional. NULL function compute internally, otherwise data frame teams contained games data frame repeated simulation ID (sim). following variables required: sim simulation ID. Normally 1 - n simulated seasons. team Team abbreviation team (please see divisions valid team abbreviations). conf Conference abbreviation team (please see divisions valid team abbreviations). division Division team (please see divisions valid division names). tiebreaker_depth single value equal 1, 2, 3. default 3. value controls depth tiebreakers shall applied. deepest currently implemented tiebreaker strength schedule. following values valid: tiebreaker_depth = 1 Break ties coinflip. Fastest variant. tiebreaker_depth = 2 Apply head--head division win percentage tiebreakers. Random still tied. tiebreaker_depth = 3 Apply tiebreakers strength schedule. Random still tied. .debug Either TRUE FALSE. Controls whether additional messages printed console showing tie-breaking algorithms currently performing. h2h data frame used head--head tiebreakers across tie-breaking functions. computed function compute_division_ranks.","code":""},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"list two data frames: standings Division standings. h2h data frame used head--head tiebreakers across tie-breaking functions.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/compute_division_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute NFL Division Rankings using Game Results — compute_division_ranks","text":"","code":"# \\donttest{ # Change some options for better output old <- options(list(digits = 3, tibble.print_min = 64)) library(dplyr, warn.conflicts = FALSE)  nflseedR::load_sharpe_games() %>%   dplyr::filter(season %in% 2019:2020) %>%   dplyr::select(sim = season, game_type, week, away_team, home_team, result) %>%   nflseedR::compute_division_ranks() %>%   purrr::pluck(\"standings\") #> • 2022-07-07 09:57:53: Calculating team data #> • 2022-07-07 09:57:53: Calculating head to head #> • 2022-07-07 09:57:53: Calculating division rank #1 #> • 2022-07-07 09:57:53: Calculating division rank #2 #> • 2022-07-07 09:57:54: Calculating division rank #3 #> • 2022-07-07 09:57:54: Calculating division rank #4 #> # A tibble: 64 × 16 #>      sim conf  division team  games  wins true_wins losses  ties win_pct div_pct #>    <int> <chr> <chr>    <chr> <int> <dbl>     <int>  <int> <int>   <dbl>   <dbl> #>  1  2019 AFC   AFC East BUF      16  10          10      6     0  0.625    0.5   #>  2  2019 AFC   AFC East MIA      16   5           5     11     0  0.312    0.333 #>  3  2019 AFC   AFC East NE       16  12          12      4     0  0.75     0.833 #>  4  2019 AFC   AFC East NYJ      16   7           7      9     0  0.438    0.333 #>  5  2019 AFC   AFC Nor… BAL      16  14          14      2     0  0.875    0.833 #>  6  2019 AFC   AFC Nor… CIN      16   2           2     14     0  0.125    0.167 #>  7  2019 AFC   AFC Nor… CLE      16   6           6     10     0  0.375    0.5   #>  8  2019 AFC   AFC Nor… PIT      16   8           8      8     0  0.5      0.5   #>  9  2019 AFC   AFC Sou… HOU      16  10          10      6     0  0.625    0.667 #> 10  2019 AFC   AFC Sou… IND      16   7           7      9     0  0.438    0.5   #> 11  2019 AFC   AFC Sou… JAX      16   6           6     10     0  0.375    0.333 #> 12  2019 AFC   AFC Sou… TEN      16   9           9      7     0  0.562    0.5   #> 13  2019 AFC   AFC West DEN      16   7           7      9     0  0.438    0.5   #> 14  2019 AFC   AFC West KC       16  12          12      4     0  0.75     1     #> 15  2019 AFC   AFC West LAC      16   5           5     11     0  0.312    0     #> 16  2019 AFC   AFC West OAK      16   7           7      9     0  0.438    0.5   #> 17  2019 NFC   NFC East DAL      16   8           8      8     0  0.5      0.833 #> 18  2019 NFC   NFC East NYG      16   4           4     12     0  0.25     0.333 #> 19  2019 NFC   NFC East PHI      16   9           9      7     0  0.562    0.833 #> 20  2019 NFC   NFC East WAS      16   3           3     13     0  0.188    0     #> 21  2019 NFC   NFC Nor… CHI      16   8           8      8     0  0.5      0.667 #> 22  2019 NFC   NFC Nor… DET      16   3.5         3     12     1  0.219    0     #> 23  2019 NFC   NFC Nor… GB       16  13          13      3     0  0.812    1     #> 24  2019 NFC   NFC Nor… MIN      16  10          10      6     0  0.625    0.333 #> 25  2019 NFC   NFC Sou… ATL      16   7           7      9     0  0.438    0.667 #> 26  2019 NFC   NFC Sou… CAR      16   5           5     11     0  0.312    0.167 #> 27  2019 NFC   NFC Sou… NO       16  13          13      3     0  0.812    0.833 #> 28  2019 NFC   NFC Sou… TB       16   7           7      9     0  0.438    0.333 #> 29  2019 NFC   NFC West ARI      16   5.5         5     10     1  0.344    0.167 #> 30  2019 NFC   NFC West LA       16   9           9      7     0  0.562    0.5   #> 31  2019 NFC   NFC West SEA      16  11          11      5     0  0.688    0.5   #> 32  2019 NFC   NFC West SF       16  13          13      3     0  0.812    0.833 #> 33  2020 AFC   AFC East BUF      16  13          13      3     0  0.812    1     #> 34  2020 AFC   AFC East MIA      16  10          10      6     0  0.625    0.5   #> 35  2020 AFC   AFC East NE       16   7           7      9     0  0.438    0.5   #> 36  2020 AFC   AFC East NYJ      16   2           2     14     0  0.125    0     #> 37  2020 AFC   AFC Nor… BAL      16  11          11      5     0  0.688    0.667 #> 38  2020 AFC   AFC Nor… CIN      16   4.5         4     11     1  0.281    0.167 #> 39  2020 AFC   AFC Nor… CLE      16  11          11      5     0  0.688    0.5   #> 40  2020 AFC   AFC Nor… PIT      16  12          12      4     0  0.75     0.667 #> 41  2020 AFC   AFC Sou… HOU      16   4           4     12     0  0.25     0.333 #> 42  2020 AFC   AFC Sou… IND      16  11          11      5     0  0.688    0.667 #> 43  2020 AFC   AFC Sou… JAX      16   1           1     15     0  0.0625   0.167 #> 44  2020 AFC   AFC Sou… TEN      16  11          11      5     0  0.688    0.833 #> 45  2020 AFC   AFC West DEN      16   5           5     11     0  0.312    0.167 #> 46  2020 AFC   AFC West KC       16  14          14      2     0  0.875    0.667 #> 47  2020 AFC   AFC West LAC      16   7           7      9     0  0.438    0.5   #> 48  2020 AFC   AFC West LV       16   8           8      8     0  0.5      0.667 #> 49  2020 NFC   NFC East DAL      16   6           6     10     0  0.375    0.333 #> 50  2020 NFC   NFC East NYG      16   6           6     10     0  0.375    0.667 #> 51  2020 NFC   NFC East PHI      16   4.5         4     11     1  0.281    0.333 #> 52  2020 NFC   NFC East WAS      16   7           7      9     0  0.438    0.667 #> 53  2020 NFC   NFC Nor… CHI      16   8           8      8     0  0.5      0.333 #> 54  2020 NFC   NFC Nor… DET      16   5           5     11     0  0.312    0.167 #> 55  2020 NFC   NFC Nor… GB       16  13          13      3     0  0.812    0.833 #> 56  2020 NFC   NFC Nor… MIN      16   7           7      9     0  0.438    0.667 #> 57  2020 NFC   NFC Sou… ATL      16   4           4     12     0  0.25     0.167 #> 58  2020 NFC   NFC Sou… CAR      16   5           5     11     0  0.312    0.167 #> 59  2020 NFC   NFC Sou… NO       16  12          12      4     0  0.75     1     #> 60  2020 NFC   NFC Sou… TB       16  11          11      5     0  0.688    0.667 #> 61  2020 NFC   NFC West ARI      16   8           8      8     0  0.5      0.333 #> 62  2020 NFC   NFC West LA       16  10          10      6     0  0.625    0.5   #> 63  2020 NFC   NFC West SEA      16  12          12      4     0  0.75     0.667 #> 64  2020 NFC   NFC West SF       16   6           6     10     0  0.375    0.5   #> # … with 5 more variables: conf_pct <dbl>, sov <dbl>, sos <dbl>, #> #   div_rank <dbl>, max_reg_week <int>  # Restore old options options(old) # }"},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"Compute NFL Draft Order using Game Results Divisional Rankings","code":""},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"","code":"compute_draft_order(   teams,   games,   h2h = NULL,   tiebreaker_depth = 3,   .debug = FALSE )"},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"teams division standings data frame including playoff seeds computed compute_conference_seeds games data frame containing real simulated game scores. following variables required: sim simulation ID. Normally 1 - n simulated seasons. game_type One 'REG', 'WC', 'DIV', 'CON', 'SB' indicating game regular season game one playoff rounds. week week corresponding NFL season. away_team Team abbreviation away team (please see divisions valid team abbreviations). home_team Team abbreviation home team (please see divisions valid team abbreviations). result Equals home score - away score. h2h data frame used head--head tiebreakers across tie-breaking functions. computed function compute_division_ranks. tiebreaker_depth single value equal 1, 2, 3. default 3. value controls depth tiebreakers shall applied. deepest currently implemented tiebreaker strength schedule. following values valid: tiebreaker_depth = 1 Break ties coinflip. Fastest variant. tiebreaker_depth = 2 Apply head--head division win percentage tiebreakers. Random still tied. tiebreaker_depth = 3 Apply tiebreakers strength schedule. Random still tied. .debug Either TRUE FALSE. Controls whether additional messages printed console showing tie-breaking algorithms currently performing.","code":""},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"data frame standings including final draft pick number variable exit indicates week number teams final game (Super Bowl Winner one week higher).","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/compute_draft_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute NFL Draft Order using Game Results and Divisional Rankings — compute_draft_order","text":"","code":"# \\donttest{ # Change some options for better output old <- options(list(digits = 3, tibble.print_min = 64)) library(dplyr, warn.conflicts = FALSE)  games <-   nflseedR::load_sharpe_games() %>%   dplyr::filter(season %in% 2018:2019) %>%   dplyr::select(sim = season, game_type, week, away_team, home_team, result)  games %>%   nflseedR::compute_division_ranks() %>%   nflseedR::compute_conference_seeds(h2h = .$h2h, playoff_seeds = 6) %>%   nflseedR::compute_draft_order(games = games, h2h = .$h2h) #> • 2022-07-07 09:57:54: Calculating team data #> • 2022-07-07 09:57:54: Calculating head to head #> • 2022-07-07 09:57:54: Calculating division rank #1 #> • 2022-07-07 09:57:55: Calculating division rank #2 #> • 2022-07-07 09:57:55: Calculating division rank #3 #> • 2022-07-07 09:57:55: Calculating division rank #4 #> • 2022-07-07 09:57:55: Calculating seed #1 #> • 2022-07-07 09:57:55: Calculating seed #2 #> • 2022-07-07 09:57:55: Calculating seed #3 #> • 2022-07-07 09:57:55: Calculating seed #4 #> • 2022-07-07 09:57:55: Calculating seed #5 #> • 2022-07-07 09:57:55: Calculating seed #6 #> • 2022-07-07 09:57:56: Calculating draft order #32 #> • 2022-07-07 09:57:56: Calculating draft order #31 #> • 2022-07-07 09:57:56: Calculating draft order #30 #> • 2022-07-07 09:57:56: Calculating draft order #29 #> • 2022-07-07 09:57:56: Calculating draft order #28 #> • 2022-07-07 09:57:56: Calculating draft order #27 #> • 2022-07-07 09:57:56: Calculating draft order #26 #> • 2022-07-07 09:57:56: Calculating draft order #25 #> • 2022-07-07 09:57:56: Calculating draft order #24 #> • 2022-07-07 09:57:56: Calculating draft order #23 #> • 2022-07-07 09:57:56: Calculating draft order #22 #> • 2022-07-07 09:57:56: Calculating draft order #21 #> • 2022-07-07 09:57:56: Calculating draft order #20 #> • 2022-07-07 09:57:56: Calculating draft order #19 #> • 2022-07-07 09:57:56: Calculating draft order #18 #> • 2022-07-07 09:57:56: Calculating draft order #17 #> • 2022-07-07 09:57:57: Calculating draft order #16 #> • 2022-07-07 09:57:57: Calculating draft order #15 #> • 2022-07-07 09:57:57: Calculating draft order #14 #> • 2022-07-07 09:57:57: Calculating draft order #13 #> • 2022-07-07 09:57:57: Calculating draft order #12 #> • 2022-07-07 09:57:57: Calculating draft order #11 #> • 2022-07-07 09:57:57: Calculating draft order #10 #> • 2022-07-07 09:57:57: Calculating draft order #9 #> • 2022-07-07 09:57:57: Calculating draft order #8 #> • 2022-07-07 09:57:57: Calculating draft order #7 #> • 2022-07-07 09:57:57: Calculating draft order #6 #> • 2022-07-07 09:57:57: Calculating draft order #5 #> • 2022-07-07 09:57:57: Calculating draft order #4 #> • 2022-07-07 09:57:57: Calculating draft order #3 #> • 2022-07-07 09:57:57: Calculating draft order #2 #> • 2022-07-07 09:57:57: Calculating draft order #1 #> # A tibble: 64 × 18 #>      sim team  conf  division games  wins true_wins losses  ties win_pct div_pct #>    <int> <chr> <chr> <chr>    <int> <dbl>     <int>  <int> <int>   <dbl>   <dbl> #>  1  2018 BUF   AFC   AFC East    16   6           6     10     0   0.375   0.333 #>  2  2018 MIA   AFC   AFC East    16   7           7      9     0   0.438   0.667 #>  3  2018 NE    AFC   AFC East    16  11          11      5     0   0.688   0.833 #>  4  2018 NYJ   AFC   AFC East    16   4           4     12     0   0.25    0.167 #>  5  2018 BAL   AFC   AFC Nor…    16  10          10      6     0   0.625   0.5   #>  6  2018 CIN   AFC   AFC Nor…    16   6           6     10     0   0.375   0.167 #>  7  2018 CLE   AFC   AFC Nor…    16   7.5         7      8     1   0.469   0.583 #>  8  2018 PIT   AFC   AFC Nor…    16   9.5         9      6     1   0.594   0.75  #>  9  2018 HOU   AFC   AFC Sou…    16  11          11      5     0   0.688   0.667 #> 10  2018 IND   AFC   AFC Sou…    16  10          10      6     0   0.625   0.667 #> 11  2018 JAX   AFC   AFC Sou…    16   5           5     11     0   0.312   0.167 #> 12  2018 TEN   AFC   AFC Sou…    16   9           9      7     0   0.562   0.5   #> 13  2018 DEN   AFC   AFC West    16   6           6     10     0   0.375   0.333 #> 14  2018 KC    AFC   AFC West    16  12          12      4     0   0.75    0.833 #> 15  2018 LAC   AFC   AFC West    16  12          12      4     0   0.75    0.667 #> 16  2018 OAK   AFC   AFC West    16   4           4     12     0   0.25    0.167 #> 17  2018 DAL   NFC   NFC East    16  10          10      6     0   0.625   0.833 #> 18  2018 NYG   NFC   NFC East    16   5           5     11     0   0.312   0.167 #> 19  2018 PHI   NFC   NFC East    16   9           9      7     0   0.562   0.667 #> 20  2018 WAS   NFC   NFC East    16   7           7      9     0   0.438   0.333 #> 21  2018 CHI   NFC   NFC Nor…    16  12          12      4     0   0.75    0.833 #> 22  2018 DET   NFC   NFC Nor…    16   6           6     10     0   0.375   0.333 #> 23  2018 GB    NFC   NFC Nor…    16   6.5         6      9     1   0.406   0.25  #> 24  2018 MIN   NFC   NFC Nor…    16   8.5         8      7     1   0.531   0.583 #> 25  2018 ATL   NFC   NFC Sou…    16   7           7      9     0   0.438   0.667 #> 26  2018 CAR   NFC   NFC Sou…    16   7           7      9     0   0.438   0.333 #> 27  2018 NO    NFC   NFC Sou…    16  13          13      3     0   0.812   0.667 #> 28  2018 TB    NFC   NFC Sou…    16   5           5     11     0   0.312   0.333 #> 29  2018 ARI   NFC   NFC West    16   3           3     13     0   0.188   0.333 #> 30  2018 LA    NFC   NFC West    16  13          13      3     0   0.812   1     #> 31  2018 SEA   NFC   NFC West    16  10          10      6     0   0.625   0.5   #> 32  2018 SF    NFC   NFC West    16   4           4     12     0   0.25    0.167 #> 33  2019 BUF   AFC   AFC East    16  10          10      6     0   0.625   0.5   #> 34  2019 MIA   AFC   AFC East    16   5           5     11     0   0.312   0.333 #> 35  2019 NE    AFC   AFC East    16  12          12      4     0   0.75    0.833 #> 36  2019 NYJ   AFC   AFC East    16   7           7      9     0   0.438   0.333 #> 37  2019 BAL   AFC   AFC Nor…    16  14          14      2     0   0.875   0.833 #> 38  2019 CIN   AFC   AFC Nor…    16   2           2     14     0   0.125   0.167 #> 39  2019 CLE   AFC   AFC Nor…    16   6           6     10     0   0.375   0.5   #> 40  2019 PIT   AFC   AFC Nor…    16   8           8      8     0   0.5     0.5   #> 41  2019 HOU   AFC   AFC Sou…    16  10          10      6     0   0.625   0.667 #> 42  2019 IND   AFC   AFC Sou…    16   7           7      9     0   0.438   0.5   #> 43  2019 JAX   AFC   AFC Sou…    16   6           6     10     0   0.375   0.333 #> 44  2019 TEN   AFC   AFC Sou…    16   9           9      7     0   0.562   0.5   #> 45  2019 DEN   AFC   AFC West    16   7           7      9     0   0.438   0.5   #> 46  2019 KC    AFC   AFC West    16  12          12      4     0   0.75    1     #> 47  2019 LAC   AFC   AFC West    16   5           5     11     0   0.312   0     #> 48  2019 OAK   AFC   AFC West    16   7           7      9     0   0.438   0.5   #> 49  2019 DAL   NFC   NFC East    16   8           8      8     0   0.5     0.833 #> 50  2019 NYG   NFC   NFC East    16   4           4     12     0   0.25    0.333 #> 51  2019 PHI   NFC   NFC East    16   9           9      7     0   0.562   0.833 #> 52  2019 WAS   NFC   NFC East    16   3           3     13     0   0.188   0     #> 53  2019 CHI   NFC   NFC Nor…    16   8           8      8     0   0.5     0.667 #> 54  2019 DET   NFC   NFC Nor…    16   3.5         3     12     1   0.219   0     #> 55  2019 GB    NFC   NFC Nor…    16  13          13      3     0   0.812   1     #> 56  2019 MIN   NFC   NFC Nor…    16  10          10      6     0   0.625   0.333 #> 57  2019 ATL   NFC   NFC Sou…    16   7           7      9     0   0.438   0.667 #> 58  2019 CAR   NFC   NFC Sou…    16   5           5     11     0   0.312   0.167 #> 59  2019 NO    NFC   NFC Sou…    16  13          13      3     0   0.812   0.833 #> 60  2019 TB    NFC   NFC Sou…    16   7           7      9     0   0.438   0.333 #> 61  2019 ARI   NFC   NFC West    16   5.5         5     10     1   0.344   0.167 #> 62  2019 LA    NFC   NFC West    16   9           9      7     0   0.562   0.5   #> 63  2019 SEA   NFC   NFC West    16  11          11      5     0   0.688   0.5   #> 64  2019 SF    NFC   NFC West    16  13          13      3     0   0.812   0.833 #> # … with 7 more variables: conf_pct <dbl>, sov <dbl>, sos <dbl>, #> #   div_rank <dbl>, seed <dbl>, exit <dbl>, draft_order <dbl>  # Restore old options options(old) # }"},{"path":"https://nflseedr.com/reference/divisions.html","id":null,"dir":"Reference","previous_headings":"","what":"NFL team names and the conferences and divisions they belong to — divisions","title":"NFL team names and the conferences and divisions they belong to — divisions","text":"NFL team names conferences divisions belong ","code":""},{"path":"https://nflseedr.com/reference/divisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NFL team names and the conferences and divisions they belong to — divisions","text":"","code":"divisions"},{"path":"https://nflseedr.com/reference/divisions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NFL team names and the conferences and divisions they belong to — divisions","text":"data frame 36 rows 4 variables containing NFL team level information, including franchises multiple cities: team Team abbreviation conf Conference abbreviation division Division name sdiv Division abbreviation data frame created using teams_colors_logos data frame nflfastR package. Please see data-raw/divisions.R code create data.","code":""},{"path":"https://nflseedr.com/reference/divisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NFL team names and the conferences and divisions they belong to — divisions","text":"","code":"# \\donttest{ divisions #> # A tibble: 36 × 4 #>    team  conf  division  sdiv  #>    <chr> <chr> <chr>     <chr> #>  1 ARI   NFC   NFC West  NFCW  #>  2 ATL   NFC   NFC South NFCS  #>  3 BAL   AFC   AFC North AFCN  #>  4 BUF   AFC   AFC East  AFCE  #>  5 CAR   NFC   NFC South NFCS  #>  6 CHI   NFC   NFC North NFCN  #>  7 CIN   AFC   AFC North AFCN  #>  8 CLE   AFC   AFC North AFCN  #>  9 DAL   NFC   NFC East  NFCE  #> 10 DEN   AFC   AFC West  AFCW  #> # … with 26 more rows # }"},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Lee Sharpe's Games File — load_sharpe_games","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"Lee Sharpe maintains important data set contains broadly used information games National Football League. function convenient helper download file memory without remember correct url.","code":""},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"","code":"load_sharpe_games()"},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"data frame containing following variables NFL games since 1999: game_id ID game assigned nflverse. Note value matches game_id field nflfastR wish join data. season year NFL season. represents whole season, regular season games happen January well playoff games occur year number. game_type type game? One following values: REG: regular season game WC: wildcard playoff game DIV: divisional round playoff game CON: conference championship SB: Super Bowl week week NFL season game occurs . Please note game_type differ weeks >= 18 season expansion 2021. Please use game_type filter regular season postseason. gameday date game occurred. weekday day week game occurred. gametime kickoff time game. represented 24-hour time Eastern time zone, regardless time zone game played . away_team away team. away_score number points away team scored. NA games yet played. home_team home team. Note contains designated home team games team playing home Super Bowls NFL International games. home_score number points home team scored. NA games yet played. location Either Home home team playing home stadium, Neutral game played neutral location. still shows Home games Giants Jets even though share home stadium. result Equals home_score - away_score. number points home team scored minus number points away team scored. NA games yet played. Convenient evaluating spread bets. total sum team's score game. Equals home_score + away_score. NA games yet played. Convenient evaluating /total bets. overtime Whether game went overtime (= 1) (= 0). old_game_id id game issued NFL Game Statistics & Information System. away_rest number days since away team's previous game (7 used team's first game season). home_rest number days since home team's previous game (7 used team's first game season). away_moneyline Odd away_team winning game. home_moneyline Odd home_team winning game. spread_line spread line game. positive number means home team favored many points, negative number means away team favored many points. lines result column. away_spread_odds Odd away_team covering spread_line. home_spread_odds Odd home_team covering spread_line. total_line total line game. under_odds Odd total total_line. over_odds Odd total total_line. div_game Whether game divisional game (= 1) (= 0). roof status stadium's roof? one following values: closed: Stadium retractable roof closed dome: indoor stadium open: Stadium retractable roof open outdoors: outdoor stadium surface type ground game played . temp temperature stadium (roof types outdoors open ). wind speed wind miles/hour (roof types outdoors open ). away_qb_id GSIS ID \"starting quarterback\" away team identified first quarterback (per roster data) listed passer (nflfastR play play data) 2+ plays game. final regular season game QB plays passer. home_qb_id GSIS ID \"starting quarterback\" home team identified first quarterback (per roster data) listed passer (nflfastR play play data) 2+ plays game. final regular season game QB plays passer. away_qb_name Full name \"starting quarterback\" away team identified first quarterback (per roster data) listed passer (nflfastR play play data) 2+ plays game. final regular season game QB plays passer. home_qb_name Full name \"starting quarterback\" home team identified first quarterback (per roster data) listed passer (nflfastR play play data) 2+ plays game. final regular season game QB plays passer. away_coach Name head coach away team. home_coach Name head coach home team. referee Name game's referee (head official). stadium_id Pro Football Reference ID stadium. stadium Name stadium.","code":""},{"path":"https://nflseedr.com/reference/load_sharpe_games.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Lee Sharpe's Games File — load_sharpe_games","text":"","code":"# \\donttest{ games <- load_sharpe_games() dplyr::glimpse(games) #> Rows: 6,409 #> Columns: 45 #> $ game_id          <chr> \"1999_01_MIN_ATL\", \"1999_01_KC_CHI\", \"1999_01_PIT_CLE… #> $ season           <int> 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999,… #> $ game_type        <chr> \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG… #> $ week             <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2,… #> $ gameday          <chr> \"1999-09-12\", \"1999-09-12\", \"1999-09-12\", \"1999-09-12… #> $ weekday          <chr> \"Sunday\", \"Sunday\", \"Sunday\", \"Sunday\", \"Sunday\", \"Su… #> $ gametime         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ away_team        <chr> \"MIN\", \"KC\", \"PIT\", \"OAK\", \"BUF\", \"SF\", \"CAR\", \"NE\", … #> $ away_score       <int> 17, 17, 43, 24, 14, 3, 10, 30, 25, 28, 10, 17, 35, 41… #> $ home_team        <chr> \"ATL\", \"CHI\", \"CLE\", \"GB\", \"IND\", \"JAX\", \"NO\", \"NYJ\",… #> $ home_score       <int> 14, 20, 0, 28, 31, 41, 19, 28, 24, 20, 27, 13, 36, 35… #> $ location         <chr> \"Home\", \"Home\", \"Home\", \"Home\", \"Home\", \"Home\", \"Home… #> $ result           <int> -3, 3, -43, 4, 17, 38, 9, -2, -1, -8, 17, -4, 1, -6, … #> $ total            <int> 31, 37, 43, 52, 45, 44, 29, 58, 49, 48, 37, 30, 71, 7… #> $ overtime         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,… #> $ old_game_id      <chr> \"1999091210\", \"1999091206\", \"1999091213\", \"1999091208… #> $ gsis             <int> 598, 597, 604, 602, 591, 603, 592, 600, 588, 596, 589… #> $ nfl_detail_id    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ pfr              <chr> \"199909120atl\", \"199909120chi\", \"199909120cle\", \"1999… #> $ pff              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ espn             <chr> \"190912001\", \"190912003\", \"190912005\", \"190912009\", \"… #> $ away_rest        <int> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,… #> $ home_rest        <int> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,… #> $ away_moneyline   <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ home_moneyline   <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ spread_line      <dbl> -4.0, -3.0, -6.0, 9.0, -3.0, 5.5, 3.5, 7.0, -3.0, 9.5… #> $ away_spread_odds <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ home_spread_odds <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ total_line       <dbl> 49.0, 38.0, 37.0, 43.0, 45.5, 49.0, 38.0, 44.5, 37.0,… #> $ under_odds       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ over_odds        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ div_game         <int> 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0,… #> $ roof             <chr> \"dome\", \"outdoors\", \"outdoors\", \"outdoors\", \"dome\", \"… #> $ surface          <chr> \"astroturf\", \"grass\", \"grass\", \"grass\", \"astroturf\", … #> $ temp             <int> NA, 80, 78, 67, NA, 76, NA, 73, 75, NA, NA, 88, 84, 7… #> $ wind             <int> NA, 12, 12, 10, NA, 8, NA, 5, 3, NA, NA, 8, 10, 0, 5,… #> $ away_qb_id       <chr> \"00-0003761\", \"00-0006300\", \"00-0015700\", \"00-0005741… #> $ home_qb_id       <chr> \"00-0002876\", \"00-0010560\", \"00-0004230\", \"00-0005106… #> $ away_qb_name     <chr> \"Randall Cunningham\", \"Elvis Grbac\", \"Kordell Stewart… #> $ home_qb_name     <chr> \"Chris Chandler\", \"Shane Matthews\", \"Ty Detmer\", \"Bre… #> $ away_coach       <chr> \"Dennis Green\", \"Gunther Cunningham\", \"Bill Cowher\", … #> $ home_coach       <chr> \"Dan Reeves\", \"Dick Jauron\", \"Chris Palmer\", \"Ray Rho… #> $ referee          <chr> \"Gerry Austin\", \"Phil Luckett\", \"Bob McElwee\", \"Tony … #> $ stadium_id       <chr> \"ATL00\", \"CHI98\", \"CLE00\", \"GNB00\", \"IND99\", \"JAX00\",… #> $ stadium          <chr> \"Georgia Dome\", \"Soldier Field\", \"Cleveland Browns St… # \\dontshow{ # Close open connections for R CMD Check future::plan(\"sequential\") # } # }"},{"path":"https://nflseedr.com/reference/nflseedR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nflseedR: Functions to Efficiently Simulate and Evaluate NFL Seasons — nflseedR-package","title":"nflseedR: Functions to Efficiently Simulate and Evaluate NFL Seasons — nflseedR-package","text":"set functions simulate National Football League seasons including sophisticated tie-breaking procedures.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/nflseedR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nflseedR: Functions to Efficiently Simulate and Evaluate NFL Seasons — nflseedR-package","text":"Maintainer: Sebastian Carl mrcaseb@gmail.com Authors: Lee Sharpe [copyright holder]","code":""},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an NFL Season — simulate_nfl","title":"Simulate an NFL Season — simulate_nfl","text":"function simulates given NFL season multiple times using custom functions estimate simulate game results computes outcome given season including playoffs draft order. possible run function parallel processes calling appropriate plan. Progress updates can activated calling handlers start simulations. Please see given section \"Details\" information.","code":""},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an NFL Season — simulate_nfl","text":"","code":"simulate_nfl(   nfl_season = NULL,   process_games = NULL,   ...,   playoff_seeds = ifelse(nfl_season >= 2020, 7, 6),   if_ended_today = FALSE,   fresh_season = FALSE,   fresh_playoffs = FALSE,   tiebreaker_depth = 3,   test_week = NULL,   simulations = 1000,   sims_per_round = max(ceiling(simulations/future::availableCores() * 2), 100),   .debug = FALSE,   print_summary = FALSE )"},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an NFL Season — simulate_nfl","text":"nfl_season Season simulate process_games function estimate simulate results games. Uses team, schedule, week number arguments. ... Additional parameters passed function process_games. playoff_seeds Number playoff teams per conference (increased 2020 6 7). if_ended_today Either TRUE FALSE. TRUE, ignore remaining regular season games cut playoffs based current regular season data. fresh_season Either TRUE FALSE. Whether blank game results simulate season scratch (TRUE) take game results far given simulate rest (FALSE). fresh_playoffs Either TRUE FALSE. Whether blank playoff game results simulate postseason scratch (TRUE) take game results far given simulate rest (FALSE). tiebreaker_depth single value equal 1, 2, 3. default 3. value controls depth tiebreakers shall applied. deepest currently implemented tiebreaker strength schedule. following values valid: tiebreaker_depth = 1 Break ties coinflip. Fastest variant. tiebreaker_depth = 2 Apply head--head division win percentage tiebreakers. Random still tied. tiebreaker_depth = 3 Apply tiebreakers strength schedule. Random still tied. test_week Aborts simulator reaches week returns results process games call. simulations Equals number times given NFL season shall simulated sims_per_round number simulations can split multiple rounds processed parallel. parameter controls number simulations per round. default value determines number locally available cores calculates number simulations per round equal half available cores (various benchmarks showed results optimal performance). .debug Either TRUE FALSE. Controls whether additional messages printed console showing tie-breaking algorithms currently performing. print_summary TRUE, prints summary statistics console.","code":""},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an NFL Season — simulate_nfl","text":"nflseedR_simulation object containing list 6 data frames data frames results simulated games, final standings simulated season (incl. playoffs draft order), summary statistics across simulated seasons, siumulation parameters. full list, please see package website.","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"more-speed-using-parallel-processing","dir":"Reference","previous_headings":"","what":"More Speed Using Parallel Processing","title":"Simulate an NFL Season — simulate_nfl","text":"recommend choosing default parallel processing method saving environment variable R user profile make sure futures resolved chosen method default. can done following given steps. First, run following line user profile opened automatically. saved environment variables yet, empty file.   opened file add next line, save file restart R session. Please note example sets \"multisession\" default. users appropriate plan please make sure truly .   session freshly restarted please check method worked running next line. output FALSE successfully set default non-sequential future::plan(). output TRUE functions behave like called purrr::map() multisession.   information possible plans please see future package Readme.","code":"usethis::edit_r_environ() R_FUTURE_PLAN=\"multisession\" inherits(future::plan(), \"sequential\")"},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"get-progress-updates-while-functions-are-running","dir":"Reference","previous_headings":"","what":"Get Progress Updates while Functions are Running","title":"Simulate an NFL Season — simulate_nfl","text":"nflfastR functions able show progress updates using progressr::progressor() turned function called. least two basic ways either activating progress updates globally (current session)   piping function call progressr::with_progress():   information work progress handlers please see progressr::progressr.","code":"progressr::handlers(global = TRUE) simulate_nfl(2020, fresh_season = TRUE) %>%   progressr::with_progress()"},{"path":[]},{"path":"https://nflseedr.com/reference/simulate_nfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an NFL Season — simulate_nfl","text":"","code":"# \\donttest{ library(nflseedR)  # Activate progress updates # progressr::handlers(global = TRUE)  # Parallel processing can be activated via the following line # future::plan(\"multisession\")  # Simulate the season 4 times in 2 rounds sim <- nflseedR::simulate_nfl(   nfl_season = 2020,   fresh_season = TRUE,   simulations = 4,   sims_per_round = 2 ) #> • 2022-07-07 09:57:59: Loading games data #> ℹ Computation in multiple rounds can be accelerated with parallel processing. #> ℹ You should consider calling a `future::plan()`. Please see the function documentation for further information. #> ℹ Will go on sequentially... #> • 2022-07-07 09:57:59: Beginning simulation of 4 seasons in 2 rounds #> • 2022-07-07 09:58:10: Combining simulation data #> • 2022-07-07 09:58:10: Aggregating across simulations  # Overview output dplyr::glimpse(sim) #> List of 6 #>  $ teams       : tibble [128 × 18] (S3: tbl_df/tbl/data.frame) #>   ..$ sim        : num [1:128] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ team       : chr [1:128] \"BUF\" \"MIA\" \"NE\" \"NYJ\" ... #>   ..$ conf       : chr [1:128] \"AFC\" \"AFC\" \"AFC\" \"AFC\" ... #>   ..$ division   : chr [1:128] \"AFC East\" \"AFC East\" \"AFC East\" \"AFC East\" ... #>   ..$ games      : int [1:128] 16 16 16 16 16 16 16 16 16 16 ... #>   ..$ wins       : num [1:128] 16 8 7 10 11 2 9 14 3 16 ... #>   ..$ true_wins  : int [1:128] 16 8 7 10 11 2 9 14 3 16 ... #>   ..$ losses     : int [1:128] 0 8 9 6 5 14 7 2 13 0 ... #>   ..$ ties       : int [1:128] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ win_pct    : num [1:128] 1 0.5 0.438 0.625 0.688 ... #>   ..$ div_pct    : num [1:128] 1 0.5 0 0.5 0.5 ... #>   ..$ conf_pct   : num [1:128] 1 0.667 0.333 0.667 0.667 ... #>   ..$ sov        : num [1:128] 0.461 0.391 0.321 0.406 0.33 ... #>   ..$ sos        : num [1:128] 0.461 0.508 0.527 0.547 0.48 ... #>   ..$ div_rank   : num [1:128] 1 3 4 2 2 4 3 1 3 1 ... #>   ..$ seed       : num [1:128] 1 NA NA 6 5 NA NA 3 NA 2 ... #>   ..$ exit       : num [1:128] 22 17 17 18 19 17 17 19 17 20 ... #>   ..$ draft_order: num [1:128] 32 16 14 23 26 3 18 28 5 30 ... #>  $ games       : tibble [1,076 × 9] (S3: tbl_df/tbl/data.frame) #>   ..$ sim      : num [1:1076] 1 2 1 2 1 2 1 2 1 2 ... #>   ..$ game_type: chr [1:1076] \"REG\" \"REG\" \"REG\" \"REG\" ... #>   ..$ week     : int [1:1076] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ away_team: chr [1:1076] \"HOU\" \"HOU\" \"SEA\" \"SEA\" ... #>   ..$ home_team: chr [1:1076] \"KC\" \"KC\" \"ATL\" \"ATL\" ... #>   ..$ away_rest: num [1:1076] 7 7 7 7 7 7 7 7 7 7 ... #>   ..$ home_rest: num [1:1076] 7 7 7 7 7 7 7 7 7 7 ... #>   ..$ location : chr [1:1076] \"Home\" \"Home\" \"Home\" \"Home\" ... #>   ..$ result   : int [1:1076] 7 -3 6 1 -18 43 2 13 6 55 ... #>  $ overall     : tibble [32 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ conf    : chr [1:32] \"AFC\" \"AFC\" \"AFC\" \"AFC\" ... #>   ..$ division: chr [1:32] \"AFC East\" \"AFC East\" \"AFC East\" \"AFC East\" ... #>   ..$ team    : chr [1:32] \"BUF\" \"MIA\" \"NE\" \"NYJ\" ... #>   ..$ wins    : num [1:32] 9.75 10.75 6 7.75 7 ... #>   ..$ playoff : num [1:32] 0.5 0.75 0.25 0.5 0.25 0 0.5 1 0 1 ... #>   ..$ div1    : num [1:32] 0.5 0.5 0 0 0 0 0 1 0 0.75 ... #>   ..$ seed1   : num [1:32] 0.25 0.25 0 0 0 0 0 0 0 0 ... #>   ..$ won_conf: num [1:32] 0.25 0 0 0 0 0 0 0 0 0.25 ... #>   ..$ won_sb  : num [1:32] 0.25 0 0 0 0 0 0 0 0 0.25 ... #>   ..$ draft1  : num [1:32] 0 0 0 0 0 0.25 0 0 0 0 ... #>   ..$ draft5  : num [1:32] 0 0 0.25 0 0.25 0.5 0 0 0.5 0 ... #>  $ team_wins   : tibble [1,056 × 4] (S3: tbl_df/tbl/data.frame) #>   ..$ team      : chr [1:1056] \"ARI\" \"ARI\" \"ARI\" \"ARI\" ... #>   ..$ wins      : num [1:1056] 0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 ... #>   ..$ over_prob : num [1:1056] 1 1 1 1 1 1 0.5 0.5 0.5 0.5 ... #>   ..$ under_prob: num [1:1056] 0 0 0 0 0 0 0 0.5 0.5 0.5 ... #>  $ game_summary: tibble [308 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ game_type      : chr [1:308] \"REG\" \"REG\" \"REG\" \"REG\" ... #>   ..$ week           : int [1:308] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ away_team      : chr [1:308] \"ARI\" \"CHI\" \"CLE\" \"DAL\" ... #>   ..$ home_team      : chr [1:308] \"SF\" \"DET\" \"BAL\" \"LA\" ... #>   ..$ away_wins      : int [1:308] 1 1 2 4 0 1 3 0 2 3 ... #>   ..$ home_wins      : int [1:308] 3 3 2 0 4 3 1 4 2 1 ... #>   ..$ ties           : int [1:308] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ result         : num [1:308] 15.25 14.25 6.75 -11.75 7.5 ... #>   ..$ games_played   : int [1:308] 4 4 4 4 4 4 4 4 4 4 ... #>   ..$ away_percentage: num [1:308] 0.25 0.25 0.5 1 0 0.25 0.75 0 0.5 0.75 ... #>   ..$ home_percentage: num [1:308] 0.75 0.75 0.5 0 1 0.75 0.25 1 0.5 0.25 ... #>  $ sim_params  :List of 11 #>   ..$ nfl_season      : num 2020 #>   ..$ playoff_seeds   : num 7 #>   ..$ if_ended_today  : logi FALSE #>   ..$ fresh_season    : logi TRUE #>   ..$ fresh_playoffs  : logi FALSE #>   ..$ tiebreaker_depth: num 3 #>   ..$ test_week       : NULL #>   ..$ simulations     : num 4 #>   ..$ sims_per_round  : num 2 #>   ..$ .debug          : logi FALSE #>   ..$ print_summary   : logi FALSE #>  - attr(*, \"class\")= chr \"nflseedR_simulation\" # }"},{"path":"https://nflseedr.com/reference/summary.nflseedR_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","title":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","text":"Uses R package gt create pretty html table nflseedR simulation summary data frame.","code":""},{"path":"https://nflseedr.com/reference/summary.nflseedR_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","text":"","code":"# S3 method for nflseedR_simulation summary(object, ...)"},{"path":"https://nflseedr.com/reference/summary.nflseedR_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","text":"object object summary desired. ... additional arguments passed methods (currently used).","code":""},{"path":[]},{"path":"https://nflseedr.com/reference/summary.nflseedR_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pretty Simulations Summary Table — summary.nflseedR_simulation","text":"","code":"# \\donttest{ library(nflseedR) # set seed for recreation set.seed(20220315)  # Simulate the season 20 times in 1 round sim <- nflseedR::simulate_nfl(   nfl_season = 2021,   fresh_season = TRUE,   simulations = 20 ) #> • 2022-07-07 09:58:11: Loading games data #> • 2022-07-07 09:58:11: Beginning simulation of 20 seasons in 1 round #> • 2022-07-07 09:58:24: Combining simulation data #> • 2022-07-07 09:58:24: Aggregating across simulations  # Create Summary Tables tbl <- summary(sim)  # The output of tbl is given in the above image. # }"},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-110","dir":"Changelog","previous_headings":"","what":"nflseedR 1.1.0","title":"nflseedR 1.1.0","text":"Added data frame game_summary output simulate_nfl() aggregates matchups across simulated seasons (#24) Updated description variables load_sharpe_games() (#24) output simulate_nfl() now class nflseedR_simulation allows implementation summary() method computes gt() table simulation summary data frame. (#26) standings data frame calculated compute_division_ranks() now outputs losses ties well. (#27)","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-102","dir":"Changelog","previous_headings":"","what":"nflseedR 1.0.2","title":"nflseedR 1.0.2","text":"CRAN release: 2021-04-10 Improved error handling function load_sharpe_games() CRAN tests","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-101","dir":"Changelog","previous_headings":"","what":"nflseedR 1.0.1","title":"nflseedR 1.0.1","text":"CRAN release: 2021-03-31 Added support fake schedule simulating upcoming season NFL released official schedule. updated documentation function load_sharpe_games() new columns away_qb_id, home_qb_id, away_qb_name home_qb_name.","code":""},{"path":"https://nflseedr.com/news/index.html","id":"nflseedr-100","dir":"Changelog","previous_headings":"","what":"nflseedR 1.0.0","title":"nflseedR 1.0.0","text":"Initial release.","code":""}]
